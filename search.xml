<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>1.后面需要看的(shangguigu14day)</title>
    <url>/2021/12/07/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/%E5%90%8E%E9%9D%A2%E9%9C%80%E8%A6%81%E7%9C%8B%E7%9A%84/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="后面需要看的"><a href="#后面需要看的" class="headerlink" title="后面需要看的"></a>后面需要看的</h1><h2 id="1-10种排序"><a href="#1-10种排序" class="headerlink" title="1.10种排序"></a>1.10种排序</h2><h3 id="2-23种设计模式"><a href="#2-23种设计模式" class="headerlink" title="2.23种设计模式"></a>2.23种设计模式</h3><span id="more"></span>

<ol>
<li><h4 id="第一种-单例模式"><a href="#第一种-单例模式" class="headerlink" title="第一种 单例模式"></a>第一种 单例模式</h4></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式线程安全，加载类时间长，直接创建对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EagerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部创建对象，对象必须是静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EagerSingleton eagerSingleton = <span class="keyword">new</span> EagerSingleton();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EagerSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//提供公共的静态方法，返回类对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EagerSingleton <span class="title">getEagerSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> EagerSingleton.eagerSingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//讲完多线程后面补充安全的</span></span><br><span class="line"><span class="comment">//懒惰式线程不安全，用的时候才创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建类的引用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton lazySingleton = <span class="keyword">null</span>;</span><br><span class="line">	<span class="comment">//私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//返回类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LazySingleton <span class="title">getLazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没创建就创建对象</span></span><br><span class="line">        <span class="keyword">if</span> (lazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lazySingleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//属于单例模式，简陋</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton SINGLETON = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

 <!-- more -->
]]></content>
      <tags>
        <tag>上班需要的看的</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7搭建hadoop分布式集群</title>
    <url>/2021/11/23/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/Centos7%E6%90%AD%E5%BB%BAhadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>﻿## Hadoop搭建</p>
<p>（其他组件安装最近更新）</p>
<h2 id="一-系统一些基本配置"><a href="#一-系统一些基本配置" class="headerlink" title="一.系统一些基本配置"></a>一.系统一些基本配置</h2><p>1.更改网卡配置（克隆之后把另外两台ip改了）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-ens33</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#网卡里面的配置</span></span><br><span class="line"><span class="built_in">TYPE</span>=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span>	<span class="comment">#使用static配置</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable<span class="literal">-privacy</span></span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=<span class="number">316</span>c77f2<span class="literal">-75e6</span><span class="literal">-47cd</span><span class="literal">-ba71</span><span class="literal">-227d4ac9457f</span></span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes	<span class="comment">#开机启动配置</span></span><br><span class="line"><span class="comment">#查看自己的ip和网关</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">232.111</span>	<span class="comment">#静态ip</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">232.2</span>	<span class="comment">#默认网关</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span>	<span class="comment">#子网掩码</span></span><br><span class="line">DNS1=<span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">DNS2=<span class="number">0.0</span>.<span class="number">0.0</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>2.重启网卡</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201005184511853.png#pic_center" alt="重启之后这样才对"><br>3.测试网路是否连通</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201005184859975.PNG#pic_center" alt="连通的图片"><br>4.关闭防火墙：查看防火墙状态</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">firewall<span class="literal">-cmd</span> -<span class="literal">-state</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201005185016527.png#pic_center" alt="防火墙状态"><br>5.临时关闭防火墙，开机还会启动</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201005185125196.png#pic_center" alt="临时关闭的状态"><br>6.设置开机不启动</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201005185246861.png#pic_center" alt="在这里插入图片描述"><br>7.常用软件安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install vim</span><br><span class="line">yum <span class="literal">-y</span> install <span class="built_in">wget</span></span><br><span class="line">yum <span class="literal">-y</span> install lrzsz</span><br><span class="line">yum <span class="literal">-y</span> install net<span class="literal">-tools</span></span><br><span class="line">yum <span class="literal">-y</span> install psmisc</span><br></pre></td></tr></table></figure>

<p>8.配置阿里yum源<br>   备份当前yun源</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p>下载阿里云的yum源配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo http://mirrors.aliyun.com/repo/Centos<span class="literal">-7</span>.repo</span><br></pre></td></tr></table></figure>

<p>清楚原来的缓存，构建新缓存</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<p>9.添加节点信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">232.111</span> master</span><br><span class="line"><span class="number">192.168</span>.<span class="number">232.112</span> slave1</span><br><span class="line"><span class="number">192.168</span>.<span class="number">232.113</span> slave2</span><br></pre></td></tr></table></figure>

<p>10.修改hostname(修改完成后重启生效)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hostname(修改完成后重启生效)</span><br><span class="line">hostnamectl <span class="built_in">set-hostname</span> master <span class="comment">#修改hostname为master</span></span><br></pre></td></tr></table></figure>

<p>10.配置节点之间免密访问(在一台机器上执行，再将该节点克隆两份即可，克隆之后在做两次)<br>在家目录下，执行以下代码生成密钥对，一路回车即可：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-P</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201006112421337.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将公钥文件写入授权文件中，并赋予权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>11.克隆虚拟机（看图    注意:虚拟机需要关闭）</p>
<p><img src="https://img-blog.csdnimg.cn/20201006114456639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201006114456629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201006114456622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201006115915299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201006114610698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>##注意要修改克隆的ip地址以及名称（上面步骤1和10）</p>
<p>12.节点间免密访问测试（任意两台节点都需要测试，第一次需要输入“yes”）<br>    <img src="https://img-blog.csdnimg.cn/20201006120052937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="二-开始安装jdk（可以去官网下载jdk）"><a href="#二-开始安装jdk（可以去官网下载jdk）" class="headerlink" title="二.开始安装jdk（可以去官网下载jdk）"></a>二.开始安装jdk（可以去官网下载jdk）</h2><ol>
<li><h2 id="自行选择下载jdk（点击百度网盘可以下载-jdk百度网盘链接-提取码：d4cf"><a href="#自行选择下载jdk（点击百度网盘可以下载-jdk百度网盘链接-提取码：d4cf" class="headerlink" title="自行选择下载jdk（点击百度网盘可以下载) jdk百度网盘链接 提取码：d4cf"></a>自行选择下载jdk（点击百度网盘可以下载) <a href="https://pan.baidu.com/s/1rDrzMUO04_6UHNLAiDq-OA">jdk百度网盘链接</a> 提取码：d4cf</h2></li>
<li>用xftp上传jdk-8u162-linux-x64.tar.gz文件到/usr/local/java(上传完解压文件,然后改名)</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br><span class="line"><span class="built_in">cd</span> /usr/local/java</span><br><span class="line">tar <span class="literal">-zxvf</span> jdk<span class="literal">-8u162</span><span class="literal">-linux</span><span class="literal">-x64</span>.tar.gz</span><br><span class="line"><span class="built_in">mv</span> jdk1.<span class="number">8.0</span>_162 jdk</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>设置环境变量</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加入下面内容</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk</span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行命令使设置生效</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>验证java是否安装成功</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-version</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201008002344331.png#pic_center" alt="在这里插入图片描述"></p>
<p> 6.执行以下命令，在其他两台节点安装(如果ssh没有使文件生效就去子节点再去执行一下)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给子节点创建java文件夹</span></span><br><span class="line">ssh slave1 mkdir /usr/local/java</span><br><span class="line">ssh slave2 mkdir /usr/local/java</span><br><span class="line"></span><br><span class="line"><span class="comment">#将master节点上的安装包分发到其他节点</span></span><br><span class="line">scp <span class="literal">-r</span> /usr/local/java slave1:/usr/local</span><br><span class="line">scp <span class="literal">-r</span> /usr/local/java slave2:/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment">#将master节点的配置好的环境变量覆盖到其他节点</span></span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave1:/etc/profile</span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave2:/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#使修改生效</span></span><br><span class="line">ssh slave1 source /etc/profile</span><br><span class="line">ssh slave2 source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否安装成功</span></span><br><span class="line">ssh slave1 java <span class="literal">-version</span></span><br><span class="line">ssh slave2 java <span class="literal">-version</span></span><br></pre></td></tr></table></figure>

<h2 id="三-Hadoop安装"><a href="#三-Hadoop安装" class="headerlink" title="三.Hadoop安装"></a>三.Hadoop安装</h2><ol>
<li>自行选择下载jdk（点击百度网盘可以下载) <a href="https://pan.baidu.com/s/1FqJ0AgykeHqj2o2oOh5xuA">hadoop百度网盘链接</a> 提取码：3bq4</li>
<li>用xftp上传hadoop文件到/opt/hadoop(上传完解压文件,然后改名)</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/hadoop</span><br><span class="line"><span class="built_in">cd</span> /opt/hadoop </span><br><span class="line">tar <span class="literal">-zxvf</span> hadoop<span class="literal">-2</span>.<span class="number">7.5</span>.tar.gz</span><br><span class="line"><span class="built_in">mv</span> hadoop<span class="literal">-2</span>.<span class="number">7.5</span> hadoop</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置环境变量</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#在末尾增加以下内容，然后保存</span></span><br><span class="line"><span class="comment">#HADOOP</span></span><br><span class="line">export HADOOP_HOME=/opt/hadoop/hadoop</span><br><span class="line">export PATH=<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使文件生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>配置env文件（打开hadoop-env.sh，找到“export JAVA_HOME”这行配制jdk路径。）</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop/hadoop/etc/hadoop/hadoop<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#写入下列路径(编辑完保存退出即可。)</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>配置核心组件文件（/opt/hadoop/hadoop/etc/hadoop/core-site.xml）</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/core<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑的文件（将下列的配置代码放在文件的&lt;configuration&gt;和&lt;/configuration&gt;,保存退出即可）</span></span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://master:<span class="number">9000</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/opt/hadoop/hadoopdata&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建hadoop数据目录</span></span><br><span class="line">mkdir /opt/hadoop/hadoopdata</span><br></pre></td></tr></table></figure>

<p> 6.配置文件系统（/opt/hadoop/hadoop/etc/hadoop/hdfs-site.xml）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/hdfs<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑的文件（将下列的配置代码放在文件的&lt;configuration&gt;和&lt;/configuration&gt;,保存退出即可）</span></span><br><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;<span class="number">1</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>配置yarn站点文件（/opt/hadoop/hadoop/etc/hadoop/yarn-site.xml）</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/yarn<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑的文件（将下列的配置代码放在文件的&lt;configuration&gt;和&lt;/configuration&gt;,保存退出即可）</span></span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.nodemanager.aux<span class="literal">-services</span>&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:<span class="number">18040</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:<span class="number">18030</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.resource<span class="literal">-tracker</span>.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:<span class="number">18025</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:<span class="number">18141</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:<span class="number">8088</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>配置MapReduce计算框架文件（）</li>
</ol>
<p> 在“/opt/hadoop/hadoop/etc/hadoop”子目录下，系统已经有一个 mapred-site.xml.template文件，我们需要将其复制并改名，位置不变，命令是“</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /opt/hadoop/hadoop/etc/hadoop/mapred<span class="literal">-site</span>.xml.template /opt/hadoop/hadoop/etc/hadoop/mapred<span class="literal">-site</span>.xml</span><br><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/mapred<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure>

<p>  ”，然后，用 vi编辑 mapred-site.xml 文件，需要将下面的代码填充到文件<configuration> </configuration>中间</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>


<p>编辑完毕，保存退出即可。</p>
<ol start="9">
<li>配置Master的slaves文件</li>
</ol>
<ul>
<li><p>slaves 文件给出了 Hadoop 集群的 Slave 节点列表。该文件十分重要，因为启动Hadoop 的时候，系统总是根据当前 slaves 文件中 Slave 节点名称列表启动集群，不在列表中的Slave 节点便不会被视为计算节点。</p>
<ol>
<li>用 vi编辑 slaves 文件，我们应当根据自己所搭建集群的实际情况进行编辑。例如，我们这里由于已经安装了 Slave0 和 Slave1，并且计划将它们全部投入 Hadoop 集群运行，所以应当输入如下代码。</li>
</ol>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi /opt/hadoop/hadoop/etc/hadoop/slaves</span><br><span class="line">	</span><br><span class="line"><span class="comment">#写入下列（需要删除原来文件里面localhost那一行）</span></span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>复制 Master 上的 Hadoop 到 Slave 节点（通过复制 Master 节点上的hadoop，能够大大提高系统部署效率。由于我们这里有Slave1 和 Slave2，所以要复制两次。）</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scp <span class="literal">-r</span> /opt/hadoop root@slave1:/opt</span><br><span class="line">scp <span class="literal">-r</span> /opt/hadoop root@slave2:/opt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="11">
<li>复制Master上的配置文件到Slave节点</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将master节点的配置好的环境变量覆盖到其他节点</span></span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave1:/etc/profile</span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave2:/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#使修改生效</span></span><br><span class="line">ssh slave1 source /etc/profile</span><br><span class="line">ssh slave2 source /etc/profile</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>格式化文件系统（该操作只需要在 Master 节点上进行，命令是“ hadoop namenode -format”）</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hadoop namenode <span class="literal">-format</span></span><br></pre></td></tr></table></figure>

<ol start="13">
<li>启动和关闭 Hadoop</li>
</ol>
<ul>
<li>可以使用 start-all.sh 命令启动 Hadoop 集群。<br>首先进入 Hadoop 安装主目录，然后执行 shin/start-all.sh 命令，执行命令后，系统提示“ Are you sure want to continue connecting（yes/no）”，请输入yes，之后系统即可启动。 </li>
<li>要关闭 Hadoop 集群，可以使用 stop-all.sh 命令,<br>下次启动 Hadoop 时候，无须 NameNode 的初始化，只需要使用start-dfs.sh 命令即可，然后接着使用 start-yarn.sh 启动 Yarn 。</li>
<li>实际上，Hadoop 系统建议放弃（deprecated）使用 start-all. sh 和 stop-all.sh 一类的命令，而改用 start-dfs.sh 和 start-yarn .sh 命令。</li>
</ul>
<ol start="14">
<li>验证 Hadoop 是否启动成功</li>
</ol>
<ul>
<li>用户可以在终端执行 jps 命令查看 Hadoop 是否启动成功。在 Master 节点，执行 jps后如果显示的结果是四个进程的名称： SecondaryNameNode、 ResourceManager、 Jps 和NameNode，如下图所示，则表明主节点（ Master ）启动成功 。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201008020406927.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>在 Slave0 节点执行 jps 命令，打印的结果中会显示三个进程，分别是 NodeManager、<br>Jps 和 DataNode ，如下图所示，表明从节点（Slave0）启动成功。其他节点可以类似验证。<br><img src="https://img-blog.csdnimg.cn/20201008020448168.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
<h2 id="四-Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all-sh）"><a href="#四-Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all-sh）" class="headerlink" title="四.Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all.sh）"></a>四.Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all.sh）</h2><p>1.自行选择下载hive（点击百度网盘链接可以下载) <a href="https://pan.baidu.com/s/1ICqytI-qI6Xa1A4jg2mBqg">百度网盘链接</a> 提取码：vauh</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line">mkdir /opt/Hive</span><br></pre></td></tr></table></figure>

<p>2.用xftp上传压缩文件.gz文件到/opt/Hive(上传完解压文件,然后改名)<br><img src="https://img-blog.csdnimg.cn/20201122143223428.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压文件夹</span></span><br><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-hive</span><span class="literal">-2</span>.<span class="number">3.4</span><span class="literal">-bin</span>.tar.gz</span><br><span class="line"><span class="comment">#给解压的文件改名为hive</span></span><br><span class="line"><span class="built_in">mv</span> apache<span class="literal">-hive</span><span class="literal">-2</span>.<span class="number">3.4</span><span class="literal">-bin</span> hive</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122143817901.png#pic_center" alt="在这里插入图片描述"><br>3.配置hive环境变量</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#打开文件后在对下面添加hive路径</span></span><br><span class="line">export HIVE_HOME=/opt/Hive/hive</span><br><span class="line"><span class="comment">#参考这个我的路径前面配置了jkd，Hadoop路经。“export PATH=$HIVE_HOME/bin:$PATH”</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使文件生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="comment">#查看hive版本号(出现版本说明安装正确）</span></span><br><span class="line">hive -<span class="literal">-version</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122145507959.png#pic_center" alt="在这里插入图片描述"><br>4.修改hive配置文件</p>
<p>进入conf文件夹查看文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hive/hive/conf/</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122150017204.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> hive<span class="literal">-env</span>.sh.template hive<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#添加hadoop环境变量</span></span><br><span class="line">export HADOOP_HOME=/opt/hadoop/hadoop</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122163607772.png#pic_center" alt="在这里插入图片描述"></p>
<p>查看hive-site.xml（如果没有就复制一份模板）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#复制模板（有hive-site.xml文件跳过这一步）</span></span><br><span class="line"><span class="built_in">cp</span> hive<span class="literal">-default</span>.xml.template hive<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure>

<p>配置hive-site.xml</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim hive<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure>

<p>在文件中添加（汉字是解释，把这一段放在文件最下面，在</configuration>上面）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;用户名（这是新添加的，记住删除配置文件原有的哦！）</span><br><span class="line">       &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;密码</span><br><span class="line">       &lt;value&gt;<span class="number">123456</span>&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;mysql</span><br><span class="line">       &lt;value&gt;jdbc:mysql://<span class="number">192.168</span>.<span class="number">232.111</span>:<span class="number">3306</span>/hive&lt;/value&gt;mysql的ip端口号</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;mysql驱动程序</span><br><span class="line">       &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;system:java.io.tmpdir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;/opt/Hive/hive/logs/tmp&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122181238668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>5.用xftp复制mysql的驱动程序到hive/lib下面，<a href="https://pan.baidu.com/s/1iM8zAuuemijjAfNiODui6A">百度网盘中的mysql的jar包链接</a>，验证码：h4m1。我用的jar包为：mysql-connector-java-5.1.21-bin.jar</p>
<p>​<br>6.在mysql中hive的schema（在此之前需要创建mysql下的hive数据库）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hive/hive/bin</span><br><span class="line">schematool <span class="literal">-dbType</span> mysql <span class="literal">-initSchema</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122184640619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>7.执行hive命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122184743486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>1.出现报错</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201122185045339.png#pic_center" alt="在这里插入图片描述"><br>进入hive文件夹下的conf文件下,找到hive-site.xml</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">修改前：</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="variable">$</span>&#123;system:java.io.tmpdir&#125;/<span class="variable">$</span>&#123;system:user.name&#125;&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Local scratch space <span class="keyword">for</span> Hive jobs&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改后：</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="variable">$</span>&#123;system:java.io.tmpdir&#125;/<span class="variable">$</span>&#123;user.name&#125;&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Local scratch space <span class="keyword">for</span> Hive jobs&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>在查看测试成功<br><img src="https://img-blog.csdnimg.cn/20201122190339706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="五-Sqoop安装"><a href="#五-Sqoop安装" class="headerlink" title="五.Sqoop安装"></a>五.Sqoop安装</h2><p>1.自行选择下载sqoop（点击百度网盘链接可以下载) <a href="https://pan.baidu.com/s/1Df7hy1i_Sfvf29yZKp5dsw">百度网盘链接</a> 提取码：bhpf  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line">mkdir /opt/Sqoop</span><br></pre></td></tr></table></figure>

<p>2.用xftp上传压缩文件.gz文件到/opt/Sqoop(上传完解压文件,然后改名)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压文件</span></span><br><span class="line">tar <span class="literal">-zxvf</span> sqoop<span class="literal">-1</span>.<span class="number">4.7</span>.bin__hadoop<span class="literal">-2</span>.<span class="number">6.0</span>.tar.gz</span><br><span class="line">解压完改名</span><br><span class="line"><span class="built_in">mv</span> sqoop<span class="literal">-1</span>.<span class="number">4.7</span>.bin__hadoop<span class="literal">-2</span>.<span class="number">6.0</span> sqoop</span><br></pre></td></tr></table></figure>

<p>3.配置环境变量</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#打开文件后在对下面添加hive路径</span></span><br><span class="line">export SQOOP_HOME=/opt/Sqoop/sqoop</span><br><span class="line"><span class="comment">#参考这个我的路径前面配置了jkd，Hadoop,hive路经。“export PATH=$PATH:$SQOOP_HOME/bin&quot;</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$PATH:</span><span class="variable">$SQOOP_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使文件生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>4.修改配置文件<br>Sqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/Sqoop/sqoop/conf</span><br><span class="line"><span class="comment">#复制文件并改名</span></span><br><span class="line"><span class="built_in">cp</span> sqoop<span class="literal">-env</span><span class="literal">-template</span>.sh sqoop<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#进入文件</span></span><br><span class="line">vim sqoop<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#文件里需要添加的参数</span></span><br><span class="line">export HADOOP_COMMON_HOME=/opt/hadoop/hadoop</span><br><span class="line">export HADOOP_MAPRED_HOME=/opt/hadoop/hadoop</span><br><span class="line">export HIVE_HOME=/opt/Hive/hive</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201123171846372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5.拷贝mysql驱动</p>
<p>拷贝上面hive用的mysql驱动到sqoop的lib目录下</p>
<p>6.验证 Sqoop<br>我们可以通过某一个 command 来验证 sqoop 配置是否正确：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sqoop help</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201123173050203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sqoop list<span class="literal">-databases</span> -<span class="literal">-connect</span> jdbc:mysql://master:<span class="number">3306</span>/ -<span class="literal">-username</span> root -<span class="literal">-password</span> xiwen123</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201123173512134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<hr>
<p>第一个篇博客搭建集群</p>
]]></content>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>1.多线性</title>
    <url>/2021/12/07/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/1-%E5%A4%9A%E7%BA%BF%E6%80%A7/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>[TOC]</p>
<h2 id="一-程序、进程、线程的理解"><a href="#一-程序、进程、线程的理解" class="headerlink" title="一.程序、进程、线程的理解"></a>一.程序、进程、线程的理解</h2><h4 id="1-程序-programm"><a href="#1-程序-programm" class="headerlink" title="1.程序(programm)"></a>1.程序(programm)</h4><ul>
<li>概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</li>
</ul>
<h4 id="2-进程-process"><a href="#2-进程-process" class="headerlink" title="2.进程(process)"></a>2.进程(process)</h4><ul>
<li>概念：程序的一次执行过程，或是正在运行的一个程序。<br>说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li>
</ul>
<h4 id="3-线程-thread"><a href="#3-线程-thread" class="headerlink" title="3.线程(thread)"></a>3.线程(thread)</h4><ul>
<li>概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。<br>说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。<span id="more"></span></li>
</ul>
<p><img src="https://image.3001.net/images/20211210/16391489566127.png" alt="image-20211210230852264"></p>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><h5 id="内存结构："><a href="#内存结构：" class="headerlink" title="内存结构："></a>内存结构：</h5><p><img src="https://image.3001.net/images/20211210/16391489687557.png" alt="image-20211210230904714"></p>
<p>进程可以细化为多个线程。</p>
<p>每个线程，拥有自己独立的：栈、程序计数器<br>多个线程，共享同一个进程中的结构：方法区、堆。</p>
<h2 id="二-并行与并发"><a href="#二-并行与并发" class="headerlink" title="二.并行与并发"></a>二.并行与并发</h2><h4 id="1-单核CPU与多核CPU的理解"><a href="#1-单核CPU与多核CPU的理解" class="headerlink" title="1.单核CPU与多核CPU的理解"></a>1.单核CPU与多核CPU的理解</h4><ul>
<li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费。）但是因为CPU时间单元特别短，因此感觉不出来。<br>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</li>
<li>一个Java应用程序java.exe，其实至少三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li>
</ul>
<h4 id="2-并行与并发的理解"><a href="#2-并行与并发的理解" class="headerlink" title="2.并行与并发的理解"></a>2.并行与并发的理解</h4><ul>
<li>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li>
<li>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事</li>
</ul>
<h3 id="三-创建多线程旧版本的两种方式"><a href="#三-创建多线程旧版本的两种方式" class="headerlink" title="三.创建多线程旧版本的两种方式"></a>三.创建多线程旧版本的两种方式</h3><h4 id="方式一：继承Thread类的方式："><a href="#方式一：继承Thread类的方式：" class="headerlink" title="方式一：继承Thread类的方式："></a>方式一：继承Thread类的方式：</h4><ol>
<li>创建一个继承于Thread类的子类</li>
<li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li>
<li>创建Thread类的子类的对象</li>
<li>通过此对象调用start()：①启动当前线程 ② 调用当前线程的run()</li>
</ol>
<h5 id="说明两个问题："><a href="#说明两个问题：" class="headerlink" title="说明两个问题："></a>说明两个问题：</h5><ol>
<li>问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。</li>
<li>问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().</li>
</ol>
<h4 id="方式二：实现Runnable接口的方式："><a href="#方式二：实现Runnable接口的方式：" class="headerlink" title="方式二：实现Runnable接口的方式："></a>方式二：实现Runnable接口的方式：</h4><ol>
<li>创建一个实现了Runnable接口的类</li>
<li>实现类去实现Runnable中的抽象方法：run()</li>
<li>创建实现类的对象</li>
<li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li>
<li>通过Thread类的对象调用start()</li>
</ol>
<h4 id="两种方式的对比："><a href="#两种方式的对比：" class="headerlink" title="两种方式的对比："></a>两种方式的对比：</h4><ul>
<li>开发中：优先选择：实现Runnable接口的方式</li>
<li>原因：1. 实现的方式没类的单继承性的局限性</li>
<li><ol start="2">
<li>实现的方式更适合来处理多个线程共享数据的情况。</li>
</ol>
</li>
<li>联系：public class Thread implements Runnable</li>
<li>相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。<pre><code>    目前两种方式，要想启动线程，都是调用的Thread类中的start()。
</code></pre>
</li>
</ul>
<h2 id="四-Thread类中的常用的方法"><a href="#四-Thread类中的常用的方法" class="headerlink" title="四.Thread类中的常用的方法"></a>四.Thread类中的常用的方法</h2><h4 id="Thread类中的常用的方法"><a href="#Thread类中的常用的方法" class="headerlink" title="Thread类中的常用的方法:"></a>Thread类中的常用的方法:</h4><ol>
<li>start():启动当前线程；调用当前线程的run()</li>
<li>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li>
<li>currentThread():静态方法，返回执行当前代码的线程</li>
<li>getName():获取当前线程的名字</li>
<li>setName():设置当前线程的名字</li>
<li>yield():释放当前cpu的执行权</li>
<li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li>
<li>stop():已过时。当执行此方法时，强制结束当前线程。</li>
<li>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li>
<li>isAlive():判断当前线程是否存活</li>
<li>线程的优先级：<ol>
<li>常量<ul>
<li>MAX_PRIORITY：10</li>
<li>MIN _PRIORITY：1</li>
<li>NORM_PRIORITY：5  –&gt;默认优先级</li>
</ul>
</li>
<li>如何获取和设置当前线程的优先级：<ul>
<li>getPriority():获取线程的优先级</li>
<li>setPriority(int p):设置线程的优先级</li>
</ul>
</li>
<li>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。</li>
</ol>
</li>
<li>线程通信：wait() /<br>notify() / notifyAll() :此三个方法定义在Object类中的。</li>
</ol>
<p>补充：线程的分类<br>一种是守护线程，一种是用户线程。</p>
<h2 id="五-Thread的生命周期"><a href="#五-Thread的生命周期" class="headerlink" title="五.Thread的生命周期"></a>五.Thread的生命周期</h2><h4 id="图示："><a href="#图示：" class="headerlink" title="图示："></a>图示：</h4><p><img src="https://image.3001.net/images/20211210/16391500884063.png" alt="image-20211210232808470"></p>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ol>
<li><p>生命周期关注两个概念：状态、相应的方法</p>
</li>
<li><p>关注：状态a–&gt;状态b:哪些方法执行了（回调方法）</p>
<pre><code>    某个方法主动调用：状态a--&gt;状态b
</code></pre>
</li>
<li><p>阻塞：临时状态，不可以作为最终状态</p>
<p> 死亡：最终状态。</p>
</li>
</ol>
<h2 id="六-线程的同步机制"><a href="#六-线程的同步机制" class="headerlink" title="六.线程的同步机制"></a>六.线程的同步机制</h2><h3 id="1-线程安全的单例模式（懒汉式）"><a href="#1-线程安全的单例模式（懒汉式）" class="headerlink" title="1.线程安全的单例模式（懒汉式）"></a>1.线程安全的单例模式（懒汉式）</h3><p>使用同步机制将单例模式中的懒汉式改写为线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一：效率稍差</span></span><br><span class="line"><span class="comment">//        synchronized (Bank.class) &#123;</span></span><br><span class="line"><span class="comment">//            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                instance = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return instance;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：效率更高</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>面试题：写一个线程安全的单例模式。<br>饿汉式。<br>懒汉式：上面提供的。</p>
<h3 id="2-死锁的理解"><a href="#2-死锁的理解" class="headerlink" title="2.死锁的理解"></a>2.死锁的理解</h3><h4 id="1-死锁的理解："><a href="#1-死锁的理解：" class="headerlink" title="1.死锁的理解："></a>1.死锁的理解：</h4><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p>
<h4 id="2-说明："><a href="#2-说明：" class="headerlink" title="2.说明："></a>2.说明：</h4><p>出现死锁后，不会出现异常，不会出现提示，只是所的线程都处于阻塞状态，无法继续</p>
<p>我们使用同步时，要避免出现死锁。</p>
<h4 id="3-举例：代码如下"><a href="#3-举例：代码如下" class="headerlink" title="3.举例：代码如下"></a>3.举例：代码如下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line"></span><br><span class="line">                s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    System.out.println(s1);</span><br><span class="line">                    System.out.println(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line"></span><br><span class="line">                s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    System.out.println(s1);</span><br><span class="line">                    System.out.println(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="七-线程通信"><a href="#七-线程通信" class="headerlink" title="七.线程通信"></a>七.线程通信</h2><h3 id="1-线程通信涉及到的三个方法："><a href="#1-线程通信涉及到的三个方法：" class="headerlink" title="1.线程通信涉及到的三个方法："></a>1.线程通信涉及到的三个方法：</h3><ul>
<li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li>
<li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li>
<li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</li>
</ul>
<h3 id="2-说明：-1"><a href="#2-说明：-1" class="headerlink" title="2.说明："></a>2.说明：</h3><ol>
<li><p>wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</p>
</li>
<li><p>wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</p>
<p>否则，会出现IllegalMonitorStateException异常</p>
</li>
<li><p>wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</p>
</li>
</ol>
<h3 id="3-面试题："><a href="#3-面试题：" class="headerlink" title="3.面试题："></a>3.面试题：</h3><p>面试题：sleep() 和 wait()的异同？</p>
<ol>
<li><p>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p>
</li>
<li><p>不同点：</p>
<p>1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</p>
<p>2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</p>
<p>3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</p>
</li>
</ol>
<h3 id="4-小结释放锁的操作："><a href="#4-小结释放锁的操作：" class="headerlink" title="4.小结释放锁的操作："></a>4.小结释放锁的操作：</h3><p><img src="https://image.3001.net/images/20211210/16391512552636.png" alt="image-20211210234732182"></p>
<p>小结不会释放锁的操作：</p>
<p><img src="https://image.3001.net/images/20211210/16391512675274.png" alt="image-20211210234743439"></p>
<h2 id="八-JDK5-0新增线程创建的方式"><a href="#八-JDK5-0新增线程创建的方式" class="headerlink" title="八.JDK5.0新增线程创建的方式"></a>八.JDK5.0新增线程创建的方式</h2><h3 id="1-新增方式一：实现Callable接口。-—-JDK-5-0新增"><a href="#1-新增方式一：实现Callable接口。-—-JDK-5-0新增" class="headerlink" title="1.新增方式一：实现Callable接口。 — JDK 5.0新增"></a>1.新增方式一：实现Callable接口。 — JDK 5.0新增</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;总和为：&quot;</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</li>
<li><ol>
<li>call()可以返回值的。</li>
</ol>
</li>
<li><ol start="2">
<li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li>
</ol>
</li>
<li><ol start="3">
<li>Callable是支持泛型的</li>
</ol>
</li>
</ul>
<h3 id="2-新增方式二：使用线程池"><a href="#2-新增方式二：使用线程池" class="headerlink" title="2.新增方式二：使用线程池"></a>2.新增方式二：使用线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread1());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>好处：</li>
<li>1.提高响应速度（减少了创建新线程的时间）</li>
<li>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li>
<li>3.便于线程管理</li>
<li><pre><code> corePoolSize：核心池的大小
</code></pre>
</li>
<li><pre><code> maximumPoolSize：最大线程数
</code></pre>
</li>
<li><pre><code> keepAliveTime：线程没任务时最多保持多长时间后会终止
</code></pre>
</li>
</ul>
<p>面试题：Java中多线程的创建有几种方式？四种。</p>
<!-- more -->
]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>10-java9&amp;10&amp;11新特性</title>
    <url>/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/10-java9&amp;10&amp;11%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="java9-amp-10-amp-11新特性"><a href="#java9-amp-10-amp-11新特性" class="headerlink" title="java9&amp;10&amp;11新特性"></a>java9&amp;10&amp;11新特性</h1><p>[TOC]</p>
<h2 id="Java9-amp-10-amp-11新特性概述（看视频或者查资料文档）"><a href="#Java9-amp-10-amp-11新特性概述（看视频或者查资料文档）" class="headerlink" title="Java9&amp;10&amp;11新特性概述（看视频或者查资料文档）"></a>Java9&amp;10&amp;11新特性概述（看视频或者查资料文档）</h2><p>具体特性可直接查看第17章ppt即可。</p>
]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>3-枚举类和注解</title>
    <url>/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/3-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="枚举类和注解"><a href="#枚举类和注解" class="headerlink" title="枚举类和注解"></a>枚举类和注解</h1><p>[TOC]</p>
<h2 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1.枚举类的使用"></a>1.枚举类的使用</h2><h3 id="1-枚举类的说明："><a href="#1-枚举类的说明：" class="headerlink" title="1.枚举类的说明："></a>1.枚举类的说明：</h3><ul>
<li>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</li>
<li>2.当需要定义一组常量时，强烈建议使用枚举类</li>
<li>3.如果枚举类中只一个对象，则可以作为单例模式的实现方式。</li>
</ul>
<span id="more"></span>

<h3 id="2-如何自定义枚举类？步骤："><a href="#2-如何自定义枚举类？步骤：" class="headerlink" title="2.如何自定义枚举类？步骤："></a>2.如何自定义枚举类？步骤：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line"> <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.私化类的构造器,并给对象属性赋值</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">     <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//4.其他诉求1：提供toString()</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">             <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-jdk-5-0-新增使用enum定义枚举类。步骤："><a href="#3-jdk-5-0-新增使用enum定义枚举类。步骤：" class="headerlink" title="3.jdk 5.0 新增使用enum定义枚举类。步骤："></a>3.jdk 5.0 新增使用enum定义枚举类。步骤：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> </span>&#123;</span><br><span class="line"> <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line"> SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line"> SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line"> AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line"> WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.私化类的构造器,并给对象属性赋值</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">     <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-使用enum定义枚举类之后，枚举类常用方法：（继承于java-lang-Enum类）"><a href="#4-使用enum定义枚举类之后，枚举类常用方法：（继承于java-lang-Enum类）" class="headerlink" title="4.使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）"></a>4.使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Season1 summer = Season1.SUMMER;</span><br><span class="line">     <span class="comment">//toString():返回枚举类对象的名称</span></span><br><span class="line">     System.out.println(summer.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(Season1.class.getSuperclass());</span></span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        <span class="comment">//values():返回所的枚举类对象构成的数组</span></span><br><span class="line">        Season1[] values = Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; values.length;i++)&#123;</span><br><span class="line">            System.out.println(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        Thread.State[] values1 = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values1.length; i++) &#123;</span><br><span class="line">            System.out.println(values1[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class="line">        Season1 winter = Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        <span class="comment">//如果没objName的枚举类对象，则抛异常：IllegalArgumentException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Season1 winter = Season1.valueOf(&quot;WINTER1&quot;);</span></span><br><span class="line">        System.out.println(winter);</span><br></pre></td></tr></table></figure>




<ol start="5">
<li><h3 id="使用enum定义枚举类之后，如何让枚举类对象分别实现接口："><a href="#使用enum定义枚举类之后，如何让枚举类对象分别实现接口：" class="headerlink" title="使用enum定义枚举类之后，如何让枚举类对象分别实现接口："></a>使用enum定义枚举类之后，如何让枚举类对象分别实现接口：</h3></li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> <span class="keyword">implements</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在哪里？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁夏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天不回来&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-注解的使用"><a href="#2-注解的使用" class="headerlink" title="2.注解的使用"></a>2.注解的使用</h2><h3 id="1-注解的理解"><a href="#1-注解的理解" class="headerlink" title="1.注解的理解"></a>1.注解的理解</h3><p>  ① jdk 5.0 新增的功能<br>  ② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,</p>
<ul>
<li> 程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。</li>
</ul>
<p>  ③ 在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android</p>
<ul>
<li>中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗</li>
<li>代码和XML配置等。</li>
</ul>
<p>  框架 = 注解 + 反射机制 + 设计模式</p>
<h3 id="3-注解的使用示例"><a href="#3-注解的使用示例" class="headerlink" title="3.注解的使用示例"></a>3.注解的使用示例</h3><ul>
<li><p>示例一：生成文档相关的注解</p>
</li>
<li><p>示例二：在编译时进行格式检查(JDK内置的个基本注解)<br>  @Override: 限定重写父类方法, 该注解只能用于方法<br>  @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的择<br>  @SuppressWarnings: 抑制编译器警告</p>
</li>
<li><p>示例：跟踪代码依赖性，实现替代配置文件功能</p>
</li>
</ul>
<ol start="3">
<li>如何自定义注解：参照@SuppressWarnings定义</li>
</ol>
<ul>
<li>① 注解声明为：@interface</li>
<li>② 内部定义成员，通常使用value表示</li>
<li>③ 可以指定成员的默认值，使用default定义</li>
<li>④ 如果自定义注解没成员，表明是一个标识作用。</li>
</ul>
<p>  说明：<br>  如果注解有成员，在使用注解时，需要指明成员的值。<br>  自定义注解必须配上注解的信息处理流程(使用反射)才意义。<br>  自定义注解通过都会指明两个元注解：Retention、Target</p>
<p>  代码举例：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Repeatable(MyAnnotations.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-元注解-：对现有的注解进行解释说明的注解。"><a href="#4-元注解-：对现有的注解进行解释说明的注解。" class="headerlink" title="4.元注解 ：对现有的注解进行解释说明的注解。"></a>4.元注解 ：对现有的注解进行解释说明的注解。</h3><h4 id="jdk-提供的4种元注解："><a href="#jdk-提供的4种元注解：" class="headerlink" title="jdk 提供的4种元注解："></a>jdk 提供的4种元注解：</h4><ul>
<li><p>Retention：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为\RUNTIME</p>
<pre><code>只声明为RUNTIME生命周期的注解，才能通过反射获取。
</code></pre>
</li>
<li><p>Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</p>
</li>
<li><p><em><strong><strong><strong>出现的频率较低</strong></strong></strong></em></p>
</li>
<li><p>Documented:表示所修饰的注解在被javadoc解析时，保留下来。</p>
</li>
<li><p>Inherited:被它修饰的 Annotation 将具继承性。</p>
</li>
<li><p>–&gt;类比：元数据的概念：String name = “Tom”;</p>
</li>
</ul>
<h3 id="5-如何获取注解信息-通过发射来进行获取、调用。"><a href="#5-如何获取注解信息-通过发射来进行获取、调用。" class="headerlink" title="5.如何获取注解信息:通过发射来进行获取、调用。"></a>5.如何获取注解信息:通过发射来进行获取、调用。</h3><p>  前提：要求此注解的元注解Retention中声明的生命周期状态为：RUNTIME.</p>
<h3 id="6-JDK8中注解的新特性：可重复注解、类型注解"><a href="#6-JDK8中注解的新特性：可重复注解、类型注解" class="headerlink" title="6.JDK8中注解的新特性：可重复注解、类型注解"></a>6.JDK8中注解的新特性：可重复注解、类型注解</h3><h4 id="6-1-可重复注解："><a href="#6-1-可重复注解：" class="headerlink" title="6.1 可重复注解："></a>6.1 可重复注解：</h4><ol>
<li>在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</li>
<li> MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</li>
</ol>
<h4 id="6-2-类型注解："><a href="#6-2-类型注解：" class="headerlink" title="6.2 类型注解："></a>6.2 类型注解：</h4><ol>
<li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明。</li>
<li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</li>
</ol>
<!-- more -->
]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>5-泛型</title>
    <url>/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/5-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h1><p>[TOC]</p>
<h2 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h2><h3 id="1-泛型的概念"><a href="#1-泛型的概念" class="headerlink" title="1.泛型的概念"></a>1.泛型的概念</h3><p>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返<br>回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、<br>创建对象时确定（即传入实际的类型参数，也称为类型实参）。</p>
<span id="more"></span>

<h3 id="2-泛型的引入背景"><a href="#2-泛型的引入背景" class="headerlink" title="2.泛型的引入背景"></a>2.泛型的引入背景</h3><p>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection<E>，List<E>，ArrayList<E>   这个<E>就是类型参数，即泛型。</p>
<h2 id="泛型在集合中的使用"><a href="#泛型在集合中的使用" class="headerlink" title="泛型在集合中的使用"></a>泛型在集合中的使用</h2><h3 id="1-在集合中使用泛型之前的例子"><a href="#1-在集合中使用泛型之前的例子" class="headerlink" title="1.在集合中使用泛型之前的例子"></a>1.在集合中使用泛型之前的例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">     ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">     <span class="comment">//需求：存放学生的成绩</span></span><br><span class="line">     list.add(<span class="number">78</span>);</span><br><span class="line">     list.add(<span class="number">76</span>);</span><br><span class="line">     list.add(<span class="number">89</span>);</span><br><span class="line">     list.add(<span class="number">88</span>);</span><br><span class="line">     <span class="comment">//问题一：类型不安全</span></span><br><span class="line"><span class="comment">//        list.add(&quot;Tom&quot;);</span></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"> <span class="keyword">for</span>(Object score : list)&#123;</span><br><span class="line">     <span class="comment">//问题二：强转时，可能出现ClassCastException</span></span><br><span class="line">     <span class="keyword">int</span> stuScore = (Integer) score;</span><br><span class="line"></span><br><span class="line">     System.out.println(stuScore);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>图示：</p>
<p><img src="https://image.3001.net/images/20220109/1641739671801.png" alt="image-20220109224743427"></p>
<h3 id="2-在集合中使用泛型例子1"><a href="#2-在集合中使用泛型例子1" class="headerlink" title="2.在集合中使用泛型例子1"></a>2.在集合中使用泛型例子1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">### </span><br><span class="line"></span><br><span class="line">~~~java</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list =  <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"> list.add(<span class="number">78</span>);</span><br><span class="line"> list.add(<span class="number">87</span>);</span><br><span class="line"> list.add(<span class="number">99</span>);</span><br><span class="line"> list.add(<span class="number">65</span>);</span><br><span class="line"> <span class="comment">//编译时，就会进行类型检查，保证数据的安全</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.add(&quot;Tom&quot;);</span></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"> <span class="comment">//方式一：</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for(Integer score : list)&#123;</span></span><br><span class="line"><span class="comment">//            //避免了强转操作</span></span><br><span class="line"><span class="comment">//            int stuScore = score;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            System.out.println(stuScore);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">     <span class="comment">//方式二：</span></span><br><span class="line">     Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">     <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">         <span class="keyword">int</span> stuScore = iterator.next();</span><br><span class="line">         System.out.println(stuScore);</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>图示：</p>
<p><img src="https://image.3001.net/images/20220109/16417397051226.png" alt="image-20220109224817752"></p>
<h3 id="3-在集合中使用泛型例子2"><a href="#3-在集合中使用泛型例子2" class="headerlink" title="3.在集合中使用泛型例子2"></a>3.在集合中使用泛型例子2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在集合中使用泛型的情况：以HashMap为例</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();</span></span><br><span class="line">     <span class="comment">//jdk7新特性：类型推断</span></span><br><span class="line">     Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"> map.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">87</span>);</span><br><span class="line"> map.put(<span class="string">&quot;Jerry&quot;</span>,<span class="number">87</span>);</span><br><span class="line"> map.put(<span class="string">&quot;Jack&quot;</span>,<span class="number">67</span>);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(123,&quot;ABC&quot;);</span></span><br><span class="line">        <span class="comment">//泛型的嵌套</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entry = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">​        Map.Entry&lt;String, Integer&gt; e = iterator.next();</span><br><span class="line">​        String key = e.getKey();</span><br><span class="line">​        Integer value = e.getValue();</span><br><span class="line">​        System.out.println(key + <span class="string">&quot;----&quot;</span> + value);</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-集合中使用泛型总结："><a href="#4-集合中使用泛型总结：" class="headerlink" title="4.集合中使用泛型总结："></a>4.集合中使用泛型总结：</h3><ul>
<li> ① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。</li>
<li> ② 在实例化集合类时，可以指明具体的泛型类型</li>
<li> ③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</li>
<li> 比如：add(E e)  —&gt;实例化以后：add(Integer e)</li>
<li> ④ 注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</li>
<li> ⑤ 如果实例化时，没指明泛型的类型。默认类型为java.lang.Object类型。</li>
</ul>
<h2 id="自定义泛型类、泛型接口、泛型方法"><a href="#自定义泛型类、泛型接口、泛型方法" class="headerlink" title="自定义泛型类、泛型接口、泛型方法"></a>自定义泛型类、泛型接口、泛型方法</h2><h3 id="1-举例"><a href="#1-举例" class="headerlink" title="1.举例:"></a>1.举例:</h3><h4 id="【Order-java】"><a href="#【Order-java】" class="headerlink" title="【Order.java】"></a>【Order.java】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    String orderName;</span><br><span class="line">    <span class="keyword">int</span> orderId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//类的内部结构就可以使用类的泛型</span></span><br><span class="line">    </span><br><span class="line">    T orderT;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        T[] arr = new T[10];</span></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        T[] arr = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderName,<span class="keyword">int</span> orderId,T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如下的个方法都不是泛型方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getOrderT</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderT</span><span class="params">(T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderName=&#x27;&quot;</span> + orderName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&quot;, orderT=&quot;</span> + orderT +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法中不能使用类的泛型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static void show(T orderT)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(orderT);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;catch(T t)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没任何关系。</span></span><br><span class="line">    <span class="comment">//换句话说，泛型方法所属的类是不是泛型类都没关系。</span></span><br><span class="line">    <span class="comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;  <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="【SubOrder-java】"><a href="#【SubOrder-java】" class="headerlink" title="【SubOrder.java】"></a>【SubOrder.java】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubOrder</span> <span class="keyword">extends</span> <span class="title">Order</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;<span class="comment">//SubOrder:不是泛型类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化时，如下的代码是错误的</span></span><br><span class="line">SubOrder&lt;Integer&gt; o = <span class="keyword">new</span> SubOrder&lt;&gt;();</span><br><span class="line"></span><br><span class="line">【SubOrder1.java】</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubOrder1</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Order</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="comment">//SubOrder1&lt;T&gt;:仍然是泛型类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="【测试】"><a href="#【测试】" class="headerlink" title="【测试】"></a>【测试】</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line">        //如果定义了泛型类，实例化没指明类的泛型，则认为此泛型类型为Object类型</span><br><span class="line">        //要求：如果大家定义了类是带泛型的，建议在实例化时要指明类的泛型。</span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.setOrderT(123);</span><br><span class="line">        order.setOrderT(&quot;ABC&quot;);</span><br><span class="line"></span><br><span class="line">        //建议：实例化时指明类的泛型</span><br><span class="line">        Order&lt;String&gt; order1 = new Order&lt;String&gt;(&quot;orderAA&quot;,1001,&quot;order:AA&quot;);</span><br><span class="line">    </span><br><span class="line">        order1.setOrderT(&quot;AA:hello&quot;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        SubOrder sub1 = new SubOrder();</span><br><span class="line">        //由于子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型。</span><br><span class="line">        sub1.setOrderT(1122);</span><br><span class="line">    </span><br><span class="line">        SubOrder1&lt;String&gt; sub2 = new SubOrder1&lt;&gt;();</span><br><span class="line">        sub2.setOrderT(&quot;order2...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void test3()&#123;</span><br><span class="line">    </span><br><span class="line">        ArrayList&lt;String&gt; list1 = null;</span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        //泛型不同的引用不能相互赋值。</span><br><span class="line"></span><br><span class="line">//        list1 = list2;</span><br><span class="line"></span><br><span class="line">        Person p1 = null;</span><br><span class="line">        Person p2 = null;</span><br><span class="line">        p1 = p2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //测试泛型方法</span><br><span class="line">    @Test</span><br><span class="line">    public void test4()&#123;</span><br><span class="line">        Order&lt;String&gt; order = new Order&lt;&gt;();</span><br><span class="line">        Integer[] arr = new Integer[]&#123;1,2,3,4&#125;;</span><br><span class="line">        //泛型方法在调用时，指明泛型参数的类型。</span><br><span class="line">        List&lt;Integer&gt; list = order.copyFromArrayToList(arr);</span><br><span class="line">    </span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-注意点："><a href="#2-注意点：" class="headerlink" title="2.注意点："></a>2.注意点：</h3><p><img src="https://image.3001.net/images/20220109/16417408941520.png" alt="image-20220109230810674"></p>
<p><img src="https://image.3001.net/images/20220109/16417409086304.png" alt="image-20220109230823070"></p>
<h3 id="3-应用场景举例："><a href="#3-应用场景举例：" class="headerlink" title="3.应用场景举例："></a>3.应用场景举例：</h3><p>【DAO.java】:定义了操作数据库中的表的通用操作。   ORM思想(数据库中的表和Java中的类对应)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAO</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="comment">//表的共性操作的DAO</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index,T t)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询多条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getForList</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//泛型方法</span></span><br><span class="line">    <span class="comment">//举例：获取表中一共有多少条记录？获取最大的员工入职时间？</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="【CustomerDAO-java】"><a href="#【CustomerDAO-java】" class="headerlink" title="【CustomerDAO.java】:"></a>【CustomerDAO.java】:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> <span class="keyword">extends</span> <span class="title">DAO</span>&lt;<span class="title">Customer</span>&gt;</span>&#123;<span class="comment">//只能操作某一个表的DAO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【StudentDAO.java】:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDAO</span> <span class="keyword">extends</span> <span class="title">DAO</span>&lt;<span class="title">Student</span>&gt; </span>&#123;<span class="comment">//只能操作某一个表的DAO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型在继承上的体现"><a href="#泛型在继承上的体现" class="headerlink" title="泛型在继承上的体现"></a>泛型在继承上的体现</h2><h3 id="泛型在继承上的体现-1"><a href="#泛型在继承上的体现-1" class="headerlink" title="泛型在继承上的体现:"></a>泛型在继承上的体现:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       1. 泛型在继承方面的体现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      虽然类A是类B的父类，但是G&lt;A&gt; 和G&lt;B&gt;二者不具备子父类关系，二者是并列关系。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">       补充：类A是类B的父类，A&lt;G&gt; 是 B&lt;G&gt; 的父类</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        obj = str;</span><br><span class="line">    </span><br><span class="line">        Object[] arr1 = <span class="keyword">null</span>;</span><br><span class="line">        String[] arr2 = <span class="keyword">null</span>;</span><br><span class="line">        arr1 = arr2;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Date date = new Date();</span></span><br><span class="line"><span class="comment">//        str = date;</span></span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//此时的list1和list2的类型不具子父类关系</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        list1 = list2;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        反证法：</span></span><br><span class="line"><span class="comment">        假设list1 = list2;</span></span><br><span class="line"><span class="comment">           list1.add(123);导致混入非String的数据。出错。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    </span><br><span class="line">        show(list1);</span><br><span class="line">        show1(list2);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(List&lt;Object&gt; list)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        AbstractList&lt;String&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; list3 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        list1 = list3;</span><br><span class="line">        list2 = list3;</span><br><span class="line">    </span><br><span class="line">        List&lt;String&gt; list4 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><h3 id="1-通配符的使用"><a href="#1-通配符的使用" class="headerlink" title="1.通配符的使用"></a>1.通配符的使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通配符的使用</span></span><br><span class="line"><span class="comment">       通配符：?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       类A是类B的父类，G&lt;A&gt;和G&lt;B&gt;是没关系的，二者共同的父类是：G&lt;?&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        list = list1;</span><br><span class="line">        list = list2;</span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        print(list1);</span></span><br><span class="line"><span class="comment">//        print(list2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        List&lt;String&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list3.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        list3.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        list3.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        list = list3;</span><br><span class="line">        <span class="comment">//添加(写入)：对于List&lt;?&gt;就不能向其内部添加数据。</span></span><br><span class="line">        <span class="comment">//除了添加null之外。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.add(&quot;DD&quot;);</span></span><br><span class="line"><span class="comment">//        list.add(&#x27;?&#x27;);</span></span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">null</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//获取(读取)：允许读取数据，读取的数据类型为Object。</span></span><br><span class="line">        Object o = list.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">        Iterator&lt;?&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-涉及通配符的集合的数据的写入和读取"><a href="#2-涉及通配符的集合的数据的写入和读取" class="headerlink" title="2.涉及通配符的集合的数据的写入和读取:"></a>2.涉及通配符的集合的数据的写入和读取:</h3><p>见上    </p>
<h3 id="3-有限制条件的通配符的使用"><a href="#3-有限制条件的通配符的使用" class="headerlink" title="3.有限制条件的通配符的使用"></a>3.有限制条件的通配符的使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    限制条件的通配符的使用。</span></span><br><span class="line"><span class="comment">        ? extends A:</span></span><br><span class="line"><span class="comment">                G&lt;? extends A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的子类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ? super A:</span></span><br><span class="line"><span class="comment">                G&lt;? super A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的父类</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        List&lt;? extends Person&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;? <span class="keyword">super</span> Person&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        List&lt;Student&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        List&lt;Person&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    </span><br><span class="line">        list1 = list3;</span><br><span class="line">        list1 = list4;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        list1 = list5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list2 = list3;</span></span><br><span class="line">        list2 = list4;</span><br><span class="line">        list2 = list5;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据：</span></span><br><span class="line">        list1 = list3;</span><br><span class="line">        Person p = list1.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="comment">//Student s = list1.get(0);</span></span><br><span class="line">    </span><br><span class="line">        list2 = list4;</span><br><span class="line">        Object obj = list2.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">////编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Person obj = list2.get(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据：</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list1.add(new Student());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        list2.add(<span class="keyword">new</span> Person());</span><br><span class="line">        list2.add(<span class="keyword">new</span> Student());</span><br><span class="line">    </span><br><span class="line">    &#125;	 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>7-网络编程</title>
    <url>/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/7-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>[TOC]</p>
<h2 id="InetAddress类的使用"><a href="#InetAddress类的使用" class="headerlink" title="InetAddress类的使用"></a>InetAddress类的使用</h2><h3 id="一、实现网络通信需要解决的两个问题"><a href="#一、实现网络通信需要解决的两个问题" class="headerlink" title="一、实现网络通信需要解决的两个问题"></a>一、实现网络通信需要解决的两个问题</h3><ul>
<li><h4 id="1-如何准确地定位网络上一台或多台主机；定位主机上的特定的应用"><a href="#1-如何准确地定位网络上一台或多台主机；定位主机上的特定的应用" class="headerlink" title="1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用"></a>1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</h4></li>
<li><h4 id="2-找到主机后如何可靠高效地进行数据传输"><a href="#2-找到主机后如何可靠高效地进行数据传输" class="headerlink" title="2.找到主机后如何可靠高效地进行数据传输"></a>2.找到主机后如何可靠高效地进行数据传输</h4></li>
</ul>
<span id="more"></span>

<h3 id="二、网络通信的两个要素："><a href="#二、网络通信的两个要素：" class="headerlink" title="二、网络通信的两个要素："></a>二、网络通信的两个要素：</h3><ul>
<li><h4 id="1-对应问题一：IP和端口号"><a href="#1-对应问题一：IP和端口号" class="headerlink" title="1.对应问题一：IP和端口号"></a>1.对应问题一：IP和端口号</h4></li>
<li><h4 id="2-对应问题二：提供网络通信协议：TCP-IP参考模型（应用层、传输层、网络层、物理-数据链路层）"><a href="#2-对应问题二：提供网络通信协议：TCP-IP参考模型（应用层、传输层、网络层、物理-数据链路层）" class="headerlink" title="2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）"></a>2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）</h4></li>
</ul>
<h3 id="三、通信要素一：IP和端口号"><a href="#三、通信要素一：IP和端口号" class="headerlink" title="三、通信要素一：IP和端口号"></a>三、通信要素一：IP和端口号</h3><h4 id="1-IP的理解"><a href="#1-IP的理解" class="headerlink" title="1.IP的理解"></a>1.IP的理解</h4><ul>
<li><h5 id="1-IP-唯一的标识-Internet-上的计算机（通信实体）"><a href="#1-IP-唯一的标识-Internet-上的计算机（通信实体）" class="headerlink" title="1.IP:唯一的标识 Internet 上的计算机（通信实体）"></a>1.IP:唯一的标识 Internet 上的计算机（通信实体）</h5></li>
<li><h5 id="2-在Java中使用InetAddress类代表IP"><a href="#2-在Java中使用InetAddress类代表IP" class="headerlink" title="2.在Java中使用InetAddress类代表IP"></a>2.在Java中使用InetAddress类代表IP</h5></li>
<li><h5 id="3-IP分类：IPv4-和-IPv6-万维网-和-局域网"><a href="#3-IP分类：IPv4-和-IPv6-万维网-和-局域网" class="headerlink" title="3.IP分类：IPv4 和 IPv6 ; 万维网 和 局域网"></a>3.IP分类：IPv4 和 IPv6 ; 万维网 和 局域网</h5></li>
<li><h5 id="4-域名-www-baidu-com-www-mi-com-www-sina-com-www-jd-com"><a href="#4-域名-www-baidu-com-www-mi-com-www-sina-com-www-jd-com" class="headerlink" title="4.域名:   www.baidu.com   www.mi.com  www.sina.com  www.jd.com"></a>4.域名:   <a href="http://www.baidu.com/">www.baidu.com</a>   <a href="http://www.mi.com/">www.mi.com</a>  <a href="http://www.sina.com/">www.sina.com</a>  <a href="http://www.jd.com/">www.jd.com</a></h5></li>
<li>   域名解析：域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。 ——-域名解析</li>
<li><h5 id="5-本地回路地址：127-0-0-1-对应着：localhost"><a href="#5-本地回路地址：127-0-0-1-对应着：localhost" class="headerlink" title="5.本地回路地址：127.0.0.1 对应着：localhost"></a>5.本地回路地址：127.0.0.1 对应着：localhost</h5></li>
</ul>
<h4 id="2-InetAddress类-此类的一个对象就代表着一个具体的IP地址"><a href="#2-InetAddress类-此类的一个对象就代表着一个具体的IP地址" class="headerlink" title="2.InetAddress类:此类的一个对象就代表着一个具体的IP地址"></a>2.InetAddress类:此类的一个对象就代表着一个具体的IP地址</h4><h5 id="2-1实例化"><a href="#2-1实例化" class="headerlink" title="2.1实例化"></a>2.1实例化</h5><p>getByName(String host) 、 getLocalHost()</p>
<h5 id="2-2常用方法"><a href="#2-2常用方法" class="headerlink" title="2.2常用方法"></a>2.2常用方法</h5><p>getHostName() / getHostAddress()</p>
<h5 id="3-端口号：正在计算机上运行的进程。"><a href="#3-端口号：正在计算机上运行的进程。" class="headerlink" title="3.端口号：正在计算机上运行的进程。"></a>3.端口号：正在计算机上运行的进程。</h5><ul>
<li>要求：不同的进程不同的端口号</li>
<li>范围：被规定为一个 16 位的整数 0~65535。</li>
</ul>
<p>端口号与IP地址的组合得出一个网络套接字：Socket</p>
<h3 id="四、通信要素二：网络通信协议"><a href="#四、通信要素二：网络通信协议" class="headerlink" title="四、通信要素二：网络通信协议"></a>四、通信要素二：网络通信协议</h3><h4 id="1-分型模型"><a href="#1-分型模型" class="headerlink" title="1.分型模型"></a>1.分型模型</h4><p><img src="https://image.3001.net/images/20220110/16417487489217.png" alt="image-20220110011905781"></p>
<h4 id="2-TCP和UDP的区别"><a href="#2-TCP和UDP的区别" class="headerlink" title="2.TCP和UDP的区别"></a>2.TCP和UDP的区别</h4><p><img src="https://image.3001.net/images/20220110/16417487566665.png" alt="image-20220110011914759"></p>
<h4 id="3-TCP三次握手和四次挥手"><a href="#3-TCP三次握手和四次挥手" class="headerlink" title="3.TCP三次握手和四次挥手"></a>3.TCP三次握手和四次挥手</h4><p><img src="https://image.3001.net/images/20220110/16417487653928.png" alt="image-20220110011923818"></p>
<p><img src="https://image.3001.net/images/20220110/16417487746998.png" alt="image-20220110011932932"></p>
<h2 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h2><h4 id="代码示例1：客户端发送信息给服务端，服务端将数据显示在控制台上"><a href="#代码示例1：客户端发送信息给服务端，服务端将数据显示在控制台上" class="headerlink" title="代码示例1：客户端发送信息给服务端，服务端将数据显示在控制台上"></a>代码示例1：客户端发送信息给服务端，服务端将数据显示在控制台上</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Socket对象，指明服务器端的ip和端口号</span></span><br><span class="line">            InetAddress inet = InetAddress.getByName(<span class="string">&quot;192.168.14.100&quot;</span>);</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(inet,<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//2.获取一个输出流，用于输出数据</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3.写出数据的操作</span></span><br><span class="line">            os.write(<span class="string">&quot;你好，我是客户端mm&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//服务端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    </span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建服务器端的ServerSocket，指明自己的端口号</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//2.调用accept()表示接收来自于客户端的socket</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            <span class="comment">//3.获取输入流</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">//不建议这样写，可能会乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">//        int len;</span></span><br><span class="line"><span class="comment">//        while((len = is.read(buffer)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//            String str = new String(buffer,0,len);</span></span><br><span class="line"><span class="comment">//            System.out.print(str);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//4.读取输入流中的数据</span></span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到了来自于：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//5.关闭资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="代码示例2：客户端发送文件给服务端，服务端将文件保存在本地。"><a href="#代码示例2：客户端发送文件给服务端，服务端将文件保存在本地。" class="headerlink" title="代码示例2：客户端发送文件给服务端，服务端将文件保存在本地。"></a>代码示例2：客户端发送文件给服务端，服务端将文件保存在本地。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">9090</span>);</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    OutputStream os = socket.getOutputStream();</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.</span></span><br><span class="line">    fis.close();</span><br><span class="line">    os.close();</span><br><span class="line">    socket.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    Socket socket = ss.accept();</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    InputStream is = socket.getInputStream();</span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty1.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//5.</span></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.</span></span><br><span class="line">    fos.close();</span><br><span class="line">    is.close();</span><br><span class="line">    socket.close();</span><br><span class="line">    ss.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码示例3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。"><a href="#代码示例3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。" class="headerlink" title="代码示例3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。"></a>代码示例3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">9090</span>);</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    OutputStream os = socket.getOutputStream();</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭数据的输出</span></span><br><span class="line">    socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.接收来自于服务器端的数据，并显示到控制台上</span></span><br><span class="line">    InputStream is = socket.getInputStream();</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] bufferr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> len1;</span><br><span class="line">    <span class="keyword">while</span>((len1 = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        baos.write(buffer,<span class="number">0</span>,len1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(baos.toString());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6.</span></span><br><span class="line">    fis.close();</span><br><span class="line">    os.close();</span><br><span class="line">    socket.close();</span><br><span class="line">    baos.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    Socket socket = ss.accept();</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    InputStream is = socket.getInputStream();</span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty2.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//5.</span></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;图片传输完成&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6.服务器端给予客户端反馈</span></span><br><span class="line">    OutputStream os = socket.getOutputStream();</span><br><span class="line">    os.write(<span class="string">&quot;你好，美女，照片我已收到，非常漂亮！&quot;</span>.getBytes());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//7.</span></span><br><span class="line">    fos.close();</span><br><span class="line">    is.close();</span><br><span class="line">    socket.close();</span><br><span class="line">    ss.close();</span><br><span class="line">    os.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String str = <span class="string">&quot;我是UDP方式发送的导弹&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] data = str.getBytes();</span><br><span class="line">    InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">    DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,<span class="number">0</span>,data.length,inet,<span class="number">9090</span>);</span><br><span class="line">    </span><br><span class="line">    socket.send(packet);</span><br><span class="line">    </span><br><span class="line">    socket.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">    DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line">    </span><br><span class="line">    socket.receive(packet);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">    </span><br><span class="line">    socket.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><h4 id="1-URL-Uniform-Resource-Locator-的理解"><a href="#1-URL-Uniform-Resource-Locator-的理解" class="headerlink" title="1.URL(Uniform Resource Locator)的理解:"></a>1.URL(Uniform Resource Locator)的理解:</h4><p>统一资源定位符，对应着互联网的某一资源地址</p>
<h4 id="2-URL的5个基本结构："><a href="#2-URL的5个基本结构：" class="headerlink" title="2.URL的5个基本结构："></a>2.URL的5个基本结构：</h4><ul>
<li> <a href="http://localhost:8080/examples/beauty.jpg?username=Tom">http://localhost:8080/examples/beauty.jpg?username=Tom</a></li>
<li> 协议   主机名    端口号  资源地址           参数列表</li>
</ul>
<h4 id="3-如何实例化"><a href="#3-如何实例化" class="headerlink" title="3.如何实例化:"></a>3.如何实例化:</h4><p>URL url = new URL(“<a href="http://localhost:8080/examples/beauty.jpg?username=Tom&quot;">http://localhost:8080/examples/beauty.jpg?username=Tom&quot;</a>);</p>
<h4 id="4-常用方法："><a href="#4-常用方法：" class="headerlink" title="4.常用方法："></a>4.常用方法：</h4><p><img src="https://image.3001.net/images/20220110/16417489928182.png" alt="image-20220110012309914"></p>
<h4 id="5-可以读取、下载对应的url资源："><a href="#5-可以读取、下载对应的url资源：" class="headerlink" title="5.可以读取、下载对应的url资源："></a>5.可以读取、下载对应的url资源：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/beauty.jpg&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">    </span><br><span class="line">        urlConnection.connect();</span><br><span class="line">    </span><br><span class="line">        is = urlConnection.getInputStream();</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;day10\\beauty3.jpg&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(urlConnection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            urlConnection.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>9-java8的其他新特性</title>
    <url>/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/9-java8%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="java8的其他新特性"><a href="#java8的其他新特性" class="headerlink" title="java8的其他新特性"></a>java8的其他新特性</h1><p>[TOC]</p>
<h2 id="Java8新特性概述"><a href="#Java8新特性概述" class="headerlink" title="Java8新特性概述"></a>Java8新特性概述</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://image.3001.net/images/20220110/16417497217282.png" alt="image-20220110013500426"></h3><p><img src="https://image.3001.net/images/20220110/16417497187260.png" alt="image-20220110013516751"></p>
<span id="more"></span>

<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="1-Lambda表达式使用前后的对比："><a href="#1-Lambda表达式使用前后的对比：" class="headerlink" title="1.Lambda表达式使用前后的对比："></a>1.Lambda表达式使用前后的对比：</h3><h4 id="举例一："><a href="#举例一：" class="headerlink" title="举例一："></a>举例一：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    r1.run();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Runnable r2 = () -&gt; System.out.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    r2.run();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="举例二："><a href="#举例二：" class="headerlink" title="举例二："></a>举例二：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> compare1 = com1.compare(<span class="number">12</span>,<span class="number">21</span>);</span><br><span class="line">    System.out.println(compare1);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">    <span class="comment">//Lambda表达式的写法</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> compare2 = com2.compare(<span class="number">32</span>,<span class="number">21</span>);</span><br><span class="line">    System.out.println(compare2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">    <span class="comment">//方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> compare3 = com3.compare(<span class="number">32</span>,<span class="number">21</span>);</span><br><span class="line">    System.out.println(compare3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Lambda表达式的基本语法："><a href="#2-Lambda表达式的基本语法：" class="headerlink" title="2.Lambda表达式的基本语法："></a>2.Lambda表达式的基本语法：</h3><ul>
<li><h4 id="1-举例：-o1-o2-gt-Integer-compare-o1-o2"><a href="#1-举例：-o1-o2-gt-Integer-compare-o1-o2" class="headerlink" title="1.举例： (o1,o2) -&gt; Integer.compare(o1,o2);"></a>1.举例： (o1,o2) -&gt; Integer.compare(o1,o2);</h4></li>
<li><h4 id="2-格式："><a href="#2-格式：" class="headerlink" title="2.格式："></a>2.格式：</h4></li>
<li><pre><code> -&gt; :lambda操作符 或 箭头操作符
</code></pre>
</li>
<li><pre><code> -&gt;左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表
</code></pre>
</li>
<li><pre><code> -&gt;右边：lambda体 （其实就是重写的抽象方法的方法体
</code></pre>
</li>
</ul>
<h3 id="3-如何使用：分为六种情况"><a href="#3-如何使用：分为六种情况" class="headerlink" title="3.如何使用：分为六种情况"></a>3.如何使用：分为六种情况</h3><p><img src="https://image.3001.net/images/20220110/16417498246315.png" alt="image-20220110013701610"></p>
<p><img src="https://image.3001.net/images/20220110/1641749837333.png" alt="image-20220110013715918"></p>
<h3 id="总结六种情况："><a href="#总结六种情况：" class="headerlink" title="总结六种情况："></a>总结六种情况：</h3><p>-&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只一个参数，其一对()也可以省略<br>-&gt;右边：lambda体应该使用一对{}包裹；如果lambda体只一条执行语句（可能是return语句，省略这一对{}和return关键字</p>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="1-函数式接口的使用说明"><a href="#1-函数式接口的使用说明" class="headerlink" title="1.函数式接口的使用说明"></a>1.函数式接口的使用说明</h3><blockquote>
<p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。<br>我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。<br>Lambda表达式的本质：作为函数式接口的实例</p>
</blockquote>
<h3 id="2-Java8中关于Lambda表达式提供的4个基本的函数式接口："><a href="#2-Java8中关于Lambda表达式提供的4个基本的函数式接口：" class="headerlink" title="2.Java8中关于Lambda表达式提供的4个基本的函数式接口："></a>2.Java8中关于Lambda表达式提供的4个基本的函数式接口：</h3><p>具体使用：</p>
<p><img src="https://image.3001.net/images/20220110/1641749881425.png" alt="image-20220110013757451"></p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><h4 id="3-1-何时使用lambda表达式？"><a href="#3-1-何时使用lambda表达式？" class="headerlink" title="3.1 何时使用lambda表达式？"></a>3.1 何时使用lambda表达式？</h4><p>当需要对一个函数式接口实例化的时候，可以使用lambda表达式。</p>
<h4 id="3-2-何时使用给定的函数式接口？"><a href="#3-2-何时使用给定的函数式接口？" class="headerlink" title="3.2 何时使用给定的函数式接口？"></a>3.2 何时使用给定的函数式接口？</h4><p>如果我们开发中需要定义一个函数式接口，首先看看在已有的jdk提供的函数式接口是否提供了<br>能满足需求的函数式接口。如果有，则直接调用即可，不需要自己再自定义了。</p>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="1-理解："><a href="#1-理解：" class="headerlink" title="1.理解："></a>1.理解：</h3><p>方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法。</p>
<h3 id="2-使用情境："><a href="#2-使用情境：" class="headerlink" title="2.使用情境："></a>2.使用情境：</h3><p>当要传递给Lambda体的操作，已经实现的方法了，可以使用方法引用！</p>
<h3 id="3-格式："><a href="#3-格式：" class="headerlink" title="3.格式："></a>3.格式：</h3><p>类(或对象) :: 方法名</p>
<h3 id="4-分为如下的三种情况："><a href="#4-分为如下的三种情况：" class="headerlink" title="4.分为如下的三种情况："></a>4.分为如下的三种情况：</h3><ul>
<li>   情况1     对象 :: 非静态方法</li>
<li>   情况2     类 :: 静态方法</li>
<li></li>
<li>   情况3     类 :: 非静态方法</li>
</ul>
<h3 id="5-要求："><a href="#5-要求：" class="headerlink" title="5.要求："></a>5.要求：</h3><blockquote>
<p>要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）<br>当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数(或无参数)时：ClassName::methodName（针对于情况3）</p>
</blockquote>
<h3 id="6-使用建议："><a href="#6-使用建议：" class="headerlink" title="6.使用建议："></a>6.使用建议：</h3><p>如果给函数式接口提供实例，恰好满足方法引用的使用情境，大家就可以考虑使用方法引用给函数式接口提供实例。如果大家不熟悉方法引用，那么还可以使用lambda表达式。</p>
<h3 id="7-使用举例："><a href="#7-使用举例：" class="headerlink" title="7.使用举例："></a>7.使用举例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class="line">	con1.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	PrintStream ps = System.out;</span><br><span class="line">	Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">	con2.accept(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee中的String getName()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Employee emp = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>,<span class="number">5600</span>);</span><br><span class="line"></span><br><span class="line">	Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class="line">	System.out.println(sup1.get());</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">	System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class="line">	System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">	System.out.println(com2.compare(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Function&lt;Double,Long&gt; func = <span class="keyword">new</span> Function&lt;Double, Long&gt;() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Long <span class="title">apply</span><span class="params">(Double d)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> Math.round(d);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class="line">	System.out.println(func1.apply(<span class="number">12.3</span>));</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	Function&lt;Double,Long&gt; func2 = Math::round;</span><br><span class="line">	System.out.println(func2.apply(<span class="number">12.6</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况：类 :: 实例方法  (难度)</span></span><br><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">	System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class="line">	System.out.println(com2.compare(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abm&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">	System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">	System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Employee employee = <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">	System.out.println(func1.apply(employee));</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">	System.out.println(func2.apply(employee));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造器引用与数组引用"><a href="#构造器引用与数组引用" class="headerlink" title="构造器引用与数组引用"></a>构造器引用与数组引用</h2><h3 id="1-构造器引用格式："><a href="#1-构造器引用格式：" class="headerlink" title="1.构造器引用格式："></a>1.构造器引用格式：</h3><p>类名::new</p>
<h3 id="2-构造器引用使用要求："><a href="#2-构造器引用使用要求：" class="headerlink" title="2.构造器引用使用要求："></a>2.构造器引用使用要求：</h3><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。抽象方法的返回值类型即为构造器所属的类的类型</p>
<h3 id="3-构造器引用举例："><a href="#3-构造器引用举例：" class="headerlink" title="3.构造器引用举例："></a>3.构造器引用举例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line">   <span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> Supplier&lt;Employee&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> Employee();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">       Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">       System.out.println(sup1.get());</span><br><span class="line">    </span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">       Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="keyword">new</span> Employee(id);</span><br><span class="line">       Employee employee = func1.apply(<span class="number">1001</span>);</span><br><span class="line">       System.out.println(employee);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">       Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       Employee employee1 = func2.apply(<span class="number">1002</span>);</span><br><span class="line">       System.out.println(employee1);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="keyword">new</span> Employee(id,name);</span><br><span class="line">       System.out.println(func1.apply(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">       BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(func2.apply(<span class="number">1002</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-数组引用格式："><a href="#4-数组引用格式：" class="headerlink" title="4.数组引用格式："></a>4.数组引用格式：</h3><p>数组类型[] :: new</p>
<h3 id="5-数组引用举例："><a href="#5-数组引用举例：" class="headerlink" title="5.数组引用举例："></a>5.数组引用举例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> String[length];</span><br><span class="line">    String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">    String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><h3 id="1-Stream-API的理解："><a href="#1-Stream-API的理解：" class="headerlink" title="1.Stream API的理解："></a>1.Stream API的理解：</h3><h4 id="1-1-Stream关注的是对数据的运算，与CPU打交道"><a href="#1-1-Stream关注的是对数据的运算，与CPU打交道" class="headerlink" title="1.1 Stream关注的是对数据的运算，与CPU打交道"></a>1.1 Stream关注的是对数据的运算，与CPU打交道</h4><p>集合关注的是数据的存储，与内存打交道</p>
<h4 id="1-2-java8提供了一套api-使用这套api可以对内存中的数据进行过滤、排序、映射、归约等操作。类似于sql对数据库中表的相关操作。"><a href="#1-2-java8提供了一套api-使用这套api可以对内存中的数据进行过滤、排序、映射、归约等操作。类似于sql对数据库中表的相关操作。" class="headerlink" title="1.2 java8提供了一套api,使用这套api可以对内存中的数据进行过滤、排序、映射、归约等操作。类似于sql对数据库中表的相关操作。"></a>1.2 java8提供了一套api,使用这套api可以对内存中的数据进行过滤、排序、映射、归约等操作。类似于sql对数据库中表的相关操作。</h4><h3 id="2-注意点："><a href="#2-注意点：" class="headerlink" title="2.注意点："></a>2.注意点：</h3><ul>
<li>①Stream 自己不会存储元素。</li>
<li>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li>
<li>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li>
</ul>
<h3 id="3-Stream的使用流程："><a href="#3-Stream的使用流程：" class="headerlink" title="3.Stream的使用流程："></a>3.Stream的使用流程：</h3><ul>
<li>① Stream的实例化</li>
<li>② 一系列的中间操作（过滤、映射、…)</li>
<li>③ 终止操作</li>
</ul>
<h3 id="4-使用流程的注意点："><a href="#4-使用流程的注意点：" class="headerlink" title="4.使用流程的注意点："></a>4.使用流程的注意点：</h3><ul>
<li>4.1 一个中间操作链，对数据源的数据进行处理</li>
<li>4.2 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</li>
</ul>
<h3 id="5-步骤一：Stream实例化"><a href="#5-步骤一：Stream实例化" class="headerlink" title="5.步骤一：Stream实例化"></a>5.步骤一：Stream实例化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Stream方式一：通过集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">        Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建 Stream方式二：通过数组</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">        IntStream stream = Arrays.stream(arr);</span><br><span class="line">    </span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">        Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建 Stream方式三：通过Stream的of()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建 Stream方式四：创建无限流</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      迭代</span></span><br><span class="line"><span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">        <span class="comment">//遍历前10个偶数</span></span><br><span class="line">        Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//      生成</span></span><br><span class="line"><span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">        Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>6.步骤二：中间操作</p>
<p><img src="https://image.3001.net/images/20220110/16417500887561.png" alt="image-20220110014126697"></p>
<p><img src="https://image.3001.net/images/20220110/16417501028188.png" alt="image-20220110014140484"></p>
<p><img src="https://image.3001.net/images/20220110/16417501125733.png" alt="image-20220110014150894"></p>
<p>7.步骤三：终止操作</p>
<p><img src="https://image.3001.net/images/20220110/16417501184092.png" alt="image-20220110014156928"></p>
<p><img src="https://image.3001.net/images/20220110/16417501251613.png" alt="image-20220110014203765"></p>
<p><img src="https://image.3001.net/images/20220110/16417501377579.png" alt="image-20220110014213556"></p>
<p><img src="https://image.3001.net/images/20220110/16417501506470.png" alt="image-20220110014228932"></p>
<h3 id="6-Collector需要使用Collectors提供实例。"><a href="#6-Collector需要使用Collectors提供实例。" class="headerlink" title="6.Collector需要使用Collectors提供实例。"></a>6.Collector需要使用Collectors提供实例。</h3><p><img src="F:\nodejs\test\blog\source_posts\大数据\java高级\imgs\image-20220110014237670.png" alt="image-20220110014237670"></p>
<h2 id="Optional类的使用"><a href="#Optional类的使用" class="headerlink" title="Optional类的使用"></a>Optional类的使用</h2><p>java.util.Optional类</p>
<h3 id="1-理解：为了解决java中的空指针问题而生！"><a href="#1-理解：为了解决java中的空指针问题而生！" class="headerlink" title="1.理解：为了解决java中的空指针问题而生！"></a>1.理解：为了解决java中的空指针问题而生！</h3><p>Optional<T> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null<br>，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避<br>免空指针异常。</p>
<h3 id="2-常用方法："><a href="#2-常用方法：" class="headerlink" title="2.常用方法："></a>2.常用方法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//empty():创建的Optional对象内部的value = null</span></span><br><span class="line">        Optional&lt;Object&gt; op1 = Optional.empty();</span><br><span class="line">        <span class="keyword">if</span>(!op1.isPresent())&#123;<span class="comment">//Optional封装的数据是否包含数据</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(op1);</span><br><span class="line">        System.out.println(op1.isPresent());</span><br><span class="line">        <span class="comment">//如果Optional封装的数据value为空，则get()报错。否则，value不为空时，返回value.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(op1.get());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        str = null;</span></span><br><span class="line">        <span class="comment">//of(T t):封装数据t生成Optional对象。要求t非空，否则报错。</span></span><br><span class="line">        Optional&lt;String&gt; op1 = Optional.of(str);</span><br><span class="line">        <span class="comment">//get()通常与of()方法搭配使用。用于获取内部的封装的数据value</span></span><br><span class="line">        String str1 = op1.get();</span><br><span class="line">        System.out.println(str1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;beijing&quot;</span>;</span><br><span class="line">        str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//ofNullable(T t) ：封装数据t赋给Optional内部的value。不要求t非空</span></span><br><span class="line">        Optional&lt;String&gt; op1 = Optional.ofNullable(str);</span><br><span class="line">        <span class="comment">//orElse(T t1):如果Optional内部的value非空，则返回此value值。如果</span></span><br><span class="line">        <span class="comment">//value为空，则返回t1.</span></span><br><span class="line">        String str2 = op1.orElse(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        System.out.println(str2);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-典型练习："><a href="#3-典型练习：" class="headerlink" title="3.典型练习："></a>3.典型练习：</h3><p>能保证如下的方法执行中不会出现空指针的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Optional类的getGirlName():</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGirlName2</span><span class="params">(Boy boy)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);</span><br><span class="line">    <span class="comment">//此时的boy1一定非空</span></span><br><span class="line">    Boy boy1 = boyOptional.orElse(<span class="keyword">new</span> Boy(<span class="keyword">new</span> Girl(<span class="string">&quot;迪丽热巴&quot;</span>)));</span><br><span class="line">    </span><br><span class="line">    Girl girl = boy1.getGirl();</span><br><span class="line">    </span><br><span class="line">    Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);</span><br><span class="line">    <span class="comment">//girl1一定非空</span></span><br><span class="line">    Girl girl1 = girlOptional.orElse(<span class="keyword">new</span> Girl(<span class="string">&quot;古力娜扎&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> girl1.getName();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Boy boy = <span class="keyword">null</span>;</span><br><span class="line">    boy = <span class="keyword">new</span> Boy();</span><br><span class="line">    boy = <span class="keyword">new</span> Boy(<span class="keyword">new</span> Girl(<span class="string">&quot;苍老师&quot;</span>));</span><br><span class="line">    String girlName = getGirlName2(boy);</span><br><span class="line">    System.out.println(girlName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>2-java常用类</title>
    <url>/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/2-java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><p>[TOC]</p>
<h2 id="1-java-lang-String类的使用"><a href="#1-java-lang-String类的使用" class="headerlink" title="1.java.lang.String类的使用"></a>1.java.lang.String类的使用</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><h4 id="1-String-字符串，使用一对””引起来表示。"><a href="#1-String-字符串，使用一对””引起来表示。" class="headerlink" title="1.String:字符串，使用一对””引起来表示。"></a>1.String:字符串，使用一对””引起来表示。</h4><ol>
<li>String声明为final的，不可被继承</li>
<li>String实现了Serializable接口：表示字符串是支持序列化的。<pre><code>    实现了Comparable接口：表示String可以比较大小
</code></pre>
</li>
<li>String内部定义了final char[] value用于存储字符串数据</li>
<li>通过字面量的方式（区别于new给一个字符串赋值，此时的字符串值声明在字符串常量池中)。</li>
<li>字符串常量池中是不会存储相同内容(使用String类的equals()比较，返回true)的字符串的。</li>
</ol>
<span id="more"></span>

<h4 id="2-String的不可变性"><a href="#2-String的不可变性" class="headerlink" title="2.String的不可变性"></a>2.String的不可变性</h4><h5 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1 说明"></a>2.1 说明</h5><ol>
<li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</li>
<li>当对现的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li>
<li>当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li>
</ol>
<h5 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2.2 代码举例"></a>2.2 代码举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;abc&quot;</span>;<span class="comment">//字面量的定义方式</span></span><br><span class="line">String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//比较s1和s2的地址值</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1);<span class="comment">//hello</span></span><br><span class="line">System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s3 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">System.out.println(s3);<span class="comment">//abcdef</span></span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String s5 = s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">System.out.println(s5);<span class="comment">//mbc</span></span><br></pre></td></tr></table></figure>

<h5 id="2-3-图示"><a href="#2-3-图示" class="headerlink" title="2.3 图示"></a>2.3 图示</h5><p><img src="https://image.3001.net/images/20211221/16400896452720.png" alt="image-20211221202717745"></p>
<h4 id="3-String实例化的不同方式"><a href="#3-String实例化的不同方式" class="headerlink" title="3.String实例化的不同方式"></a>3.String实例化的不同方式</h4><h5 id="3-1-方式说明"><a href="#3-1-方式说明" class="headerlink" title="3.1 方式说明"></a>3.1 方式说明</h5><p>方式一：通过字面量定义的方式<br>方式二：通过new + 构造器的方式</p>
<h5 id="3-2-代码举例"><a href="#3-2-代码举例" class="headerlink" title="3.2 代码举例"></a>3.2 代码举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span></span><br><span class="line">String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line"><span class="comment">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>



<h5 id="3-3-面试题"><a href="#3-3-面试题" class="headerlink" title="3.3 面试题"></a>3.3 面试题</h5><p>String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？<br>两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p>
<h5 id="3-4-图示"><a href="#3-4-图示" class="headerlink" title="3.4 图示"></a>3.4 图示</h5><p><img src="https://image.3001.net/images/20211221/1640089836146.png" alt="image-20211221203032088"></p>
<ol start="4">
<li><h4 id="字符串拼接方式赋值的对比"><a href="#字符串拼接方式赋值的对比" class="headerlink" title="字符串拼接方式赋值的对比"></a>字符串拼接方式赋值的对比</h4></li>
</ol>
<h5 id="4-1-说明"><a href="#4-1-说明" class="headerlink" title="4.1 说明"></a>4.1 说明</h5><p>  1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>  2.只要其中一个是变量，结果就在堆中。<br>  3.如果拼接的结果调用intern()方法，返回值就在常量池中</p>
<h5 id="4-2-代码举例"><a href="#4-2-代码举例" class="headerlink" title="4.2 代码举例"></a>4.2 代码举例</h5>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">String s4 = <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">String s5 = s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">String s6 = <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">String s7 = s1 + s2;</span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String s8 = s6.intern();<span class="comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span></span><br><span class="line">System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">****************************</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">String s3 = s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String s4 = <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4:常量</span></span><br><span class="line">String s5 = s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">System.out.println(s1 == s5);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="5-常用方法："><a href="#5-常用方法：" class="headerlink" title="5.常用方法："></a>5.常用方法：</h4><ul>
<li>int length()：返回字符串的长度： return value.length</li>
<li>char charAt(int index)： 返回某索引处的字符return value[index]</li>
<li>boolean isEmpty()：判断是否是空字符串：return value.length == 0</li>
<li>String toLowerCase()：使用默认语言环境，将 String 中的所字符转换为小写</li>
<li>String toUpperCase()：使用默认语言环境，将 String 中的所字符转换为大写</li>
<li>String trim()：返回字符串的副本，忽略前导空白和尾部空白</li>
<li>boolean equals(Object obj)：比较字符串的内容是否相同</li>
<li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</li>
<li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li>
<li>int compareTo(String anotherString)：比较两个字符串的大小</li>
<li>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</li>
<li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li>
<li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</li>
<li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</li>
<li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li>
<li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</li>
<li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</li>
<li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</li>
<li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</li>
<li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</li>
</ul>
<p>注：indexOf和lastIndexOf方法如果未找到都是返回-1</p>
<h6 id="替换："><a href="#替换：" class="headerlink" title="替换："></a>替换：</h6><ul>
<li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。</li>
<li>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。</li>
<li>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所匹配给定的正则表达式的子字符串。</li>
<li>String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li>
</ul>
<h6 id="匹配"><a href="#匹配" class="headerlink" title="匹配:"></a>匹配:</h6><ul>
<li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li>
</ul>
<h6 id="切片："><a href="#切片：" class="headerlink" title="切片："></a>切片：</h6><ul>
<li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</li>
<li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li>
</ul>
<ol start="6">
<li><h4 id="String与其它结构的转换"><a href="#String与其它结构的转换" class="headerlink" title="String与其它结构的转换"></a>String与其它结构的转换</h4><h5 id="6-1-与基本数据类型、包装类之间的转换"><a href="#6-1-与基本数据类型、包装类之间的转换" class="headerlink" title="6.1 与基本数据类型、包装类之间的转换"></a>6.1 与基本数据类型、包装类之间的转换</h5><p> String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)<br> 基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">     String str1 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//        int num = (int)str1;//错误的</span></span><br><span class="line">     <span class="keyword">int</span> num = Integer.parseInt(str1);</span><br><span class="line"></span><br><span class="line">     String str2 = String.valueOf(num);<span class="comment">//&quot;123&quot;</span></span><br><span class="line">     String str3 = num + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">     System.out.println(str1 == str3);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="6-2-与字符数组之间的转换"><a href="#6-2-与字符数组之间的转换" class="headerlink" title="6.2 与字符数组之间的转换"></a>6.2 与字符数组之间的转换</h5><p>String –&gt; char[]:调用String的toCharArray()<br>char[] –&gt; String:调用String的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;abc123&quot;</span>;  <span class="comment">//题目： a21cb3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">        System.out.println(charArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-3-与字节数组之间的转换"><a href="#6-3-与字节数组之间的转换" class="headerlink" title="6.3 与字节数组之间的转换"></a>6.3 与字节数组之间的转换</h5><p>编码：String –&gt; byte[]:调用String的getBytes()<br>解码：byte[] –&gt; String:调用String的构造器</p>
<p>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)<br>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂</p>
<p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;abc123中国&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">    System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">    System.out.println(Arrays.toString(gbks));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    String str2 = <span class="keyword">new</span> String(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">    System.out.println(str2);</span><br><span class="line">    </span><br><span class="line">    String str3 = <span class="keyword">new</span> String(gbks);</span><br><span class="line">    System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String str4 = <span class="keyword">new</span> String(gbks, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    System.out.println(str4);<span class="comment">//没出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-4-与StringBuffer、StringBuilder之间的转换"><a href="#6-4-与StringBuffer、StringBuilder之间的转换" class="headerlink" title="6.4 与StringBuffer、StringBuilder之间的转换"></a>6.4 与StringBuffer、StringBuilder之间的转换</h5><p>String –&gt;StringBuffer、StringBuilder:调用StringBuffer、StringBuilder构造器<br>StringBuffer、StringBuilder –&gt;String:①调用String构造器；②StringBuffer、StringBuilder的toString()</p>
<ol start="7">
<li><h6 id="JVM中字符串常量池存放位置说明："><a href="#JVM中字符串常量池存放位置说明：" class="headerlink" title="JVM中字符串常量池存放位置说明："></a>JVM中字符串常量池存放位置说明：</h6></li>
</ol>
<p>  jdk 1.6 (jdk 6.0 ,java 6.0):字符串常量池存储在方法区（永久区）<br>  jdk 1.7:字符串常量池存储在堆空间<br>  jdk 1.8:字符串常量池存储在方法区（元空间）</p>
<ol start="8">
<li><h6 id="常见算法题目的考查："><a href="#常见算法题目的考查：" class="headerlink" title="常见算法题目的考查："></a>常见算法题目的考查：</h6></li>
<li><p>模拟一个trim方法，去除字符串两端的空格。</p>
</li>
<li><p>将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”</p>
</li>
<li><p>获取一个字符串在另一个字符串中出现的次数。</p>
<pre><code>  比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数
</code></pre>
</li>
<li><p>获取两个字符串中最大相同子串。比如：<br>   str1 = “abcwerthelloyuiodef“;str2 = “cvhellobnm”<br>   提示：将短的那个串进行长度依次递减的子串与较长的串比较。</p>
</li>
<li><p>对字符串中字符进行自然顺序排序。<br>提示：<br>1.字符串变成字符数组。<br>2.对数组排序，择，冒泡，Arrays.sort();<br>3.将排序后的数组变成字符串。</p>
</li>
</ol>
<h2 id="2-JDK8之前的日期时间APi"><a href="#2-JDK8之前的日期时间APi" class="headerlink" title="2.JDK8之前的日期时间APi"></a>2.JDK8之前的日期时间APi</h2><h3 id="1-获取系统当前时间：System类中的currentTimeMillis"><a href="#1-获取系统当前时间：System类中的currentTimeMillis" class="headerlink" title="1.获取系统当前时间：System类中的currentTimeMillis()"></a>1.获取系统当前时间：System类中的currentTimeMillis()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span></span><br><span class="line"><span class="comment">//称为时间戳</span></span><br><span class="line">System.out.println(time);</span><br></pre></td></tr></table></figure>



<h3 id="2-java-util-Date类与java-sql-Date类"><a href="#2-java-util-Date类与java-sql-Date类" class="headerlink" title="2.java.util.Date类与java.sql.Date类"></a>2.java.util.Date类与java.sql.Date类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> java.util.Date类</span></span><br><span class="line"><span class="comment">        |---java.sql.Date类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 1.两个构造器的使用</span></span><br><span class="line"><span class="comment">     &gt;构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line"><span class="comment">     &gt;构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line"><span class="comment"> 2.两个方法的使用</span></span><br><span class="line"><span class="comment">     &gt;toString():显示当前的年、月、日、时、分、秒</span></span><br><span class="line"><span class="comment">     &gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3. java.sql.Date对应着数据库中的日期类型的变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &gt;如何实例化</span></span><br><span class="line"><span class="comment">    &gt;如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="comment">    &gt;*/</span></span><br><span class="line">    &gt; <span class="meta">@Test</span></span><br><span class="line">    &gt; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &gt;<span class="comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">    &gt;Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">    &gt;System.out.println(date1.toString());<span class="comment">//Sat Feb 16 16:35:31 GMT+08:00 2019</span></span><br><span class="line"></span><br><span class="line">    System.out.println(date1.getTime());<span class="comment">//1550306204104</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">    Date date2 = <span class="keyword">new</span> Date(<span class="number">155030620410L</span>);</span><br><span class="line">    System.out.println(date2.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">    java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">35235325345L</span>);</span><br><span class="line">    System.out.println(date3);<span class="comment">//1971-02-13</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">    <span class="comment">//情况一：</span></span><br><span class="line">    <span class="comment">//        Date date4 = new java.sql.Date(2343243242323L);</span></span><br><span class="line">    <span class="comment">//        java.sql.Date date5 = (java.sql.Date) date4;</span></span><br><span class="line">    <span class="comment">//情况二：</span></span><br><span class="line">    Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line">    java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-java-text-SimpleDataFormat类"><a href="#3-java-text-SimpleDataFormat类" class="headerlink" title="3.java.text.SimpleDataFormat类"></a>3.java.text.SimpleDataFormat类</h3><h4 id="SimpleDateFormat对日期Date类的格式化和解析"><a href="#SimpleDateFormat对日期Date类的格式化和解析" class="headerlink" title="SimpleDateFormat对日期Date类的格式化和解析"></a>SimpleDateFormat对日期Date类的格式化和解析</h4><p>1.两个操作：<br>1.1 格式化：日期 —&gt;字符串<br>1.2 解析：格式化的逆过程，字符串 —&gt; 日期</p>
<p>2.SimpleDateFormat的实例化:new + 构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//*************照指定的方式格式化和解析：调用带参的构造器*****************</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;);</span></span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String format1 = sdf1.format(date);</span><br><span class="line">        System.out.println(format1);<span class="comment">//2019-02-18 11:48:27</span></span><br><span class="line">        <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">        <span class="comment">//否则，抛异常</span></span><br><span class="line">        Date date2 = sdf1.parse(<span class="string">&quot;2020-02-18 11:48:27&quot;</span>);</span><br><span class="line">        System.out.println(date2);</span><br></pre></td></tr></table></figure>

<h4 id="小练习："><a href="#小练习：" class="headerlink" title="小练习："></a>小练习：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    练习一：字符串&quot;2020-09-08&quot;转换为java.sql.Date</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    练习二：&quot;天打渔两天晒网&quot;   1990-01-01  xxxx-xx-xx 打渔？晒网？</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    举例：2020-09-08 ？ 总天数</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    总天数 % 5 == 1,2,3 : 打渔</span></span><br><span class="line"><span class="comment">    总天数 % 5 == 4,0 : 晒网</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    总天数的计算？</span></span><br><span class="line"><span class="comment">    方式一：( date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24) + 1</span></span><br><span class="line"><span class="comment">    方式二：1990-01-01  --&gt; 2019-12-31  +  2020-01-01 --&gt;2020-09-08</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExer</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        String birth = <span class="string">&quot;2020-09-08&quot;</span>;</span><br><span class="line">    </span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date = sdf1.parse(birth);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(date);</span></span><br><span class="line"></span><br><span class="line">        java.sql.Date birthDate = <span class="keyword">new</span> java.sql.Date(date.getTime());</span><br><span class="line">        System.out.println(birthDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-Calendar类：日历类、抽象类"><a href="#4-Calendar类：日历类、抽象类" class="headerlink" title="4.Calendar类：日历类、抽象类"></a>4.Calendar类：日历类、抽象类</h3><p>​        //1.实例化<br>​        //方式一：创建其子类（GregorianCalendar的对象<br>​        //方式二：调用其静态方法getInstance()<br>​        Calendar calendar = Calendar.getInstance();<br>//        System.out.println(calendar.getClass());</p>
<pre><code>    //2.常用方法
    //get()
    int days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);
    System.out.println(calendar.get(Calendar.DAY_OF_YEAR));

    //set()
    //calendar可变性
     calendar.set(Calendar.DAY_OF_MONTH,22);
    days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);

    //add()
    calendar.add(Calendar.DAY_OF_MONTH,-3);
    days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);

    //getTime():日历类---&gt; Date
    Date date = calendar.getTime();
    System.out.println(date);

    //setTime():Date ---&gt; 日历类
    Date date1 = new Date();
    calendar.setTime(date1);
    days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);
</code></pre>
<h2 id="3-JDK8中新日期时间API"><a href="#3-JDK8中新日期时间API" class="headerlink" title="3.JDK8中新日期时间API"></a>3.JDK8中新日期时间API</h2><h4 id="1-日期时间API的迭代："><a href="#1-日期时间API的迭代：" class="headerlink" title="1.日期时间API的迭代："></a>1.日期时间API的迭代：</h4><p>第一代：jdk 1.0 Date类<br>第二代：jdk 1.1 Calendar类，一定程度上替换Date类<br>第三代：jdk 1.8 提出了新的一套API</p>
<h4 id="2-前两代存在的问题举例："><a href="#2-前两代存在的问题举例：" class="headerlink" title="2.前两代存在的问题举例："></a>2.前两代存在的问题举例：</h4><p>可变性：像日期和时间这样的类应该是不可变的。<br>偏移性：Date中的年份是从1900开始的，而月份都从0开始。<br>格式化：格式化只对Date用，Calendar则不行。<br>此外，它们也不是线程安全的；不能处理闰秒等。</p>
<h4 id="3-java-8-中新的日期时间API涉及到的包"><a href="#3-java-8-中新的日期时间API涉及到的包" class="headerlink" title="3.java 8 中新的日期时间API涉及到的包"></a>3.java 8 中新的日期时间API涉及到的包</h4><p><img src="https://image.3001.net/images/20211221/1640091141866.png" alt="image-20211221205214647"></p>
<h4 id="4-本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime"><a href="#4-本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime" class="headerlink" title="4.本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime"></a>4.本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime</h4><h5 id="4-1-说明："><a href="#4-1-说明：" class="headerlink" title="4.1 说明："></a>4.1 说明：</h5><p>① 分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。<br>② LocalDateTime相较于LocalDate、LocalTime，使用频率要高<br>③ 类似于Calendar</p>
<h5 id="4-2-常用方法："><a href="#4-2-常用方法：" class="headerlink" title="4.2 常用方法："></a>4.2 常用方法：</h5><p><img src="https://image.3001.net/images/20211221/16400911524465.png" alt="image-20211221205229584"></p>
<h4 id="5-时间点：Instant"><a href="#5-时间点：Instant" class="headerlink" title="5.时间点：Instant"></a>5.时间点：Instant</h4><h5 id="5-1-说明："><a href="#5-1-说明：" class="headerlink" title="5.1 说明："></a>5.1 说明：</h5><p>① 时间线上的一个瞬时点。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC开始的秒数。）<br>② 类似于 java.util.Date类</p>
<h5 id="5-2-常用方法："><a href="#5-2-常用方法：" class="headerlink" title="5.2 常用方法："></a>5.2 常用方法：</h5><p><img src="https://image.3001.net/images/20211221/16400911649876.png" alt="image-20211221205241493"></p>
<h4 id="6-日期时间格式化类：DateTimeFormatter"><a href="#6-日期时间格式化类：DateTimeFormatter" class="headerlink" title="6.日期时间格式化类：DateTimeFormatter"></a>6.日期时间格式化类：DateTimeFormatter</h4><h5 id="6-1-说明："><a href="#6-1-说明：" class="headerlink" title="6.1 说明："></a>6.1 说明：</h5><p>① 格式化或解析日期、时间<br>② 类似于SimpleDateFormat</p>
<h5 id="6-2-常用方法："><a href="#6-2-常用方法：" class="headerlink" title="6.2 常用方法："></a>6.2 常用方法：</h5><h6 id="①-实例化方式："><a href="#①-实例化方式：" class="headerlink" title="① 实例化方式："></a>① 实例化方式：</h6><p>预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME<br>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)<br>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p>
<h6 id="②-常用方法："><a href="#②-常用方法：" class="headerlink" title="② 常用方法："></a>② 常用方法：</h6><p><img src="https://image.3001.net/images/20211221/16400911865592.png" alt="image-20211221205303500"></p>
<p>特别的：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)<br>//  重点：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line">String str4 = formatter3.format(LocalDateTime.now());</span><br><span class="line">System.out.println(str4);<span class="comment">//2019-02-18 03:52:09</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析</span></span><br><span class="line">TemporalAccessor accessor = formatter3.parse(<span class="string">&quot;2019-02-18 03:52:09&quot;</span>);</span><br><span class="line">System.out.println(accessor);</span><br></pre></td></tr></table></figure>



<h4 id="7-其它API的使用-（不讲）"><a href="#7-其它API的使用-（不讲）" class="headerlink" title="7.其它API的使用 （不讲）"></a>7.其它API的使用 （不讲）</h4><h5 id="7-1-带时区的日期时间：ZonedDateTime-ZoneId"><a href="#7-1-带时区的日期时间：ZonedDateTime-ZoneId" class="headerlink" title="7.1 带时区的日期时间：ZonedDateTime / ZoneId"></a>7.1 带时区的日期时间：ZonedDateTime / ZoneId</h5><p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZoneId:类中包含了所的时区信息</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//getAvailableZoneIds():获取所的ZoneId</span></span><br><span class="line">		Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">		<span class="keyword">for</span>(String s : zoneIds)&#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取“Asia/Tokyo”时区对应的时间</span></span><br><span class="line">		LocalDateTime localDateTime = LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>));</span><br><span class="line">		System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ZonedDateTime:带时区的日期时间</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//now():获取本时区的ZonedDateTime对象</span></span><br><span class="line">		ZonedDateTime zonedDateTime = ZonedDateTime.now();</span><br><span class="line">		System.out.println(zonedDateTime);</span><br><span class="line">		<span class="comment">//now(ZoneId id):获取指定时区的ZonedDateTime对象</span></span><br><span class="line">		ZonedDateTime zonedDateTime1 = ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>));</span><br><span class="line">		System.out.println(zonedDateTime1);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-2-时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准"><a href="#7-2-时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准" class="headerlink" title="7.2 时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准"></a>7.2 时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准</h5><p><img src="https://image.3001.net/images/20211221/16400912304602.png" alt="image-20211221205346496"></p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">		LocalTime localTime = LocalTime.now();</span><br><span class="line">		LocalTime localTime1 = LocalTime.of(<span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">		<span class="comment">//between():静态方法，返回Duration对象，表示两个时间的间隔</span></span><br><span class="line">		Duration duration = Duration.between(localTime1, localTime);</span><br><span class="line">		System.out.println(duration);</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		System.out.println(duration.getSeconds());</span><br><span class="line">		System.out.println(duration.getNano());</span><br><span class="line">		</span><br><span class="line">		LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">		LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">		</span><br><span class="line">		Duration duration1 = Duration.between(localDateTime1, localDateTime);</span><br><span class="line">		System.out.println(duration1.toDays());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">##### </span><br></pre></td></tr></table></figure>

<h5 id="7-3-日期间隔：Period-–用于计算两个“日期”间隔，以年、月、日衡量"><a href="#7-3-日期间隔：Period-–用于计算两个“日期”间隔，以年、月、日衡量" class="headerlink" title="7.3 日期间隔：Period –用于计算两个“日期”间隔，以年、月、日衡量"></a>7.3 日期间隔：Period –用于计算两个“日期”间隔，以年、月、日衡量</h5><p><img src="https://image.3001.net/images/20211221/16400912474001.png" alt="image-20211221205404198"></p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">		LocalDate localDate = LocalDate.now();</span><br><span class="line">		LocalDate localDate1 = LocalDate.of(<span class="number">2028</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		Period period = Period.between(localDate, localDate1);</span><br><span class="line">		System.out.println(period);</span><br><span class="line">		</span><br><span class="line">		System.out.println(period.getYears());</span><br><span class="line">		System.out.println(period.getMonths());</span><br><span class="line">		System.out.println(period.getDays());</span><br><span class="line">		</span><br><span class="line">		Period period1 = period.withYears(<span class="number">2</span>);</span><br><span class="line">		System.out.println(period1);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">##### </span><br></pre></td></tr></table></figure>

<h5 id="7-4-日期时间校正器：TemporalAdjuster"><a href="#7-4-日期时间校正器：TemporalAdjuster" class="headerlink" title="7.4 日期时间校正器：TemporalAdjuster"></a>7.4 日期时间校正器：TemporalAdjuster</h5><p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//获取当前日期的下一个周日是哪天？</span></span><br><span class="line">	TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.SUNDAY);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	LocalDateTime localDateTime = LocalDateTime.now().with(temporalAdjuster);</span><br><span class="line">	System.out.println(localDateTime);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取下一个工作日是哪天？</span></span><br><span class="line">	LocalDate localDate = LocalDate.now().with(<span class="keyword">new</span> TemporalAdjuster()&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Temporal <span class="title">adjustInto</span><span class="params">(Temporal temporal)</span> </span>&#123;</span><br><span class="line">			LocalDate date = (LocalDate)temporal;</span><br><span class="line">			<span class="keyword">if</span>(date.getDayOfWeek().equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">				<span class="keyword">return</span> date.plusDays(<span class="number">3</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(date.getDayOfWeek().equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line">				<span class="keyword">return</span> date.plusDays(<span class="number">2</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> date.plusDays(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">				</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">&quot;下一个工作日是：&quot;</span> + localDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-Java比较器"><a href="#3-Java比较器" class="headerlink" title="3.Java比较器"></a>3.Java比较器</h2><h3 id="1-Java比较器的使用背景："><a href="#1-Java比较器的使用背景：" class="headerlink" title="1.Java比较器的使用背景："></a>1.Java比较器的使用背景：</h3><p>Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的<br>但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。<br>如何实现？使用两个接口中的任何一个：Comparable 或 Comparator</p>
<h3 id="2-自然排序：使用Comparable接口"><a href="#2-自然排序：使用Comparable接口" class="headerlink" title="2.自然排序：使用Comparable接口"></a>2.自然排序：使用Comparable接口</h3><h4 id="2-1-说明-1"><a href="#2-1-说明-1" class="headerlink" title="2.1 说明"></a>2.1 说明</h4><ol>
<li>像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。</li>
<li>像String、包装类重写compareTo()方法以后，进行了从小到大的排列</li>
<li>重写compareTo(obj)的规则：<br>如果当前对象this大于形参对象obj，则返回正整数，<br>如果当前对象this小于形参对象obj，则返回负整数，<br>如果当前对象this等于形参对象obj，则返回零。</li>
<li>对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序</li>
</ol>
<h4 id="2-2-自定义类代码举例："><a href="#2-2-自定义类代码举例：" class="headerlink" title="2.2 自定义类代码举例："></a>2.2 自定义类代码举例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span>  <span class="title">Comparable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指明商品比较大小的方式:照价格从低到高排序,再照产品名称从高到低排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;**************&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">            Goods goods = (Goods)o;</span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.price &gt; goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.price &lt; goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line">               <span class="keyword">return</span> -<span class="keyword">this</span>.name.compareTo(goods.name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//           return Double.compare(this.price,goods.price);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// getter、setter、toString()、构造器：省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-定制排序：使用Comparator接口"><a href="#3-定制排序：使用Comparator接口" class="headerlink" title="3.定制排序：使用Comparator接口"></a>3.定制排序：使用Comparator接口</h3><h4 id="3-1-说明"><a href="#3-1-说明" class="headerlink" title="3.1 说明"></a>3.1 说明</h4><ol>
<li>背景：<br>当元素的类型没实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序</li>
<li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：<br>如果方法返回正整数，则表示o1大于o2；<br>如果返回0，表示相等；<br>返回负整数，表示o1小于o2。</li>
</ol>
<h4 id="3-2-代码举例："><a href="#3-2-代码举例：" class="headerlink" title="3.2 代码举例："></a>3.2 代码举例：</h4><p>Comparator com = new Comparator() {<br>    //指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Goods &amp;&amp; o2 <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">            Goods g1 = (Goods)o1;</span><br><span class="line">            Goods g2 = (Goods)o2;</span><br><span class="line">            <span class="keyword">if</span>(g1.getName().equals(g2.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> -Double.compare(g1.getPrice(),g2.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(goods,com);</span><br><span class="line">Collections.sort(coll,com);</span><br><span class="line"><span class="keyword">new</span> TreeSet(com);</span><br></pre></td></tr></table></figure>

<h3 id="4-两种排序方式对比"><a href="#4-两种排序方式对比" class="headerlink" title="4.两种排序方式对比"></a>4.两种排序方式对比</h3><ul>
<li>   Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</li>
<li>   Comparator接口属于临时性的比较。</li>
</ul>
<h2 id="4-其他类"><a href="#4-其他类" class="headerlink" title="4.其他类"></a>4.其他类</h2><h3 id="1-System类"><a href="#1-System类" class="headerlink" title="1.System类"></a>1.System类</h3><ul>
<li>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</li>
<li>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</li>
<li>方法：<ul>
<li>native long currentTimeMillis()</li>
<li>void exit(int status)</li>
<li>void gc()</li>
<li>String getProperty(String key)</li>
</ul>
</li>
</ul>
<h3 id="2-Math类"><a href="#2-Math类" class="headerlink" title="2.Math类"></a>2.Math类</h3><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p>
<h3 id="3-BigInteger类、BigDecimal类"><a href="#3-BigInteger类、BigDecimal类" class="headerlink" title="3.BigInteger类、BigDecimal类"></a>3.BigInteger类、BigDecimal类</h3><ol>
<li>说明：<br>① java.math包的BigInteger可以表示不可变的任意精度的整数。<br>② 要求数字精度比较高，用到java.math.BigDecimal类</li>
<li>代码举例：</li>
</ol>
<p><img src="https://image.3001.net/images/20211221/16400916593611.png" alt="image-20211221210055084"></p>
<!-- more -->
]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>4-Java集合</title>
    <url>/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/4-Java%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><p>[TOC]</p>
<h2 id="1-数组与集合"><a href="#1-数组与集合" class="headerlink" title="1.数组与集合"></a>1.数组与集合</h2><h3 id="1-集合与数组存储数据概述："><a href="#1-集合与数组存储数据概述：" class="headerlink" title="1.集合与数组存储数据概述："></a>1.集合与数组存储数据概述：</h3><ul>
<li>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。</li>
<li>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中)</li>
</ul>
<span id="more"></span>

<h3 id="2-数组存储的特点："><a href="#2-数组存储的特点：" class="headerlink" title="2.数组存储的特点："></a>2.数组存储的特点：</h3><blockquote>
<ul>
<li>一旦初始化以后，其长度就确定了。<br>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。</li>
</ul>
<ul>
<li><pre><code>  比如：String[] arr;int[] arr1;Object[] arr2;
</code></pre>
</li>
<li></li>
</ul>
</blockquote>
<h3 id="3-数组存储的弊端："><a href="#3-数组存储的弊端：" class="headerlink" title="3.数组存储的弊端："></a>3.数组存储的弊端：</h3><ul>
<li><blockquote>
<p>一旦初始化以后，其长度就不可修改。</p>
</blockquote>
</li>
<li><blockquote>
<p>数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</p>
</blockquote>
</li>
<li><blockquote>
<p>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</p>
</blockquote>
</li>
<li><blockquote>
<p>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</p>
</blockquote>
</li>
</ul>
<h3 id="4-集合存储的优点："><a href="#4-集合存储的优点：" class="headerlink" title="4.集合存储的优点："></a>4.集合存储的优点：</h3><ul>
<li>解决数组存储数据方面的弊端。</li>
</ul>
<h2 id="2-Iterator接口与foreach循环"><a href="#2-Iterator接口与foreach循环" class="headerlink" title="2.Iterator接口与foreach循环"></a>2.Iterator接口与foreach循环</h2><h3 id="1-遍历Collection的两种方式："><a href="#1-遍历Collection的两种方式：" class="headerlink" title="1.遍历Collection的两种方式："></a>1.遍历Collection的两种方式：</h3><h4 id="①-使用迭代器Iterator"><a href="#①-使用迭代器Iterator" class="headerlink" title="① 使用迭代器Iterator"></a>① 使用迭代器Iterator</h4><h4 id="②-foreach循环（或增强for循环）"><a href="#②-foreach循环（或增强for循环）" class="headerlink" title="② foreach循环（或增强for循环）"></a>② foreach循环（或增强for循环）</h4><h3 id="2-java-utils包下定义的迭代器接口：Iterator"><a href="#2-java-utils包下定义的迭代器接口：Iterator" class="headerlink" title="2.java.utils包下定义的迭代器接口：Iterator"></a>2.java.utils包下定义的迭代器接口：Iterator</h3><h4 id="2-1说明："><a href="#2-1说明：" class="headerlink" title="2.1说明："></a>2.1说明：</h4><p>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。<br> GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。</p>
<h4 id="2-2作用："><a href="#2-2作用：" class="headerlink" title="2.2作用："></a>2.2作用：</h4><p>遍历集合Collectiton元素</p>
<h4 id="2-3如何获取实例："><a href="#2-3如何获取实例：" class="headerlink" title="2.3如何获取实例："></a>2.3如何获取实例：</h4><p>coll.iterator()返回一个迭代器实例</p>
<h4 id="2-4遍历的代码实现："><a href="#2-4遍历的代码实现：" class="headerlink" title="2.4遍历的代码实现："></a>2.4遍历的代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator iterator = coll.iterator();</span><br><span class="line"><span class="comment">//hasNext():判断是否还下一个元素</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5图示说明："><a href="#2-5图示说明：" class="headerlink" title="2.5图示说明："></a>2.5图示说明：</h4><p><img src="https://image.3001.net/images/20220105/16413969058917.png" alt="image-20220105233433510"></p>
<h4 id="2-6-remove-的使用："><a href="#2-6-remove-的使用：" class="headerlink" title="2.6 remove()的使用："></a>2.6 remove()的使用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试Iterator中的remove()</span></span><br><span class="line"><span class="comment">//如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。</span></span><br><span class="line"><span class="comment">//内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中&quot;Tom&quot;</span></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            iterator.remove();</span></span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line"><span class="comment">//                iterator.remove();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="comment">//遍历集合</span></span><br><span class="line">​    iterator = coll.iterator();</span><br><span class="line">​    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">​        System.out.println(iterator.next());</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-jdk5-0新特性–增强for循环：-foreach循环"><a href="#3-jdk5-0新特性–增强for循环：-foreach循环" class="headerlink" title="3.jdk5.0新特性–增强for循环：(foreach循环)"></a>3.jdk5.0新特性–增强for循环：(foreach循环)</h3><h4 id="1-遍历集合举例："><a href="#1-遍历集合举例：" class="headerlink" title="1.遍历集合举例："></a>1.遍历集合举例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll.add(<span class="number">123</span>);</span><br><span class="line">    coll.add(<span class="number">456</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">    coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(Object obj : coll)&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：<br>内部仍然调用了迭代器。</p>
<h4 id="2-遍历数组举例："><a href="#2-遍历数组举例：" class="headerlink" title="2.遍历数组举例："></a>2.遍历数组举例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Collection子接口：List接口"><a href="#3-Collection子接口：List接口" class="headerlink" title="3.Collection子接口：List接口"></a>3.Collection子接口：List接口</h2><h3 id="1-存储的数据特点：存储序的、可重复的数据。"><a href="#1-存储的数据特点：存储序的、可重复的数据。" class="headerlink" title="1.存储的数据特点：存储序的、可重复的数据。"></a>1.存储的数据特点：存储序的、可重复的数据。</h3><h3 id="2-常用方法：-记住"><a href="#2-常用方法：-记住" class="headerlink" title="2.常用方法：(记住)"></a>2.常用方法：(记住)</h3><ul>
<li>增：add(Object obj)</li>
<li>删：remove(int index) / remove(Object obj)</li>
<li>改：set(int index, Object ele)</li>
<li>查：get(int index)</li>
<li>插：add(int index, Object ele)</li>
<li>长度：size()</li>
<li>遍历：① Iterator迭代器方式<br>  ② 增强for循环<br>  ③ 普通的循环</li>
</ul>
<h3 id="3-常用实现类："><a href="#3-常用实现类：" class="headerlink" title="3.常用实现类："></a>3.常用实现类：</h3><h4 id="—-Collection接口：单列集合，用来存储一个一个的对象"><a href="#—-Collection接口：单列集合，用来存储一个一个的对象" class="headerlink" title="|—-Collection接口：单列集合，用来存储一个一个的对象"></a>|—-Collection接口：单列集合，用来存储一个一个的对象</h4><ul>
<li>|—-List接口：存储序的、可重复的数据。  –&gt;“动态”数组,替换原的数组<ul>
<li>|—-ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</li>
<li>|—-LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</li>
<li>|—-Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</li>
</ul>
</li>
</ul>
<h3 id="4-源码分析-难点"><a href="#4-源码分析-难点" class="headerlink" title="4.源码分析(难点)"></a>4.源码分析(难点)</h3><h4 id="4-1-ArrayList的源码分析："><a href="#4-1-ArrayList的源码分析：" class="headerlink" title="4.1 ArrayList的源码分析："></a>4.1 ArrayList的源码分析：</h4><h5 id="2-1-jdk-7情况下"><a href="#2-1-jdk-7情况下" class="headerlink" title="2.1 jdk 7情况下"></a>2.1 jdk 7情况下</h5><ul>
<li><pre><code> ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData
</code></pre>
</li>
<li><pre><code> list.add(123);//elementData[0] = new Integer(123);
</code></pre>
</li>
<li><pre><code> ...
</code></pre>
</li>
<li><pre><code> list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。
</code></pre>
</li>
<li><pre><code> 默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。
</code></pre>
</li>
<li></li>
<li><p>结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)<br>*</p>
<h5 id="2-2-jdk-8中ArrayList的变化："><a href="#2-2-jdk-8中ArrayList的变化：" class="headerlink" title="2.2 jdk 8中ArrayList的变化："></a>2.2 jdk 8中ArrayList的变化：</h5></li>
<li><pre><code> ArrayList list = new ArrayList();//底层Object[] elementData初始化为&#123;&#125;.并没创建长度为10的数组
</code></pre>
</li>
<li></li>
<li><pre><code> list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]
</code></pre>
</li>
<li><pre><code> ...
</code></pre>
</li>
<li><p>后续的添加和扩容操作与jdk 7 无异。</p>
<h5 id="2-3-小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象"><a href="#2-3-小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象" class="headerlink" title="2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象"></a>2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象</h5></li>
<li><pre><code>       的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。
</code></pre>
</li>
<li></li>
</ul>
<h4 id="4-2-LinkedList的源码分析："><a href="#4-2-LinkedList的源码分析：" class="headerlink" title="4.2 LinkedList的源码分析："></a>4.2 LinkedList的源码分析：</h4><ul>
<li><p>LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</p>
</li>
<li><p>list.add(123);//将123封装到Node中，创建了Node对象。<br>*</p>
</li>
<li><p>其中，Node定义为：体现了LinkedList的双向链表的说法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">     E item;</span><br><span class="line">     Node&lt;E&gt; next;</span><br><span class="line">     Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">     Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">     <span class="keyword">this</span>.item = element;</span><br><span class="line">     <span class="keyword">this</span>.next = next;</span><br><span class="line">     <span class="keyword">this</span>.prev = prev;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-Vector的源码分析："><a href="#4-3-Vector的源码分析：" class="headerlink" title="4.3 Vector的源码分析："></a>4.3 Vector的源码分析：</h4><p>jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。<br>在扩容方面，默认扩容为原来的数组长度的2倍。</p>
</li>
</ul>
<h3 id="5-存储的元素的要求："><a href="#5-存储的元素的要求：" class="headerlink" title="5.存储的元素的要求："></a>5.存储的元素的要求：</h3><p>添加的对象，所在的类要重写equals()方法<br>[面试题]</p>
<ul>
<li> 面试题：ArrayList、LinkedList、Vector者的异同？</li>
<li> 同：三个类都是实现了List接口，存储数据的特点相同：存储序的、可重复的数据</li>
<li> 不同：见上（第3部分+第4部分）</li>
</ul>
<h2 id="4-Collection子接口：Set接口"><a href="#4-Collection子接口：Set接口" class="headerlink" title="4.Collection子接口：Set接口"></a>4.Collection子接口：Set接口</h2><h3 id="1-存储的数据特点：无序的、不可重复的元素"><a href="#1-存储的数据特点：无序的、不可重复的元素" class="headerlink" title="1.存储的数据特点：无序的、不可重复的元素"></a>1.存储的数据特点：无序的、不可重复的元素</h3><p>具体的：<br>以HashSet为例说明：</p>
<ol>
<li>无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。</li>
<li>不可重复性：保证添加的元素照equals()判断时，不能返回true.即：相同的元素只能添加一个。</li>
</ol>
<h3 id="2-元素添加过程：-以HashSet为例"><a href="#2-元素添加过程：-以HashSet为例" class="headerlink" title="2.元素添加过程：(以HashSet为例)"></a>2.元素添加过程：(以HashSet为例)</h3><p>我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，<br>此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置，判断<br>数组此位置上是否已经元素：<br> 如果此位置上没其他元素，则元素a添加成功。 —&gt;情况1<br> 如果此位置上其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值：<br>     如果hash值不相同，则元素a添加成功。—&gt;情况2<br>     如果hash值相同，进而需要调用元素a所在类的equals()方法：<br>            equals()返回true,元素a添加失败<br>            equals()返回false,则元素a添加成功。—&gt;情况2</p>
<p>对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。<br>jdk 7 :元素a放到数组中，指向原来的元素。<br>jdk 8 :原来的元素在数组中，指向元素a<br>总结：七上八下</p>
<p>HashSet底层：数组+链表的结构。（前提：jdk7)</p>
<h3 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h3><p>Set接口中没额外定义新的方法，使用的都是Collection中声明过的方法。</p>
<h3 id="4-常用实现类："><a href="#4-常用实现类：" class="headerlink" title="4.常用实现类："></a>4.常用实现类：</h3><p>|—-Collection接口：单列集合，用来存储一个一个的对象</p>
<ul>
<li><pre><code>   |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”
     - |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值
     - |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历
     - 在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。                   对于频繁的遍历操作，LinkedHashSet效率高于HashSet.
     - |----TreeSet：可以照添加对象的指定属性，进行排序。
</code></pre>
</li>
</ul>
<h3 id="5-存储对象所在类的要求："><a href="#5-存储对象所在类的要求：" class="headerlink" title="5.存储对象所在类的要求："></a>5.存储对象所在类的要求：</h3><h4 id="HashSet-LinkedHashSet"><a href="#HashSet-LinkedHashSet" class="headerlink" title="HashSet/LinkedHashSet:"></a>HashSet/LinkedHashSet:</h4><p>要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()<br>要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</p>
<ul>
<li>   重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</li>
<li></li>
</ul>
<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet:"></a>TreeSet:</h4><h5 id="1-自然排序中，比较两个对象是否相同的标准为：compareTo-返回0-不再是equals"><a href="#1-自然排序中，比较两个对象是否相同的标准为：compareTo-返回0-不再是equals" class="headerlink" title="1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals()."></a>1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</h5><h5 id="2-定制排序中，比较两个对象是否相同的标准为：compare-返回0-不再是equals"><a href="#2-定制排序中，比较两个对象是否相同的标准为：compare-返回0-不再是equals" class="headerlink" title="2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals()."></a>2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</h5><h3 id="6-TreeSet的使用"><a href="#6-TreeSet的使用" class="headerlink" title="6.TreeSet的使用"></a>6.TreeSet的使用</h3><h4 id="6-1-使用说明"><a href="#6-1-使用说明" class="headerlink" title="6.1 使用说明:"></a>6.1 使用说明:</h4><p>1.向TreeSet中添加的数据，要求是相同类的对象。<br>2.两种排序方式：自然排序（实现Comparable接口 和 定制排序（Comparator）</p>
<h4 id="6-2-常用的排序方式"><a href="#6-2-常用的排序方式" class="headerlink" title="6.2 常用的排序方式:"></a>6.2 常用的排序方式:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自然排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add(&quot;AA&quot;);</span></span><br><span class="line"><span class="comment">//        set.add(new User(&quot;Tom&quot;,12));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//举例一：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        set.add(34);</span></span><br><span class="line"><span class="comment">//        set.add(-34);</span></span><br><span class="line"><span class="comment">//        set.add(43);</span></span><br><span class="line"><span class="comment">//        set.add(11);</span></span><br><span class="line"><span class="comment">//        set.add(8);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="comment">//照年龄从小到大排列</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mary&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line">​    Iterator iterator = set.iterator();</span><br><span class="line">​    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">​        System.out.println(iterator.next());</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-Map接口"><a href="#5-Map接口" class="headerlink" title="5.Map接口"></a>5.Map接口</h2><h3 id="双列集合框架：Map"><a href="#双列集合框架：Map" class="headerlink" title="双列集合框架：Map"></a>双列集合框架：Map</h3><h3 id="1-常用实现类结构"><a href="#1-常用实现类结构" class="headerlink" title="1.常用实现类结构"></a>1.常用实现类结构</h3><p>|—-Map:双列数据，存储key-value对的数据   —类似于高中的函数：y = f(x)</p>
<ul>
<li><p>|—-HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value</p>
</li>
<li><p>|—-LinkedHashMap:保证在遍历map元素时，可以照添加的顺序实现遍历。</p>
<ul>
<li><p>原因：在原的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。</p>
</li>
<li><p>对于频繁的遍历操作，此类执行效率高于HashMap。</p>
</li>
</ul>
</li>
<li><p>|—-TreeMap:保证照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序</p>
<ul>
<li>底层使用红黑树</li>
</ul>
</li>
<li><p>|—-Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value</p>
<ul>
<li>|—-Properties:常用来处理配置文件。key和value都是String类型<br>*<br>*</li>
</ul>
</li>
<li><p>HashMap的底层：数组+链表  （jdk7及之前)</p>
</li>
<li><pre><code>               数组+链表+红黑树 （jdk 8)
</code></pre>
</li>
</ul>
<p>[面试题]</p>
<ul>
<li><ol>
<li>HashMap的底层实现原理？</li>
</ol>
</li>
<li><ol start="2">
<li>HashMap 和 Hashtable的异同？</li>
</ol>
</li>
<li><ol start="3">
<li>CurrentHashMap 与 Hashtable的异同？（暂时不讲)</li>
</ol>
</li>
</ul>
<h3 id="2-存储结构的理解："><a href="#2-存储结构的理解：" class="headerlink" title="2.存储结构的理解："></a>2.存储结构的理解：</h3><blockquote>
<p>Map中的key:无序的、不可重复的，使用Set存储所的key  —&gt; key所在的类要重写equals()和hashCode() （以HashMap为例)<br>Map中的value:无序的、可重复的，使用Collection存储所的value —&gt;value所在的类要重写equals()<br>一个键值对：key-value构成了一个Entry对象。<br>Map中的entry:无序的、不可重复的，使用Set存储所的entry</p>
</blockquote>
<p>图示：<img src="https://image.3001.net/images/20220105/16413979474192.png" alt="image-20220105235231739"></p>
<h3 id="3-常用方法-1"><a href="#3-常用方法-1" class="headerlink" title="3.常用方法"></a>3.常用方法</h3><ul>
<li>添加：put(Object key,Object value)</li>
<li>删除：remove(Object key)</li>
<li>修改：put(Object key,Object value)</li>
<li>查询：get(Object key)</li>
<li>长度：size()</li>
<li>遍历：keySet() / values() / entrySet()</li>
</ul>
<h3 id="4-内存结构说明：（难点）"><a href="#4-内存结构说明：（难点）" class="headerlink" title="4.内存结构说明：（难点）"></a>4.内存结构说明：（难点）</h3><h4 id="4-1-HashMap在jdk7中实现原理："><a href="#4-1-HashMap在jdk7中实现原理：" class="headerlink" title="4.1 HashMap在jdk7中实现原理："></a>4.1 HashMap在jdk7中实现原理：</h4><p>HashMap map = new HashMap():</p>
<ul>
<li><pre><code> 在实例化以后，底层创建了长度是16的一维数组Entry[] table。
</code></pre>
</li>
<li><pre><code> ...可能已经执行过多次put...
</code></pre>
</li>
<li><pre><code> map.put(key1,value1):
</code></pre>
</li>
<li><pre><code> 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。
</code></pre>
</li>
<li><pre><code> 如果此位置上的数据为空，此时的key1-value1添加成功。 ----情况1
</code></pre>
</li>
<li><pre><code> 如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值：
</code></pre>
</li>
<li><pre><code>         如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。----情况2
</code></pre>
</li>
<li><p>如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：</p>
<ul>
<li><p>如果equals()返回false:此时key1-value1添加成功。—-情况3</p>
</li>
<li><p>如果equals()返回true:使用value1替换value2。<br>*</p>
</li>
</ul>
</li>
<li><pre><code> 补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。
</code></pre>
</li>
<li></li>
<li><pre><code>在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原的数据复制过来。
</code></pre>
</li>
</ul>
<h4 id="4-2-HashMap在jdk8中相较于jdk7在底层实现方面的不同："><a href="#4-2-HashMap在jdk8中相较于jdk7在底层实现方面的不同：" class="headerlink" title="4.2 HashMap在jdk8中相较于jdk7在底层实现方面的不同："></a>4.2 HashMap在jdk8中相较于jdk7在底层实现方面的不同：</h4><h5 id="1-new-HashMap-底层没创建一个长度为16的数组"><a href="#1-new-HashMap-底层没创建一个长度为16的数组" class="headerlink" title="1.new HashMap():底层没创建一个长度为16的数组"></a>1.new HashMap():底层没创建一个长度为16的数组</h5><h5 id="2-jdk-8底层的数组是：Node-而非Entry"><a href="#2-jdk-8底层的数组是：Node-而非Entry" class="headerlink" title="2.jdk 8底层的数组是：Node[],而非Entry[]"></a>2.jdk 8底层的数组是：Node[],而非Entry[]</h5><h5 id="3-首次调用put-方法时，底层创建长度为16的数组"><a href="#3-首次调用put-方法时，底层创建长度为16的数组" class="headerlink" title="3.首次调用put()方法时，底层创建长度为16的数组"></a>3.首次调用put()方法时，底层创建长度为16的数组</h5><h5 id="4-jdk7底层结构只：数组-链表。jdk8中底层结构：数组-链表-红黑树。"><a href="#4-jdk7底层结构只：数组-链表。jdk8中底层结构：数组-链表-红黑树。" class="headerlink" title="4.jdk7底层结构只：数组+链表。jdk8中底层结构：数组+链表+红黑树。"></a>4.jdk7底层结构只：数组+链表。jdk8中底层结构：数组+链表+红黑树。</h5><ol>
<li>形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</li>
<li>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</li>
</ol>
<h4 id="4-3-HashMap底层典型属性的属性的说明："><a href="#4-3-HashMap底层典型属性的属性的说明：" class="headerlink" title="4.3 HashMap底层典型属性的属性的说明："></a>4.3 HashMap底层典型属性的属性的说明：</h4><p>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16<br>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75<br>threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12<br>TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8<br>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</p>
<h4 id="4-4-LinkedHashMap的底层实现原理-了解"><a href="#4-4-LinkedHashMap的底层实现原理-了解" class="headerlink" title="4.4 LinkedHashMap的底层实现原理(了解)"></a>4.4 LinkedHashMap的底层实现原理(了解)</h4><p>LinkedHashMap底层使用的结构与HashMap相同，因为LinkedHashMap继承于HashMap.<br>区别就在于：LinkedHashMap内部提供了Entry，替换HashMap中的Node.</p>
<p><img src="https://image.3001.net/images/20220105/16413981664624.png" alt="image-20220105235613026"></p>
<h3 id="5-TreeMap的使用"><a href="#5-TreeMap的使用" class="headerlink" title="5.TreeMap的使用"></a>5.TreeMap的使用</h3><p>//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象<br>//因为要照key进行排序：自然排序 、定制排序</p>
<h3 id="6-使用Properties读取配置文件"><a href="#6-使用Properties读取配置文件" class="headerlink" title="6.使用Properties读取配置文件"></a>6.使用Properties读取配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Properties:常用来处理配置文件。key和value都是String类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        pros.load(fis);<span class="comment">//加载流对应的文件</span></span><br><span class="line">    </span><br><span class="line">        String name = pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-Collections工具类的使用"><a href="#6-Collections工具类的使用" class="headerlink" title="6.Collections工具类的使用"></a>6.Collections工具类的使用</h2><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><h3 id="1-作用：操作Collection和Map的工具类"><a href="#1-作用：操作Collection和Map的工具类" class="headerlink" title="1.作用：操作Collection和Map的工具类"></a>1.作用：操作Collection和Map的工具类</h3><h3 id="2-常用方法："><a href="#2-常用方法：" class="headerlink" title="2.常用方法："></a>2.常用方法：</h3><ul>
<li>reverse(List)：反转 List 中元素的顺序</li>
<li>shuffle(List)：对 List 集合元素进行随机排序</li>
<li>sort(List)：根据元素的自然顺序对指定 List 集合元素升序排序</li>
<li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li>
<li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li>
<li>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</li>
<li>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li>
<li>Object min(Collection)</li>
<li>Object min(Collection，Comparator)<br>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</li>
<li>void copy(List dest,List src)：将src中的内容复制到dest中</li>
<li>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所旧值</li>
</ul>
<p><img src="https://image.3001.net/images/20220105/16413982373697.png" alt="image-20220105235722379"></p>
<ul>
<li>说明：ArrayList和HashMap都是线程不安全的，如果程序要求线程安全，我们可以将ArrayList、HashMap转换为线程的。</li>
<li>使用synchronizedList(List list） 和 synchronizedMap(Map map）</li>
</ul>
<h3 id="3-面试题："><a href="#3-面试题：" class="headerlink" title="3.面试题："></a>3.面试题：</h3><p>面试题：Collection 和 Collections的区别？</p>
<h2 id="7-数据结构简述"><a href="#7-数据结构简述" class="headerlink" title="7.数据结构简述"></a>7.数据结构简述</h2><h3 id="1-数据结构概述"><a href="#1-数据结构概述" class="headerlink" title="1.数据结构概述"></a>1.数据结构概述</h3><ul>
<li>数据结构（Data Structure是一门和计算机硬件与软件都密切相关的学科，它的研究重点是在计算机的程序设计领域中探讨如何在计算机中组织和存储数据并进行高效率的运用，涉及的内容包含：数据的逻辑关系、数据的存储结构、排序算法（Algorithm）、查找（或搜索）等。</li>
</ul>
<h3 id="2-数据结构与算法的理解"><a href="#2-数据结构与算法的理解" class="headerlink" title="2.数据结构与算法的理解"></a>2.数据结构与算法的理解</h3><ul>
<li><p>程序能否快速而高效地完成预定的任务，取决于是否选对了数据结构，而程序是否能清楚而正确地把问题解决，则取决于算法。</p>
</li>
<li><p>所以大家认为：“Algorithms + Data Structures = Programs”（出自：Pascal之父Nicklaus Wirth）</p>
</li>
<li><p>总结：算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体。</p>
</li>
</ul>
<h3 id="3-数据结构的研究对象"><a href="#3-数据结构的研究对象" class="headerlink" title="3.数据结构的研究对象"></a>3.数据结构的研究对象</h3><h4 id="3-1-数据间的逻辑结构"><a href="#3-1-数据间的逻辑结构" class="headerlink" title="3.1 数据间的逻辑结构"></a>3.1 数据间的逻辑结构</h4><p><img src="https://image.3001.net/images/20220105/16413983451798.png" alt="image-20220105235911087"></p>
<p>集合结构            </p>
<p><img src="https://image.3001.net/images/20220105/16413983528047.png" alt="image-20220105235918961"></p>
<p>一对一：线性结构</p>
<p><img src="https://image.3001.net/images/20220105/16413983609405.png" alt="image-20220105235927240"></p>
<p>​      一对多：树形结构      </p>
<p><img src="https://image.3001.net/images/20220105/16413983698380.png" alt="image-20220105235934451"></p>
<p>多对多：图形结构</p>
<h4 id="3-2-数据的存储结构："><a href="#3-2-数据的存储结构：" class="headerlink" title="3.2 数据的存储结构："></a>3.2 数据的存储结构：</h4><p>线性表（顺序表、链表、栈、队列）<br>树<br>图</p>
<p>说明：习惯上把顺序表和链表看做基本数据结构（或真实数据结构）<br>      习惯上把栈、队列、树、图看做抽象数据类型，简称ADT</p>
<ol start="4">
<li>使用详情见思维导图：<br>《附录：尚硅谷_宋红康_数据结构概述-Java版.xmind》</li>
</ol>
]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>6-IO流</title>
    <url>/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/6-IO%E6%B5%81/</url>
    <content><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>[TOC]</p>
<h2 id="IO流-1"><a href="#IO流-1" class="headerlink" title="IO流"></a>IO流</h2><h3 id="1-File类的理解"><a href="#1-File类的理解" class="headerlink" title="1.File类的理解"></a>1.File类的理解</h3><ul>
<li><ol>
<li><h4 id="File类的一个对象，代表一个文件或一个文件目录-俗称：文件夹"><a href="#File类的一个对象，代表一个文件或一个文件目录-俗称：文件夹" class="headerlink" title="File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)"></a>File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)</h4></li>
</ol>
</li>
<li><ol start="2">
<li><h4 id="File类声明在java-io包下"><a href="#File类声明在java-io包下" class="headerlink" title="File类声明在java.io包下"></a>File类声明在java.io包下</h4></li>
</ol>
</li>
<li><ol start="3">
<li><h4 id="File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，"><a href="#File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，" class="headerlink" title="File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，"></a>File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，</h4></li>
</ol>
<span id="more"></span></li>
<li><h4 id="并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。"><a href="#并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。" class="headerlink" title="并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。"></a>并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。</h4></li>
<li><ol start="4">
<li><h4 id="后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”"><a href="#后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”" class="headerlink" title="后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”."></a>后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”.</h4></li>
</ol>
</li>
</ul>
<h3 id="2-File的实例化"><a href="#2-File的实例化" class="headerlink" title="2.File的实例化"></a>2.File的实例化</h3><h4 id="2-1-常用构造器"><a href="#2-1-常用构造器" class="headerlink" title="2.1 常用构造器"></a>2.1 常用构造器</h4><p>File(String filePath)<br>File(String parentPath,String childPath)<br>File(File parentFile,String childPath)</p>
<h4 id="2-2-路径的分类"><a href="#2-2-路径的分类" class="headerlink" title="2.2 路径的分类"></a>2.2 路径的分类</h4><p>相对路径：相较于某个路径下，指明的路径。<br>绝对路径：包含盘符在内的文件或文件目录的路径</p>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><h5 id="IDEA中："><a href="#IDEA中：" class="headerlink" title="IDEA中："></a>IDEA中：</h5><p>如果大家开发使用JUnit中的单元测试方法测试，相对路径即为当前Module下。<br>如果大家使用main()测试，相对路径即为当前的Project下。</p>
<h5 id="Eclipse中："><a href="#Eclipse中：" class="headerlink" title="Eclipse中："></a>Eclipse中：</h5><p>不管使用单元测试方法还是使用main()测试，相对路径都是当前的Project下。</p>
<h4 id="2-3-路径分隔符"><a href="#2-3-路径分隔符" class="headerlink" title="2.3 路径分隔符"></a>2.3 路径分隔符</h4><p>windows和DOS系统默认使用“\”来表示<br>UNIX和URL使用“/”来表示</p>
<h3 id="3-File类的常用方法"><a href="#3-File类的常用方法" class="headerlink" title="3.File类的常用方法"></a>3.File类的常用方法</h3><p><img src="https://image.3001.net/images/20220110/16417472088530.png" alt="image-20220110005326325"></p>
<p><img src="https://image.3001.net/images/20220110/16417472174642.png" alt="image-20220110005335091"></p>
<p><img src="https://image.3001.net/images/20220110/1641747223113.png" alt="image-20220110005340922"></p>
<h2 id="IO流概述"><a href="#IO流概述" class="headerlink" title="IO流概述"></a>IO流概述</h2><h3 id="1-流的分类"><a href="#1-流的分类" class="headerlink" title="1.流的分类"></a>1.流的分类</h3><ul>
<li><h4 id="1-操作数据单位：字节流、字符流"><a href="#1-操作数据单位：字节流、字符流" class="headerlink" title="1.操作数据单位：字节流、字符流"></a>1.操作数据单位：字节流、字符流</h4></li>
<li><h4 id="2-数据的流向：输入流、输出流"><a href="#2-数据的流向：输入流、输出流" class="headerlink" title="2.数据的流向：输入流、输出流"></a>2.数据的流向：输入流、输出流</h4></li>
<li><h4 id="3-流的角色：节点流、处理流"><a href="#3-流的角色：节点流、处理流" class="headerlink" title="3.流的角色：节点流、处理流"></a>3.流的角色：节点流、处理流</h4></li>
</ul>
<p>图示：</p>
<p><img src="https://image.3001.net/images/20220110/16417472624433.png" alt="image-20220110005421021"></p>
<h3 id="2-流的体系结构"><a href="#2-流的体系结构" class="headerlink" title="2.流的体系结构"></a>2.流的体系结构</h3><p><img src="https://image.3001.net/images/20220110/16417472757459.png" alt="image-20220110005432900"></p>
<p>说明：红框对应的是IO流中的4个抽象基类。<br>蓝框的流需要大家重点关注。</p>
<h3 id="3-重点说明的几个流结构"><a href="#3-重点说明的几个流结构" class="headerlink" title="3.重点说明的几个流结构"></a>3.重点说明的几个流结构</h3><p><img src="https://image.3001.net/images/20220110/16417472889056.png" alt="image-20220110005445399"></p>
<h3 id="4-输入、输出的标准化过程"><a href="#4-输入、输出的标准化过程" class="headerlink" title="4.输入、输出的标准化过程"></a>4.输入、输出的标准化过程</h3><h4 id="4-1-输入过程"><a href="#4-1-输入过程" class="headerlink" title="4.1 输入过程"></a>4.1 输入过程</h4><p>① 创建File类的对象，指明读取的数据的来源。（要求此文件一定要存在）<br>② 创建相应的输入流，将File类的对象作为参数，传入流的构造器中<br>③ 具体的读入过程：<br>    创建相应的byte[] 或 char[]。<br>④ 关闭流资源<br>说明：程序中出现的异常需要使用try-catch-finally处理。</p>
<h4 id="4-2-输出过程"><a href="#4-2-输出过程" class="headerlink" title="4.2 输出过程"></a>4.2 输出过程</h4><p>① 创建File类的对象，指明写出的数据的位置。（不要求此文件一定要存在）<br>② 创建相应的输出流，将File类的对象作为参数，传入流的构造器中<br>③ 具体的写出过程：<br>    write(char[]/byte[] buffer,0,len)<br>④ 关闭流资源<br>说明：程序中出现的异常需要使用try-catch-finally处理。</p>
<h2 id="节点流（或文件流）"><a href="#节点流（或文件流）" class="headerlink" title="节点流（或文件流）"></a>节点流（或文件流）</h2><h3 id="1-FileReader-FileWriter的使用："><a href="#1-FileReader-FileWriter的使用：" class="headerlink" title="1.FileReader/FileWriter的使用："></a>1.FileReader/FileWriter的使用：</h3><h4 id="1-1-FileReader的使用"><a href="#1-1-FileReader的使用" class="headerlink" title="1.1 FileReader的使用"></a>1.1 FileReader的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">将day09下的hello.txt文件内容读入程序中，并输出到控制台</span><br><span class="line"></span><br><span class="line">说明点：</span><br><span class="line"></span><br><span class="line">1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span><br><span class="line">2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span><br><span class="line">3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">    public void testFileReader1()  &#123;</span><br><span class="line">        FileReader fr = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1.File类的实例化</span><br><span class="line">            File file = new File(&quot;hello.txt&quot;);</span><br><span class="line"></span><br><span class="line">            //2.FileReader流的实例化</span><br><span class="line">            fr = new FileReader(file);</span><br><span class="line">    </span><br><span class="line">            //3.读入的操作</span><br><span class="line">            //read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span><br><span class="line">            char[] cbuf = new char[5];</span><br><span class="line">            int len;</span><br><span class="line">            while((len = fr.read(cbuf)) != -1)&#123;</span><br><span class="line">                //方式一：</span><br><span class="line">                //错误的写法</span><br><span class="line"></span><br><span class="line">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span><br><span class="line">//                    System.out.print(cbuf[i]);</span><br><span class="line">//                &#125;</span><br><span class="line">                //正确的写法</span><br><span class="line">//                for(int i = 0;i &lt; len;i++)&#123;</span><br><span class="line">//                    System.out.print(cbuf[i]);</span><br><span class="line">//                &#125;</span><br><span class="line">                //方式二：</span><br><span class="line">                //错误的写法,对应着方式一的错误的写法</span><br><span class="line">//                String str = new String(cbuf);</span><br><span class="line">//                System.out.print(str);</span><br><span class="line">                //正确的写法</span><br><span class="line">                String str = new String(cbuf,0,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if(fr != null)&#123;</span><br><span class="line">                //4.资源的关闭</span><br><span class="line">                try &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-FileWriter的使用"><a href="#1-2-FileWriter的使用" class="headerlink" title="1.2 FileWriter的使用"></a>1.2 FileWriter的使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从内存中写出数据到硬盘的文件里。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">   2.</span></span><br><span class="line"><span class="comment">     File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">     File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">           如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原文件的覆盖</span></span><br><span class="line"><span class="comment">           如果流使用的构造器是：FileWriter(file,true):不会对原文件覆盖，而是在原文件基础上追加内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.提供File类的对象，指明写出到的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">        fw = <span class="keyword">new</span> FileWriter(file,<span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//3.写出的操作</span></span><br><span class="line">        fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">        fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//4.流资源的关闭</span></span><br><span class="line">        <span class="keyword">if</span>(fw != <span class="keyword">null</span>)&#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-文本文件的复制："><a href="#1-3-文本文件的复制：" class="headerlink" title="1.3 文本文件的复制："></a>1.3 文本文件的复制：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReaderFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File类的对象，指明读入和写出的文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图片等字节数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            File srcFile = new File(&quot;爱情与友情.jpg&quot;);</span></span><br><span class="line"><span class="comment">//            File destFile = new File(&quot;爱情与友情1.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">             fr = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(destFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fw != null)</span></span><br><span class="line"><span class="comment">//                    fw.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;finally&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    if(fr != null)</span></span><br><span class="line"><span class="comment">//                        fr.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-FileInputStream-FileOutputStream的使用："><a href="#2-FileInputStream-FileOutputStream的使用：" class="headerlink" title="2.FileInputStream / FileOutputStream的使用："></a>2.FileInputStream / FileOutputStream的使用：</h3><ul>
<li><ol>
<li>对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</li>
</ol>
</li>
<li><ol start="2">
<li><p>对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,…)，使用字节流处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="number">2.</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">     实现对图片的复制操作</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputOutputStream</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">      FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">       FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.造文件</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.造流</span></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.复制的过程</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="【注意】"><a href="#【注意】" class="headerlink" title="【注意】"></a>【注意】</h3><p>相对路径在IDEA和Eclipse中使用的区别？</p>
<h4 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA:"></a>IDEA:</h4><p>如果使用单元测试方法，相对路径基于当前的Module的。<br>如果使用main()测试，相对路径基于当前Project的。</p>
<h4 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse:"></a>Eclipse:</h4><p>单元测试方法还是main(),相对路径都是基于当前Project的。</p>
<h2 id="缓冲流的使用"><a href="#缓冲流的使用" class="headerlink" title="缓冲流的使用"></a>缓冲流的使用</h2><h3 id="1-缓冲流涉及到的类："><a href="#1-缓冲流涉及到的类：" class="headerlink" title="1.缓冲流涉及到的类："></a>1.缓冲流涉及到的类：</h3><ul>
<li>BufferedInputStream</li>
<li>BufferedOutputStream</li>
<li>BufferedReader</li>
<li>BufferedWriter</li>
</ul>
<h3 id="2-作用："><a href="#2-作用：" class="headerlink" title="2.作用："></a>2.作用：</h3><p>作用：提供流的读取、写入的速度<br>提高读写速度的原因：内部提供了一个缓冲区。默认情况下是8kb</p>
<p><img src="https://image.3001.net/images/20220110/16417475005139.png" alt="image-20220110005817804"></p>
<h3 id="3-典型代码"><a href="#3-典型代码" class="headerlink" title="3.典型代码"></a>3.典型代码</h3><h4 id="3-1-使用BufferedInputStream和BufferedOutputStream-处理非文本文件"><a href="#3-1-使用BufferedInputStream和BufferedOutputStream-处理非文本文件" class="headerlink" title="3.1 使用BufferedInputStream和BufferedOutputStream:处理非文本文件"></a>3.1 使用BufferedInputStream和BufferedOutputStream:处理非文本文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-使用BufferedReader和BufferedWriter：处理文本文件"><a href="#3-2-使用BufferedReader和BufferedWriter：处理文本文件" class="headerlink" title="3.2 使用BufferedReader和BufferedWriter：处理文本文件"></a>3.2 使用BufferedReader和BufferedWriter：处理文本文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBufferedReaderBufferedWriter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char[]数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//    //            bw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：使用String</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span>((data = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="转换流的使用"><a href="#转换流的使用" class="headerlink" title="转换流的使用"></a>转换流的使用</h2><h3 id="1-转换流涉及到的类：属于字符流"><a href="#1-转换流涉及到的类：属于字符流" class="headerlink" title="1.转换流涉及到的类：属于字符流"></a>1.转换流涉及到的类：属于字符流</h3><ul>
<li>InputStreamReader：将一个字节的输入流转换为字符的输入流</li>
<li>解码：字节、字节数组  —&gt;字符数组、字符串</li>
<li>OutputStreamWriter：将一个字符的输出流转换为字节的输出流</li>
<li>编码：字符数组、字符串 —&gt; 字节、字节数组</li>
<li>说明：编码决定了解码的方式</li>
</ul>
<h3 id="2-作用：提供字节流与字符流之间的转换"><a href="#2-作用：提供字节流与字符流之间的转换" class="headerlink" title="2.作用：提供字节流与字符流之间的转换"></a>2.作用：提供字节流与字符流之间的转换</h3><h3 id="3-图示："><a href="#3-图示：" class="headerlink" title="3.图示："></a>3.图示：</h3><p><img src="https://image.3001.net/images/20220110/16417475594224.png" alt="image-20220110005917102"></p>
<h3 id="4-典型实现："><a href="#4-典型实现：" class="headerlink" title="4.典型实现："></a>4.典型实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集</span></span><br><span class="line">        <span class="comment">//参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//使用系统默认的字符集</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        isr.close();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此时处理异常的话，仍然应该使用try-catch-finally</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">综合使用InputStreamReader和OutputStreamWriter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.造文件、造流</span></span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">    </span><br><span class="line">    InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.读写过程</span></span><br><span class="line">    <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.关闭资源</span></span><br><span class="line">    isr.close();</span><br><span class="line">    osw.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-说明："><a href="#5-说明：" class="headerlink" title="5.说明："></a>5.说明：</h3><p>//文件编码的方式（比如：GBK），决定了解析时使用的字符集（也只能是GBK）。</p>
<h3 id="6-编码集"><a href="#6-编码集" class="headerlink" title="6.编码集"></a>6.编码集</h3><h4 id="1-常见的编码表"><a href="#1-常见的编码表" class="headerlink" title="1.常见的编码表"></a>1.常见的编码表</h4><ul>
<li><p>ASCII：美国标准信息交换码。 </p>
<ul>
<li>用一个字节的7位可以表示。</li>
</ul>
</li>
<li><p>ISO8859-1：拉丁码表。欧洲码表</p>
<ul>
<li> 用一个字节的8位表示。</li>
</ul>
</li>
<li><p>GB2312：中国的中文编码表。最多两个字节编码所有字符</p>
</li>
<li><p>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</p>
</li>
<li><p>Unicode：国际标准码，融合了目前人类使用的所字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</p>
</li>
<li><p>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</p>
</li>
</ul>
<h4 id="2-对后面学习的启示"><a href="#2-对后面学习的启示" class="headerlink" title="2.对后面学习的启示"></a>2.对后面学习的启示</h4><ul>
<li>客户端/浏览器端    &lt;—-&gt;  后台(java,GO,Python,Node.js,php)   &lt;—-&gt; 数据库</li>
</ul>
<ul>
<li>要求前前后后使用的字符集都要统一：UTF-8.</li>
</ul>
<h2 id="其它的流的使用"><a href="#其它的流的使用" class="headerlink" title="其它的流的使用"></a>其它的流的使用</h2><h3 id="1-标准的输入输出流："><a href="#1-标准的输入输出流：" class="headerlink" title="1.标准的输入输出流："></a>1.标准的输入输出流：</h3><ul>
<li>System.in:标准的输入流，默认从键盘输入</li>
<li>System.out:标准的输出流，默认从控制台输出</li>
<li>修改默认的输入和输出行为：</li>
<li>System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。</li>
</ul>
<h3 id="2-打印流："><a href="#2-打印流：" class="headerlink" title="2.打印流："></a>2.打印流：</h3><ul>
<li><p>PrintStream 和PrintWriter</p>
</li>
<li><p>说明：</p>
<p>1.提供了一系列重载的print()和println()方法，用于多种数据类型的输出</p>
<p>2.System.out返回的是PrintStream的实例</p>
</li>
</ul>
<h3 id="3-数据流："><a href="#3-数据流：" class="headerlink" title="3.数据流："></a>3.数据流：</h3><p>DataInputStream 和 DataOutputStream<br>作用：<br>用于读取或写出基本数据类型的变量或字符串</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习：将内存中的字符串、基本数据类型的变量写出到文件中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：处理异常的话，仍然应该使用try-catch-finally.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    dos.writeUTF(<span class="string">&quot;刘建辰&quot;</span>);</span><br><span class="line">    dos.flush();<span class="comment">//刷新操作，将内存中的数据写入文件</span></span><br><span class="line">    dos.writeInt(<span class="number">23</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    dos.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    String name = dis.readUTF();</span><br><span class="line">    <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">    <span class="keyword">boolean</span> isMale = dis.readBoolean();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">    System.out.println(<span class="string">&quot;isMale = &quot;</span> + isMale);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    dis.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="对象流的使用"><a href="#对象流的使用" class="headerlink" title="对象流的使用"></a>对象流的使用</h2><h3 id="1-对象流："><a href="#1-对象流：" class="headerlink" title="1.对象流："></a>1.对象流：</h3><p>ObjectInputStream 和 ObjectOutputStream</p>
<h3 id="2-作用：-1"><a href="#2-作用：-1" class="headerlink" title="2.作用："></a>2.作用：</h3><p>ObjectOutputStream:内存中的对象—&gt;存储中的文件、通过网络传输出去：序列化过程<br>ObjectInputStream:存储中的文件、通过网络接收过来 —&gt;内存中的对象：反序列化过程</p>
<h3 id="3-对象的序列化机制："><a href="#3-对象的序列化机制：" class="headerlink" title="3.对象的序列化机制："></a>3.对象的序列化机制：</h3><p>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘<br>上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的<br>Java对象</p>
<h3 id="4-序列化代码实现："><a href="#4-序列化代码实现：" class="headerlink" title="4.序列化代码实现："></a>4.序列化代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectOutputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> String(<span class="string">&quot;我爱北京天安门&quot;</span>));</span><br><span class="line">        oos.flush();<span class="comment">//刷新操作</span></span><br><span class="line">    </span><br><span class="line">         oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;王铭&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        oos.flush();</span><br><span class="line">    </span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;张学良&quot;</span>,<span class="number">23</span>,<span class="number">1001</span>,<span class="keyword">new</span> Account(<span class="number">5000</span>)));</span><br><span class="line">        oos.flush();</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(oos != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//3.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                oos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-反序列化代码实现："><a href="#5-反序列化代码实现：" class="headerlink" title="5.反序列化代码实现："></a>5.反序列化代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectInputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        String str = (String) obj;</span><br><span class="line">    </span><br><span class="line">        Person p = (Person) ois.readObject();</span><br><span class="line">        Person p1 = (Person) ois.readObject();</span><br><span class="line">    </span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ois != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ois.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-实现序列化的对象所属的类需要满足："><a href="#6-实现序列化的对象所属的类需要满足：" class="headerlink" title="6.实现序列化的对象所属的类需要满足："></a>6.实现序列化的对象所属的类需要满足：</h3><h4 id="1-需要实现接口：Serializable"><a href="#1-需要实现接口：Serializable" class="headerlink" title="1.需要实现接口：Serializable"></a>1.需要实现接口：Serializable</h4><h4 id="2-当前类提供一个全局常量：serialVersionUID"><a href="#2-当前类提供一个全局常量：serialVersionUID" class="headerlink" title="2.当前类提供一个全局常量：serialVersionUID"></a>2.当前类提供一个全局常量：serialVersionUID</h4><h4 id="3-除了当前Person类需要实现Serializable接口之外，还必须保证其内部所属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）"><a href="#3-除了当前Person类需要实现Serializable接口之外，还必须保证其内部所属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）" class="headerlink" title="3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）"></a>3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）</h4><h4 id="4-补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量"><a href="#4-补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量" class="headerlink" title="4.补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量"></a>4.补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</h4><h2 id="RandomAccessFile的使用"><a href="#RandomAccessFile的使用" class="headerlink" title="RandomAccessFile的使用"></a>RandomAccessFile的使用</h2><h3 id="1-随机存取文件流：RandomAccessFile"><a href="#1-随机存取文件流：RandomAccessFile" class="headerlink" title="1.随机存取文件流：RandomAccessFile"></a>1.随机存取文件流：RandomAccessFile</h3><h3 id="2-使用说明："><a href="#2-使用说明：" class="headerlink" title="2.使用说明："></a>2.使用说明：</h3><ul>
<li><h4 id="1-RandomAccessFile直接继承于java-lang-Object类，实现了DataInput和DataOutput接口"><a href="#1-RandomAccessFile直接继承于java-lang-Object类，实现了DataInput和DataOutput接口" class="headerlink" title="1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口"></a>1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口</h4></li>
<li><h4 id="2-RandomAccessFile既可以作为一个输入流，又可以作为一个输出流"><a href="#2-RandomAccessFile既可以作为一个输入流，又可以作为一个输出流" class="headerlink" title="2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流"></a>2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流</h4><p>*</p>
</li>
<li><h4 id="3-如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。"><a href="#3-如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。" class="headerlink" title="3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。"></a>3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。</h4></li>
<li><h4 id="如果写出到的文件存在，则会对原文件内容进行覆盖。（默认情况下，从头覆盖）"><a href="#如果写出到的文件存在，则会对原文件内容进行覆盖。（默认情况下，从头覆盖）" class="headerlink" title="如果写出到的文件存在，则会对原文件内容进行覆盖。（默认情况下，从头覆盖）"></a>如果写出到的文件存在，则会对原文件内容进行覆盖。（默认情况下，从头覆盖）</h4></li>
<li><h4 id="4-可以通过相关的操作，实现RandomAccessFile“插入”数据的效果。seek-int-pos"><a href="#4-可以通过相关的操作，实现RandomAccessFile“插入”数据的效果。seek-int-pos" class="headerlink" title="4.可以通过相关的操作，实现RandomAccessFile“插入”数据的效果。seek(int pos)"></a>4.可以通过相关的操作，实现RandomAccessFile“插入”数据的效果。seek(int pos)</h4></li>
</ul>
<h3 id="3-典型代码1："><a href="#3-典型代码1：" class="headerlink" title="3.典型代码1："></a>3.典型代码1：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">    RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情1.jpg&quot;</span>),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        <span class="keyword">if</span>(raf1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                raf1.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(raf2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                raf2.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="典型代码2："><a href="#典型代码2：" class="headerlink" title="典型代码2："></a>典型代码2：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用RandomAccessFile实现数据的插入效果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">    <span class="comment">//保存指针3后面的所数据到StringBuilder中</span></span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>) <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>).length());</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        builder.append(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len)) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调回指针，写入“xyz”</span></span><br><span class="line">    raf1.seek(<span class="number">3</span>);</span><br><span class="line">    raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将StringBuilder中的数据写入到文件中</span></span><br><span class="line">    raf1.write(builder.toString().getBytes());</span><br><span class="line">    </span><br><span class="line">    raf1.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//思考：将StringBuilder替换为ByteArrayOutputStream</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Path、Paths、Files的使用"><a href="#Path、Paths、Files的使用" class="headerlink" title="Path、Paths、Files的使用"></a>Path、Paths、Files的使用</h2><h3 id="1-NIO的使用说明："><a href="#1-NIO的使用说明：" class="headerlink" title="1.NIO的使用说明："></a>1.NIO的使用说明：</h3><blockquote>
<p>Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java<br>IO AP。<br>NIO与原来的IO同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于<br>通道的IO操作。<br>NIO将以更加高效的方式进行文件的读写操作。<br>随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。</p>
</blockquote>
<h3 id="2-Path的使用-—jdk7提供"><a href="#2-Path的使用-—jdk7提供" class="headerlink" title="2.Path的使用 —jdk7提供"></a>2.Path的使用 —jdk7提供</h3><h4 id="2-1Path的说明："><a href="#2-1Path的说明：" class="headerlink" title="2.1Path的说明："></a>2.1Path的说明：</h4><p>Path替换原有的File类。</p>
<h4 id="2-2如何实例化："><a href="#2-2如何实例化：" class="headerlink" title="2.2如何实例化："></a>2.2如何实例化：</h4><p><img src="https://image.3001.net/images/20220110/16417482647120.png" alt="image-20220110011100825"></p>
<h4 id="2-3常用方法："><a href="#2-3常用方法：" class="headerlink" title="2.3常用方法："></a>2.3常用方法：</h4><p><img src="https://image.3001.net/images/20220110/16417482715624.png" alt="image-20220110011109727"></p>
<h3 id="3-Files工具类-—jdk7提供"><a href="#3-Files工具类-—jdk7提供" class="headerlink" title="3.Files工具类 —jdk7提供"></a>3.Files工具类 —jdk7提供</h3><h4 id="3-1作用："><a href="#3-1作用：" class="headerlink" title="3.1作用："></a>3.1作用：</h4><p>操作文件或文件目录的工具类</p>
<h4 id="3-2常用方法："><a href="#3-2常用方法：" class="headerlink" title="3.2常用方法："></a>3.2常用方法：</h4><p><img src="https://image.3001.net/images/20220110/16417482839885.png" alt="image-20220110011119187"></p>
<p><img src="https://image.3001.net/images/20220110/16417482889368.png" alt="image-20220110011126353"></p>
]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
  <entry>
    <title>8-java反射机制</title>
    <url>/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/8-java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h1><p>[TOC]</p>
<h2 id="反射的概述"><a href="#反射的概述" class="headerlink" title="反射的概述"></a>反射的概述</h2><h3 id="1-本章的主要内容"><a href="#1-本章的主要内容" class="headerlink" title="1.本章的主要内容"></a>1.本章的主要内容</h3><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://image.3001.net/images/20220110/16417490937305.png" alt="image-20220110012451398"></h4><span id="more"></span>

<h3 id="2-关于反射的理解"><a href="#2-关于反射的理解" class="headerlink" title="2.关于反射的理解"></a>2.关于反射的理解</h3><ul>
<li><p>Reflection（反射)是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何<br>类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
</li>
<li><p>框架 = 反射 + 注解 + 设计模式。</p>
</li>
</ul>
<h3 id="3-体会反射机制的“动态性”"><a href="#3-体会反射机制的“动态性”" class="headerlink" title="3.体会反射机制的“动态性”"></a>3.体会反射机制的“动态性”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//体会反射的动态性</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);<span class="comment">//0,1,2</span></span><br><span class="line">        String classPath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                classPath = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                classPath = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                classPath = <span class="string">&quot;com.atguigu.java.Person&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object obj = getInstance(classPath);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个指定类的对象。</span></span><br><span class="line"><span class="comment">classPath:指定类的全类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Class clazz =  Class.forName(classPath);</span><br><span class="line">   <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-反射机制能提供的功能"><a href="#4-反射机制能提供的功能" class="headerlink" title="4.反射机制能提供的功能"></a>4.反射机制能提供的功能</h3><p><img src="https://image.3001.net/images/20220110/16417491806948.png" alt="image-20220110012557457"></p>
<h3 id="5-相关API"><a href="#5-相关API" class="headerlink" title="5.相关API"></a>5.相关API</h3><ul>
<li>java.lang.Class:反射的源头</li>
<li>java.lang.reflect.Method</li>
<li>java.lang.reflect.Field</li>
<li>java.lang.reflect.Constructor</li>
<li>….</li>
</ul>
<h2 id="Class类的理解与获取Class的实例"><a href="#Class类的理解与获取Class的实例" class="headerlink" title="Class类的理解与获取Class的实例"></a>Class类的理解与获取Class的实例</h2><h3 id="1-Class类的理解"><a href="#1-Class类的理解" class="headerlink" title="1.Class类的理解"></a>1.Class类的理解</h3><h4 id="1-类的加载过程："><a href="#1-类的加载过程：" class="headerlink" title="1.类的加载过程："></a>1.类的加载过程：</h4><p>程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。<br>接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件<br>加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此<br>运行时类，就作为Class的一个实例。</p>
<h4 id="2-换句话说，Class的实例就对应着一个运行时类。"><a href="#2-换句话说，Class的实例就对应着一个运行时类。" class="headerlink" title="2.换句话说，Class的实例就对应着一个运行时类。"></a>2.换句话说，Class的实例就对应着一个运行时类。</h4><h4 id="3-加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。"><a href="#3-加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。" class="headerlink" title="3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。"></a>3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。</h4><h3 id="2-获取Class实例的几种方式：（前三种方式需要掌握）"><a href="#2-获取Class实例的几种方式：（前三种方式需要掌握）" class="headerlink" title="2.获取Class实例的几种方式：（前三种方式需要掌握）"></a>2.获取Class实例的几种方式：（前三种方式需要掌握）</h3><p>​        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">        Class clazz1 = Person.class;</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line">        <span class="comment">//方式二：通过运行时类的对象,调用getClass()</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Class clazz2 = p1.getClass();</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：调用Class的静态方法：forName(String classPath)</span></span><br><span class="line">        Class clazz3 = Class.forName(<span class="string">&quot;com.atguigu.java.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        clazz3 = Class.forName(&quot;java.lang.String&quot;);</span></span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz1 == clazz2);</span><br><span class="line">        System.out.println(clazz1 == clazz3);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//方式四：使用类的加载器：ClassLoader  (了解)</span></span><br><span class="line">        ClassLoader classLoader = ReflectionTest.class.getClassLoader();</span><br><span class="line">        Class clazz4 = classLoader.loadClass(<span class="string">&quot;com.atguigu.java.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz4);</span><br><span class="line">    </span><br><span class="line">        System.out.println(clazz1 == clazz4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-总结：创建类的对象的方式"><a href="#3-总结：创建类的对象的方式" class="headerlink" title="3.总结：创建类的对象的方式?"></a>3.总结：创建类的对象的方式?</h3><p>方式一：new + 构造器<br>方式二：要创建Xxx类的对象，可以考虑：Xxx、Xxxs、XxxFactory、XxxBuilder类中查看是否有<br>静态方法的存在。可以调用其静态方法，创建Xxx对象。<br>方式三：通过反射</p>
<h3 id="4-Class实例可以是哪些结构的说明"><a href="#4-Class实例可以是哪些结构的说明" class="headerlink" title="4.Class实例可以是哪些结构的说明"></a>4.Class实例可以是哪些结构的说明</h3><p><img src="https://image.3001.net/images/20220110/16417492695551.png" alt="image-20220110012748128"></p>
<h2 id="了解ClassLoader"><a href="#了解ClassLoader" class="headerlink" title="了解ClassLoader"></a>了解ClassLoader</h2><h3 id="1-类的加载过程—-了解"><a href="#1-类的加载过程—-了解" class="headerlink" title="1.类的加载过程—-了解"></a>1.类的加载过程—-了解</h3><p><img src="https://image.3001.net/images/20220110/16417493644916.png" alt="image-20220110012922477"></p>
<h3 id="2-类的加载器的作用"><a href="#2-类的加载器的作用" class="headerlink" title="2.类的加载器的作用"></a>2.类的加载器的作用</h3><p><img src="https://image.3001.net/images/20220110/16417493592046.png" alt="image-20220110012917205"></p>
<h3 id="3-类的加载器的分类"><a href="#3-类的加载器的分类" class="headerlink" title="3.类的加载器的分类"></a>3.类的加载器的分类</h3><p><img src="https://image.3001.net/images/20220110/16417493525562.png" alt="image-20220110012906609"></p>
<h3 id="4-Java类编译、运行的执行的流程"><a href="#4-Java类编译、运行的执行的流程" class="headerlink" title="4.Java类编译、运行的执行的流程"></a>4.Java类编译、运行的执行的流程</h3><p><img src="https://image.3001.net/images/20220110/16417493419863.png" alt="image-20220110012859492"></p>
<h3 id="5-使用Classloader加载src目录下的配置文件"><a href="#5-使用Classloader加载src目录下的配置文件" class="headerlink" title="5.使用Classloader加载src目录下的配置文件"></a>5.使用Classloader加载src目录下的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Properties pros =  <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//此时的文件默认在当前的module下。</span></span><br><span class="line">        <span class="comment">//读取配置文件的方式一：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;src\\jdbc1.properties&quot;);</span></span><br><span class="line"><span class="comment">//        pros.load(fis);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件的方式二：使用ClassLoader</span></span><br><span class="line">        <span class="comment">//配置文件默认识别为：当前module的src下</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;jdbc1.properties&quot;</span>);</span><br><span class="line">        pros.load(is);</span><br><span class="line">    </span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user + <span class="string">&quot;,password = &quot;</span> + password);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射应用一：创建运行时类的对象"><a href="#反射应用一：创建运行时类的对象" class="headerlink" title="反射应用一：创建运行时类的对象"></a>反射应用一：创建运行时类的对象</h2><h4 id="1-代码举例"><a href="#1-代码举例" class="headerlink" title="1.代码举例"></a>1.代码举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">Person obj = clazz.newInstance();</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure>



<h4 id="2-说明"><a href="#2-说明" class="headerlink" title="2.说明"></a>2.说明</h4><ul>
<li><p>newInstance():调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。</p>
</li>
<li><p>要想此方法正常的创建运行时类的对象，要求：</p>
</li>
</ul>
<h4 id="1-运行时类必须提供空参的构造器"><a href="#1-运行时类必须提供空参的构造器" class="headerlink" title="1.运行时类必须提供空参的构造器"></a>1.运行时类必须提供空参的构造器</h4><h4 id="2-空参的构造器的访问权限得够。通常，设置为public。"><a href="#2-空参的构造器的访问权限得够。通常，设置为public。" class="headerlink" title="2.空参的构造器的访问权限得够。通常，设置为public。"></a>2.空参的构造器的访问权限得够。通常，设置为public。</h4><ul>
<li>在javabean中要求提供一个public的空参构造器。原因：</li>
</ul>
<h4 id="1-便于通过反射，创建运行时类的对象"><a href="#1-便于通过反射，创建运行时类的对象" class="headerlink" title="1.便于通过反射，创建运行时类的对象"></a>1.便于通过反射，创建运行时类的对象</h4><h4 id="2-便于子类继承此运行时类时，默认调用super-时，保证父类此构造器"><a href="#2-便于子类继承此运行时类时，默认调用super-时，保证父类此构造器" class="headerlink" title="2.便于子类继承此运行时类时，默认调用super()时，保证父类此构造器"></a>2.便于子类继承此运行时类时，默认调用super()时，保证父类此构造器</h4><h2 id="反射应用二：获取运行时类的完整结构"><a href="#反射应用二：获取运行时类的完整结构" class="headerlink" title="反射应用二：获取运行时类的完整结构"></a>反射应用二：获取运行时类的完整结构</h2><ul>
<li>我们可以通过反射，获取对应的运行时类中所有的属性、方法、构造器、父类、接口、父类的泛型、包、注解、异常等。。。。</li>
</ul>
<h4 id="典型代码："><a href="#典型代码：" class="headerlink" title="典型代码："></a>典型代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取属性结构</span></span><br><span class="line">    <span class="comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span></span><br><span class="line">    Field[] fields = clazz.getFields();</span><br><span class="line">    <span class="keyword">for</span>(Field f : fields)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getDeclaredFields():获取当前运行时类中声明的所有属性。（不包含父类中声明的属性</span></span><br><span class="line">    Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getMethods():获取当前运行时类及其所父类中声明为public权限的方法</span></span><br><span class="line">    Method[] methods = clazz.getMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//getDeclaredMethods():获取当前运行时类中声明的所方法。（不包含父类中声明的方法</span></span><br><span class="line">    Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method m : declaredMethods)&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取构造器结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">        <span class="comment">//getConstructors():获取当前运行时类中声明为public的构造器</span></span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c : constructors)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//getDeclaredConstructors():获取当前运行时类中声明的所的构造器</span></span><br><span class="line">        Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c : declaredConstructors)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的父类</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">        Class superclass = clazz.getSuperclass();</span><br><span class="line">        System.out.println(superclass);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的带泛型的父类</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">        Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">        System.out.println(genericSuperclass);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的带泛型的父类的泛型</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    代码：逻辑性代码  vs 功能性代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">        Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">        ParameterizedType paramType = (ParameterizedType) genericSuperclass;</span><br><span class="line">        <span class="comment">//获取泛型类型</span></span><br><span class="line">        Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(actualTypeArguments[0].getTypeName());</span></span><br><span class="line">        System.out.println(((Class)actualTypeArguments[<span class="number">0</span>]).getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类实现的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">        Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span>(Class c : interfaces)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//获取运行时类的父类实现的接口</span></span><br><span class="line">        Class[] interfaces1 = clazz.getSuperclass().getInterfaces();</span><br><span class="line">        <span class="keyword">for</span>(Class c : interfaces1)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取运行时类所在的包</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">        Package pack = clazz.getPackage();</span><br><span class="line">        System.out.println(pack);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取运行时类声明的注解</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">        Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span>(Annotation annos : annotations)&#123;</span><br><span class="line">            System.out.println(annos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="反射应用三：调用运行时类的指定结构"><a href="#反射应用三：调用运行时类的指定结构" class="headerlink" title="反射应用三：调用运行时类的指定结构"></a>反射应用三：调用运行时类的指定结构</h2><h4 id="调用指定的属性："><a href="#调用指定的属性：" class="headerlink" title="调用指定的属性："></a>调用指定的属性：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testField1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建运行时类的对象</span></span><br><span class="line">    Person p = (Person) clazz.newInstance();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span></span><br><span class="line">    Field name = clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.保证当前属性是可访问的</span></span><br><span class="line">    name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//3.获取、设置指定对象的此属性值</span></span><br><span class="line">    name.set(p,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(name.get(p));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调用指定的方法："><a href="#调用指定的方法：" class="headerlink" title="调用指定的方法："></a>调用指定的方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        Person p = (Person) clazz.newInstance();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.获取指定的某个方法</span></span><br><span class="line"><span class="comment">        getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method show = clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//2.保证当前方法是可访问的</span></span><br><span class="line">        show.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参</span></span><br><span class="line"><span class="comment">        invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object returnValue = show.invoke(p,<span class="string">&quot;CHN&quot;</span>); <span class="comment">//String nation = p.show(&quot;CHN&quot;);</span></span><br><span class="line">        System.out.println(returnValue);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;*************如何调用静态方法*****************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// private static void showDesc()</span></span><br><span class="line">    </span><br><span class="line">        Method showDesc = clazz.getDeclaredMethod(<span class="string">&quot;showDesc&quot;</span>);</span><br><span class="line">        showDesc.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//如果调用的运行时类中的方法没返回值，则此invoke()返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object returnVal = showDesc.invoke(null);</span></span><br><span class="line">        Object returnVal = showDesc.invoke(Person.class);</span><br><span class="line">        System.out.println(returnVal);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="调用指定的构造器："><a href="#调用指定的构造器：" class="headerlink" title="调用指定的构造器："></a>调用指定的构造器：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Person(String name)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.获取指定的构造器</span></span><br><span class="line"><span class="comment">    getDeclaredConstructor():参数：指明构造器的参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    Constructor constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.保证此构造器是可访问的</span></span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.调用此构造器创建运行时类的对象</span></span><br><span class="line">    Person per = (Person) constructor.newInstance(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    System.out.println(per);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射应用四：动态代理"><a href="#反射应用四：动态代理" class="headerlink" title="反射应用四：动态代理"></a>反射应用四：动态代理</h2><h3 id="1-代理模式的原理："><a href="#1-代理模式的原理：" class="headerlink" title="1.代理模式的原理："></a>1.代理模式的原理：</h3><p>使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。 </p>
<h3 id="2-静态代理"><a href="#2-静态代理" class="headerlink" title="2.静态代理"></a>2.静态代理</h3><h4 id="2-1-举例："><a href="#2-1-举例：" class="headerlink" title="2.1 举例："></a>2.1 举例：</h4><p>实现Runnable接口的方法创建多线程。<br>Class MyThread implements Runnable{} //相当于被代理类<br>Class Thread implements Runnable{} //相当于代理类<br>main(){<br>MyThread t = new MyThread();<br>Thread thread = new Thread(t);<br>thread.start();//启动线程；调用线程的run()<br>}</p>
<h4 id="2-2-静态代理的缺点："><a href="#2-2-静态代理的缺点：" class="headerlink" title="2.2 静态代理的缺点："></a>2.2 静态代理的缺点：</h4><p>① 代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。<br>② 每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。</p>
<h4 id="3-动态代理的特点："><a href="#3-动态代理的特点：" class="headerlink" title="3.动态代理的特点："></a>3.动态代理的特点：</h4><p>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对<br>象。</p>
<h3 id="4-动态代理的实现"><a href="#4-动态代理的实现" class="headerlink" title="4.动态代理的实现"></a>4.动态代理的实现</h3><h4 id="4-1-需要解决的两个主要问题："><a href="#4-1-需要解决的两个主要问题：" class="headerlink" title="4.1 需要解决的两个主要问题："></a>4.1 需要解决的两个主要问题：</h4><p>问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。<br>（通过Proxy.newProxyInstance()实现）<br>问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。<br>(通过InvocationHandler接口的实现类及其方法invoke())</p>
<h4 id="4-2-代码实现："><a href="#4-2-代码实现：" class="headerlink" title="4.2 代码实现："></a>4.2 代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 动态代理的举例</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 10:18</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I believe I can fly!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法一====================&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法二====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回一个代理类的对象。解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        handler.bind(obj);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要使用被代理类的对象进行赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    </span><br><span class="line">        HumanUtil util = <span class="keyword">new</span> HumanUtil();</span><br><span class="line">        util.method1();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line">    </span><br><span class="line">        util.method2();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance:代理类的对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;四川麻辣烫&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">    </span><br><span class="line">        ClothFactory proxyClothFactory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);</span><br><span class="line">    </span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="体会：反射的动态性。"><a href="#体会：反射的动态性。" class="headerlink" title="体会：反射的动态性。"></a>体会：反射的动态性。</h4>]]></content>
      <tags>
        <tag>java基础-高级</tag>
      </tags>
  </entry>
</search>
