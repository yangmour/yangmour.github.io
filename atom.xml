<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>希文的个人博客</title>
  
  <subtitle>白日依山尽，黄河入海流。欲穷千里目，更上一层楼。</subtitle>
  <link href="https://yangmour.github.io/atom.xml" rel="self"/>
  
  <link href="https://yangmour.github.io/"/>
  <updated>2022-01-05T16:02:12.587Z</updated>
  <id>https://yangmour.github.io/</id>
  
  <author>
    <name>希文</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5-泛型-shangguigu18day</title>
    <link href="https://yangmour.github.io/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/5-%E6%B3%9B%E5%9E%8B-shangguigu18day/"/>
    <id>https://yangmour.github.io/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/5-%E6%B3%9B%E5%9E%8B-shangguigu18day/</id>
    <published>2022-01-05T15:25:37.000Z</published>
    <updated>2022-01-05T16:02:12.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h1><p>[TOC]</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java泛型&quot;&gt;&lt;a href=&quot;#Java泛型&quot; class=&quot;headerlink&quot; title=&quot;Java泛型&quot;&gt;&lt;/a&gt;Java泛型&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>4-Java集合-shangguigu17day</title>
    <link href="https://yangmour.github.io/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/4-Java%E9%9B%86%E5%90%88-shangguigu17day/"/>
    <id>https://yangmour.github.io/2022/01/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/4-Java%E9%9B%86%E5%90%88-shangguigu17day/</id>
    <published>2022-01-05T15:25:37.000Z</published>
    <updated>2022-01-05T16:00:15.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><p>[TOC]</p><h2 id="1-数组与集合"><a href="#1-数组与集合" class="headerlink" title="1.数组与集合"></a>1.数组与集合</h2><h3 id="1-集合与数组存储数据概述："><a href="#1-集合与数组存储数据概述：" class="headerlink" title="1.集合与数组存储数据概述："></a>1.集合与数组存储数据概述：</h3><ul><li>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。</li><li>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中)</li></ul><span id="more"></span><h3 id="2-数组存储的特点："><a href="#2-数组存储的特点：" class="headerlink" title="2.数组存储的特点："></a>2.数组存储的特点：</h3><blockquote><ul><li>一旦初始化以后，其长度就确定了。<br>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。</li></ul><ul><li><pre><code>  比如：String[] arr;int[] arr1;Object[] arr2;</code></pre></li><li></li></ul></blockquote><h3 id="3-数组存储的弊端："><a href="#3-数组存储的弊端：" class="headerlink" title="3.数组存储的弊端："></a>3.数组存储的弊端：</h3><ul><li><blockquote><p>一旦初始化以后，其长度就不可修改。</p></blockquote></li><li><blockquote><p>数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</p></blockquote></li><li><blockquote><p>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</p></blockquote></li><li><blockquote><p>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</p></blockquote></li></ul><h3 id="4-集合存储的优点："><a href="#4-集合存储的优点：" class="headerlink" title="4.集合存储的优点："></a>4.集合存储的优点：</h3><ul><li>解决数组存储数据方面的弊端。</li></ul><h2 id="2-Iterator接口与foreach循环"><a href="#2-Iterator接口与foreach循环" class="headerlink" title="2.Iterator接口与foreach循环"></a>2.Iterator接口与foreach循环</h2><h3 id="1-遍历Collection的两种方式："><a href="#1-遍历Collection的两种方式：" class="headerlink" title="1.遍历Collection的两种方式："></a>1.遍历Collection的两种方式：</h3><h4 id="①-使用迭代器Iterator"><a href="#①-使用迭代器Iterator" class="headerlink" title="① 使用迭代器Iterator"></a>① 使用迭代器Iterator</h4><h4 id="②-foreach循环（或增强for循环）"><a href="#②-foreach循环（或增强for循环）" class="headerlink" title="② foreach循环（或增强for循环）"></a>② foreach循环（或增强for循环）</h4><h3 id="2-java-utils包下定义的迭代器接口：Iterator"><a href="#2-java-utils包下定义的迭代器接口：Iterator" class="headerlink" title="2.java.utils包下定义的迭代器接口：Iterator"></a>2.java.utils包下定义的迭代器接口：Iterator</h3><h4 id="2-1说明："><a href="#2-1说明：" class="headerlink" title="2.1说明："></a>2.1说明：</h4><p>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。<br> GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。</p><h4 id="2-2作用："><a href="#2-2作用：" class="headerlink" title="2.2作用："></a>2.2作用：</h4><p>遍历集合Collectiton元素</p><h4 id="2-3如何获取实例："><a href="#2-3如何获取实例：" class="headerlink" title="2.3如何获取实例："></a>2.3如何获取实例：</h4><p>coll.iterator()返回一个迭代器实例</p><h4 id="2-4遍历的代码实现："><a href="#2-4遍历的代码实现：" class="headerlink" title="2.4遍历的代码实现："></a>2.4遍历的代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = coll.iterator();</span><br><span class="line"><span class="comment">//hasNext():判断是否还下一个元素</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5图示说明："><a href="#2-5图示说明：" class="headerlink" title="2.5图示说明："></a>2.5图示说明：</h4><p><img src="https://image.3001.net/images/20220105/16413969058917.png" alt="image-20220105233433510"></p><h4 id="2-6-remove-的使用："><a href="#2-6-remove-的使用：" class="headerlink" title="2.6 remove()的使用："></a>2.6 remove()的使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Iterator中的remove()</span></span><br><span class="line"><span class="comment">//如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。</span></span><br><span class="line"><span class="comment">//内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中&quot;Tom&quot;</span></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            iterator.remove();</span></span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line"><span class="comment">//                iterator.remove();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="comment">//遍历集合</span></span><br><span class="line">​    iterator = coll.iterator();</span><br><span class="line">​    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">​        System.out.println(iterator.next());</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-jdk5-0新特性–增强for循环：-foreach循环"><a href="#3-jdk5-0新特性–增强for循环：-foreach循环" class="headerlink" title="3.jdk5.0新特性–增强for循环：(foreach循环)"></a>3.jdk5.0新特性–增强for循环：(foreach循环)</h3><h4 id="1-遍历集合举例："><a href="#1-遍历集合举例：" class="headerlink" title="1.遍历集合举例："></a>1.遍历集合举例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll.add(<span class="number">123</span>);</span><br><span class="line">    coll.add(<span class="number">456</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">    coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(Object obj : coll)&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>内部仍然调用了迭代器。</p><h4 id="2-遍历数组举例："><a href="#2-遍历数组举例：" class="headerlink" title="2.遍历数组举例："></a>2.遍历数组举例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Collection子接口：List接口"><a href="#3-Collection子接口：List接口" class="headerlink" title="3.Collection子接口：List接口"></a>3.Collection子接口：List接口</h2><h3 id="1-存储的数据特点：存储序的、可重复的数据。"><a href="#1-存储的数据特点：存储序的、可重复的数据。" class="headerlink" title="1.存储的数据特点：存储序的、可重复的数据。"></a>1.存储的数据特点：存储序的、可重复的数据。</h3><h3 id="2-常用方法：-记住"><a href="#2-常用方法：-记住" class="headerlink" title="2.常用方法：(记住)"></a>2.常用方法：(记住)</h3><ul><li>增：add(Object obj)</li><li>删：remove(int index) / remove(Object obj)</li><li>改：set(int index, Object ele)</li><li>查：get(int index)</li><li>插：add(int index, Object ele)</li><li>长度：size()</li><li>遍历：① Iterator迭代器方式<br>  ② 增强for循环<br>  ③ 普通的循环</li></ul><h3 id="3-常用实现类："><a href="#3-常用实现类：" class="headerlink" title="3.常用实现类："></a>3.常用实现类：</h3><h4 id="—-Collection接口：单列集合，用来存储一个一个的对象"><a href="#—-Collection接口：单列集合，用来存储一个一个的对象" class="headerlink" title="|—-Collection接口：单列集合，用来存储一个一个的对象"></a>|—-Collection接口：单列集合，用来存储一个一个的对象</h4><ul><li>|—-List接口：存储序的、可重复的数据。  –&gt;“动态”数组,替换原的数组<ul><li>|—-ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</li><li>|—-LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</li><li>|—-Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</li></ul></li></ul><h3 id="4-源码分析-难点"><a href="#4-源码分析-难点" class="headerlink" title="4.源码分析(难点)"></a>4.源码分析(难点)</h3><h4 id="4-1-ArrayList的源码分析："><a href="#4-1-ArrayList的源码分析：" class="headerlink" title="4.1 ArrayList的源码分析："></a>4.1 ArrayList的源码分析：</h4><h5 id="2-1-jdk-7情况下"><a href="#2-1-jdk-7情况下" class="headerlink" title="2.1 jdk 7情况下"></a>2.1 jdk 7情况下</h5><ul><li><pre><code> ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData</code></pre></li><li><pre><code> list.add(123);//elementData[0] = new Integer(123);</code></pre></li><li><pre><code> ...</code></pre></li><li><pre><code> list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。</code></pre></li><li><pre><code> 默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</code></pre></li><li></li><li><p>结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)<br>*</p><h5 id="2-2-jdk-8中ArrayList的变化："><a href="#2-2-jdk-8中ArrayList的变化：" class="headerlink" title="2.2 jdk 8中ArrayList的变化："></a>2.2 jdk 8中ArrayList的变化：</h5></li><li><pre><code> ArrayList list = new ArrayList();//底层Object[] elementData初始化为&#123;&#125;.并没创建长度为10的数组</code></pre></li><li></li><li><pre><code> list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</code></pre></li><li><pre><code> ...</code></pre></li><li><p>后续的添加和扩容操作与jdk 7 无异。</p><h5 id="2-3-小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象"><a href="#2-3-小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象" class="headerlink" title="2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象"></a>2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象</h5></li><li><pre><code>       的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</code></pre></li><li></li></ul><h4 id="4-2-LinkedList的源码分析："><a href="#4-2-LinkedList的源码分析：" class="headerlink" title="4.2 LinkedList的源码分析："></a>4.2 LinkedList的源码分析：</h4><ul><li><p>LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</p></li><li><p>list.add(123);//将123封装到Node中，创建了Node对象。<br>*</p></li><li><p>其中，Node定义为：体现了LinkedList的双向链表的说法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">     E item;</span><br><span class="line">     Node&lt;E&gt; next;</span><br><span class="line">     Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">     Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">     <span class="keyword">this</span>.item = element;</span><br><span class="line">     <span class="keyword">this</span>.next = next;</span><br><span class="line">     <span class="keyword">this</span>.prev = prev;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-Vector的源码分析："><a href="#4-3-Vector的源码分析：" class="headerlink" title="4.3 Vector的源码分析："></a>4.3 Vector的源码分析：</h4><p>jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。<br>在扩容方面，默认扩容为原来的数组长度的2倍。</p></li></ul><h3 id="5-存储的元素的要求："><a href="#5-存储的元素的要求：" class="headerlink" title="5.存储的元素的要求："></a>5.存储的元素的要求：</h3><p>添加的对象，所在的类要重写equals()方法<br>[面试题]</p><ul><li> 面试题：ArrayList、LinkedList、Vector者的异同？</li><li> 同：三个类都是实现了List接口，存储数据的特点相同：存储序的、可重复的数据</li><li> 不同：见上（第3部分+第4部分）</li></ul><h2 id="4-Collection子接口：Set接口"><a href="#4-Collection子接口：Set接口" class="headerlink" title="4.Collection子接口：Set接口"></a>4.Collection子接口：Set接口</h2><h3 id="1-存储的数据特点：无序的、不可重复的元素"><a href="#1-存储的数据特点：无序的、不可重复的元素" class="headerlink" title="1.存储的数据特点：无序的、不可重复的元素"></a>1.存储的数据特点：无序的、不可重复的元素</h3><p>具体的：<br>以HashSet为例说明：</p><ol><li>无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。</li><li>不可重复性：保证添加的元素照equals()判断时，不能返回true.即：相同的元素只能添加一个。</li></ol><h3 id="2-元素添加过程：-以HashSet为例"><a href="#2-元素添加过程：-以HashSet为例" class="headerlink" title="2.元素添加过程：(以HashSet为例)"></a>2.元素添加过程：(以HashSet为例)</h3><p>我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，<br>此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置，判断<br>数组此位置上是否已经元素：<br> 如果此位置上没其他元素，则元素a添加成功。 —&gt;情况1<br> 如果此位置上其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值：<br>     如果hash值不相同，则元素a添加成功。—&gt;情况2<br>     如果hash值相同，进而需要调用元素a所在类的equals()方法：<br>            equals()返回true,元素a添加失败<br>            equals()返回false,则元素a添加成功。—&gt;情况2</p><p>对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。<br>jdk 7 :元素a放到数组中，指向原来的元素。<br>jdk 8 :原来的元素在数组中，指向元素a<br>总结：七上八下</p><p>HashSet底层：数组+链表的结构。（前提：jdk7)</p><h3 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h3><p>Set接口中没额外定义新的方法，使用的都是Collection中声明过的方法。</p><h3 id="4-常用实现类："><a href="#4-常用实现类：" class="headerlink" title="4.常用实现类："></a>4.常用实现类：</h3><p>|—-Collection接口：单列集合，用来存储一个一个的对象</p><ul><li><pre><code>   |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”     - |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值     - |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历     - 在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。                   对于频繁的遍历操作，LinkedHashSet效率高于HashSet.     - |----TreeSet：可以照添加对象的指定属性，进行排序。</code></pre></li></ul><h3 id="5-存储对象所在类的要求："><a href="#5-存储对象所在类的要求：" class="headerlink" title="5.存储对象所在类的要求："></a>5.存储对象所在类的要求：</h3><h4 id="HashSet-LinkedHashSet"><a href="#HashSet-LinkedHashSet" class="headerlink" title="HashSet/LinkedHashSet:"></a>HashSet/LinkedHashSet:</h4><p>要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()<br>要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</p><ul><li>   重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</li><li></li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet:"></a>TreeSet:</h4><h5 id="1-自然排序中，比较两个对象是否相同的标准为：compareTo-返回0-不再是equals"><a href="#1-自然排序中，比较两个对象是否相同的标准为：compareTo-返回0-不再是equals" class="headerlink" title="1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals()."></a>1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</h5><h5 id="2-定制排序中，比较两个对象是否相同的标准为：compare-返回0-不再是equals"><a href="#2-定制排序中，比较两个对象是否相同的标准为：compare-返回0-不再是equals" class="headerlink" title="2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals()."></a>2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</h5><h3 id="6-TreeSet的使用"><a href="#6-TreeSet的使用" class="headerlink" title="6.TreeSet的使用"></a>6.TreeSet的使用</h3><h4 id="6-1-使用说明"><a href="#6-1-使用说明" class="headerlink" title="6.1 使用说明:"></a>6.1 使用说明:</h4><p>1.向TreeSet中添加的数据，要求是相同类的对象。<br>2.两种排序方式：自然排序（实现Comparable接口 和 定制排序（Comparator）</p><h4 id="6-2-常用的排序方式"><a href="#6-2-常用的排序方式" class="headerlink" title="6.2 常用的排序方式:"></a>6.2 常用的排序方式:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自然排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add(&quot;AA&quot;);</span></span><br><span class="line"><span class="comment">//        set.add(new User(&quot;Tom&quot;,12));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//举例一：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        set.add(34);</span></span><br><span class="line"><span class="comment">//        set.add(-34);</span></span><br><span class="line"><span class="comment">//        set.add(43);</span></span><br><span class="line"><span class="comment">//        set.add(11);</span></span><br><span class="line"><span class="comment">//        set.add(8);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="comment">//照年龄从小到大排列</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mary&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line">​    Iterator iterator = set.iterator();</span><br><span class="line">​    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">​        System.out.println(iterator.next());</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Map接口"><a href="#5-Map接口" class="headerlink" title="5.Map接口"></a>5.Map接口</h2><h3 id="双列集合框架：Map"><a href="#双列集合框架：Map" class="headerlink" title="双列集合框架：Map"></a>双列集合框架：Map</h3><h3 id="1-常用实现类结构"><a href="#1-常用实现类结构" class="headerlink" title="1.常用实现类结构"></a>1.常用实现类结构</h3><p>|—-Map:双列数据，存储key-value对的数据   —类似于高中的函数：y = f(x)</p><ul><li><p>|—-HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value</p></li><li><p>|—-LinkedHashMap:保证在遍历map元素时，可以照添加的顺序实现遍历。</p><ul><li><p>原因：在原的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。</p></li><li><p>对于频繁的遍历操作，此类执行效率高于HashMap。</p></li></ul></li><li><p>|—-TreeMap:保证照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序</p><ul><li>底层使用红黑树</li></ul></li><li><p>|—-Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value</p><ul><li>|—-Properties:常用来处理配置文件。key和value都是String类型<br>*<br>*</li></ul></li><li><p>HashMap的底层：数组+链表  （jdk7及之前)</p></li><li><pre><code>               数组+链表+红黑树 （jdk 8)</code></pre></li></ul><p>[面试题]</p><ul><li><ol><li>HashMap的底层实现原理？</li></ol></li><li><ol start="2"><li>HashMap 和 Hashtable的异同？</li></ol></li><li><ol start="3"><li>CurrentHashMap 与 Hashtable的异同？（暂时不讲)</li></ol></li></ul><h3 id="2-存储结构的理解："><a href="#2-存储结构的理解：" class="headerlink" title="2.存储结构的理解："></a>2.存储结构的理解：</h3><blockquote><p>Map中的key:无序的、不可重复的，使用Set存储所的key  —&gt; key所在的类要重写equals()和hashCode() （以HashMap为例)<br>Map中的value:无序的、可重复的，使用Collection存储所的value —&gt;value所在的类要重写equals()<br>一个键值对：key-value构成了一个Entry对象。<br>Map中的entry:无序的、不可重复的，使用Set存储所的entry</p></blockquote><p>图示：<img src="https://image.3001.net/images/20220105/16413979474192.png" alt="image-20220105235231739"></p><h3 id="3-常用方法-1"><a href="#3-常用方法-1" class="headerlink" title="3.常用方法"></a>3.常用方法</h3><ul><li>添加：put(Object key,Object value)</li><li>删除：remove(Object key)</li><li>修改：put(Object key,Object value)</li><li>查询：get(Object key)</li><li>长度：size()</li><li>遍历：keySet() / values() / entrySet()</li></ul><h3 id="4-内存结构说明：（难点）"><a href="#4-内存结构说明：（难点）" class="headerlink" title="4.内存结构说明：（难点）"></a>4.内存结构说明：（难点）</h3><h4 id="4-1-HashMap在jdk7中实现原理："><a href="#4-1-HashMap在jdk7中实现原理：" class="headerlink" title="4.1 HashMap在jdk7中实现原理："></a>4.1 HashMap在jdk7中实现原理：</h4><p>HashMap map = new HashMap():</p><ul><li><pre><code> 在实例化以后，底层创建了长度是16的一维数组Entry[] table。</code></pre></li><li><pre><code> ...可能已经执行过多次put...</code></pre></li><li><pre><code> map.put(key1,value1):</code></pre></li><li><pre><code> 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</code></pre></li><li><pre><code> 如果此位置上的数据为空，此时的key1-value1添加成功。 ----情况1</code></pre></li><li><pre><code> 如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值：</code></pre></li><li><pre><code>         如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。----情况2</code></pre></li><li><p>如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：</p><ul><li><p>如果equals()返回false:此时key1-value1添加成功。—-情况3</p></li><li><p>如果equals()返回true:使用value1替换value2。<br>*</p></li></ul></li><li><pre><code> 补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。</code></pre></li><li></li><li><pre><code>在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原的数据复制过来。</code></pre></li></ul><h4 id="4-2-HashMap在jdk8中相较于jdk7在底层实现方面的不同："><a href="#4-2-HashMap在jdk8中相较于jdk7在底层实现方面的不同：" class="headerlink" title="4.2 HashMap在jdk8中相较于jdk7在底层实现方面的不同："></a>4.2 HashMap在jdk8中相较于jdk7在底层实现方面的不同：</h4><h5 id="1-new-HashMap-底层没创建一个长度为16的数组"><a href="#1-new-HashMap-底层没创建一个长度为16的数组" class="headerlink" title="1.new HashMap():底层没创建一个长度为16的数组"></a>1.new HashMap():底层没创建一个长度为16的数组</h5><h5 id="2-jdk-8底层的数组是：Node-而非Entry"><a href="#2-jdk-8底层的数组是：Node-而非Entry" class="headerlink" title="2.jdk 8底层的数组是：Node[],而非Entry[]"></a>2.jdk 8底层的数组是：Node[],而非Entry[]</h5><h5 id="3-首次调用put-方法时，底层创建长度为16的数组"><a href="#3-首次调用put-方法时，底层创建长度为16的数组" class="headerlink" title="3.首次调用put()方法时，底层创建长度为16的数组"></a>3.首次调用put()方法时，底层创建长度为16的数组</h5><h5 id="4-jdk7底层结构只：数组-链表。jdk8中底层结构：数组-链表-红黑树。"><a href="#4-jdk7底层结构只：数组-链表。jdk8中底层结构：数组-链表-红黑树。" class="headerlink" title="4.jdk7底层结构只：数组+链表。jdk8中底层结构：数组+链表+红黑树。"></a>4.jdk7底层结构只：数组+链表。jdk8中底层结构：数组+链表+红黑树。</h5><ol><li>形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</li><li>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</li></ol><h4 id="4-3-HashMap底层典型属性的属性的说明："><a href="#4-3-HashMap底层典型属性的属性的说明：" class="headerlink" title="4.3 HashMap底层典型属性的属性的说明："></a>4.3 HashMap底层典型属性的属性的说明：</h4><p>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16<br>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75<br>threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12<br>TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8<br>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</p><h4 id="4-4-LinkedHashMap的底层实现原理-了解"><a href="#4-4-LinkedHashMap的底层实现原理-了解" class="headerlink" title="4.4 LinkedHashMap的底层实现原理(了解)"></a>4.4 LinkedHashMap的底层实现原理(了解)</h4><p>LinkedHashMap底层使用的结构与HashMap相同，因为LinkedHashMap继承于HashMap.<br>区别就在于：LinkedHashMap内部提供了Entry，替换HashMap中的Node.</p><p><img src="https://image.3001.net/images/20220105/16413981664624.png" alt="image-20220105235613026"></p><h3 id="5-TreeMap的使用"><a href="#5-TreeMap的使用" class="headerlink" title="5.TreeMap的使用"></a>5.TreeMap的使用</h3><p>//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象<br>//因为要照key进行排序：自然排序 、定制排序</p><h3 id="6-使用Properties读取配置文件"><a href="#6-使用Properties读取配置文件" class="headerlink" title="6.使用Properties读取配置文件"></a>6.使用Properties读取配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Properties:常用来处理配置文件。key和value都是String类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        pros.load(fis);<span class="comment">//加载流对应的文件</span></span><br><span class="line">    </span><br><span class="line">        String name = pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-Collections工具类的使用"><a href="#6-Collections工具类的使用" class="headerlink" title="6.Collections工具类的使用"></a>6.Collections工具类的使用</h2><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><h3 id="1-作用：操作Collection和Map的工具类"><a href="#1-作用：操作Collection和Map的工具类" class="headerlink" title="1.作用：操作Collection和Map的工具类"></a>1.作用：操作Collection和Map的工具类</h3><h3 id="2-常用方法："><a href="#2-常用方法：" class="headerlink" title="2.常用方法："></a>2.常用方法：</h3><ul><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 List 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素升序排序</li><li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li><li>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection，Comparator)<br>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src)：将src中的内容复制到dest中</li><li>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所旧值</li></ul><p><img src="https://image.3001.net/images/20220105/16413982373697.png" alt="image-20220105235722379"></p><ul><li>说明：ArrayList和HashMap都是线程不安全的，如果程序要求线程安全，我们可以将ArrayList、HashMap转换为线程的。</li><li>使用synchronizedList(List list） 和 synchronizedMap(Map map）</li></ul><h3 id="3-面试题："><a href="#3-面试题：" class="headerlink" title="3.面试题："></a>3.面试题：</h3><p>面试题：Collection 和 Collections的区别？</p><h2 id="7-数据结构简述"><a href="#7-数据结构简述" class="headerlink" title="7.数据结构简述"></a>7.数据结构简述</h2><h3 id="1-数据结构概述"><a href="#1-数据结构概述" class="headerlink" title="1.数据结构概述"></a>1.数据结构概述</h3><ul><li>数据结构（Data Structure是一门和计算机硬件与软件都密切相关的学科，它的研究重点是在计算机的程序设计领域中探讨如何在计算机中组织和存储数据并进行高效率的运用，涉及的内容包含：数据的逻辑关系、数据的存储结构、排序算法（Algorithm）、查找（或搜索）等。</li></ul><h3 id="2-数据结构与算法的理解"><a href="#2-数据结构与算法的理解" class="headerlink" title="2.数据结构与算法的理解"></a>2.数据结构与算法的理解</h3><ul><li><p>程序能否快速而高效地完成预定的任务，取决于是否选对了数据结构，而程序是否能清楚而正确地把问题解决，则取决于算法。</p></li><li><p>所以大家认为：“Algorithms + Data Structures = Programs”（出自：Pascal之父Nicklaus Wirth）</p></li><li><p>总结：算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体。</p></li></ul><h3 id="3-数据结构的研究对象"><a href="#3-数据结构的研究对象" class="headerlink" title="3.数据结构的研究对象"></a>3.数据结构的研究对象</h3><h4 id="3-1-数据间的逻辑结构"><a href="#3-1-数据间的逻辑结构" class="headerlink" title="3.1 数据间的逻辑结构"></a>3.1 数据间的逻辑结构</h4><p><img src="https://image.3001.net/images/20220105/16413983451798.png" alt="image-20220105235911087"></p><p>集合结构            </p><p><img src="https://image.3001.net/images/20220105/16413983528047.png" alt="image-20220105235918961"></p><p>一对一：线性结构</p><p><img src="https://image.3001.net/images/20220105/16413983609405.png" alt="image-20220105235927240"></p><p>​      一对多：树形结构      </p><p><img src="https://image.3001.net/images/20220105/16413983698380.png" alt="image-20220105235934451"></p><p>多对多：图形结构</p><h4 id="3-2-数据的存储结构："><a href="#3-2-数据的存储结构：" class="headerlink" title="3.2 数据的存储结构："></a>3.2 数据的存储结构：</h4><p>线性表（顺序表、链表、栈、队列）<br>树<br>图</p><p>说明：习惯上把顺序表和链表看做基本数据结构（或真实数据结构）<br>      习惯上把栈、队列、树、图看做抽象数据类型，简称ADT</p><ol start="4"><li>使用详情见思维导图：<br>《附录：尚硅谷_宋红康_数据结构概述-Java版.xmind》</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java集合&quot;&gt;&lt;a href=&quot;#Java集合&quot; class=&quot;headerlink&quot; title=&quot;Java集合&quot;&gt;&lt;/a&gt;Java集合&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-数组与集合&quot;&gt;&lt;a href=&quot;#1-数组与集合&quot; class=&quot;headerlink&quot; title=&quot;1.数组与集合&quot;&gt;&lt;/a&gt;1.数组与集合&lt;/h2&gt;&lt;h3 id=&quot;1-集合与数组存储数据概述：&quot;&gt;&lt;a href=&quot;#1-集合与数组存储数据概述：&quot; class=&quot;headerlink&quot; title=&quot;1.集合与数组存储数据概述：&quot;&gt;&lt;/a&gt;1.集合与数组存储数据概述：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;集合、数组都是对多个数据进行存储操作的结构，简称Java容器。&lt;/li&gt;
&lt;li&gt;说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中)&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>3-枚举类和注解-shangguigu16day</title>
    <link href="https://yangmour.github.io/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/3-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3-shangguigu16day/"/>
    <id>https://yangmour.github.io/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/3-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3-shangguigu16day/</id>
    <published>2021-12-21T13:09:10.000Z</published>
    <updated>2021-12-23T13:16:38.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举类和注解"><a href="#枚举类和注解" class="headerlink" title="枚举类和注解"></a>枚举类和注解</h1><p>[TOC]</p><h2 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1.枚举类的使用"></a>1.枚举类的使用</h2><h3 id="1-枚举类的说明："><a href="#1-枚举类的说明：" class="headerlink" title="1.枚举类的说明："></a>1.枚举类的说明：</h3><ul><li>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</li><li>2.当需要定义一组常量时，强烈建议使用枚举类</li><li>3.如果枚举类中只一个对象，则可以作为单例模式的实现方式。</li></ul><span id="more"></span><h3 id="2-如何自定义枚举类？步骤："><a href="#2-如何自定义枚举类？步骤：" class="headerlink" title="2.如何自定义枚举类？步骤："></a>2.如何自定义枚举类？步骤：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line"> <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.私化类的构造器,并给对象属性赋值</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">     <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//4.其他诉求1：提供toString()</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">             <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-jdk-5-0-新增使用enum定义枚举类。步骤："><a href="#3-jdk-5-0-新增使用enum定义枚举类。步骤：" class="headerlink" title="3.jdk 5.0 新增使用enum定义枚举类。步骤："></a>3.jdk 5.0 新增使用enum定义枚举类。步骤：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> </span>&#123;</span><br><span class="line"> <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line"> SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line"> SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line"> AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line"> WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.私化类的构造器,并给对象属性赋值</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">     <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> seasonDesc;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-使用enum定义枚举类之后，枚举类常用方法：（继承于java-lang-Enum类）"><a href="#4-使用enum定义枚举类之后，枚举类常用方法：（继承于java-lang-Enum类）" class="headerlink" title="4.使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）"></a>4.使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Season1 summer = Season1.SUMMER;</span><br><span class="line">     <span class="comment">//toString():返回枚举类对象的名称</span></span><br><span class="line">     System.out.println(summer.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(Season1.class.getSuperclass());</span></span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        <span class="comment">//values():返回所的枚举类对象构成的数组</span></span><br><span class="line">        Season1[] values = Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; values.length;i++)&#123;</span><br><span class="line">            System.out.println(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        Thread.State[] values1 = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values1.length; i++) &#123;</span><br><span class="line">            System.out.println(values1[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class="line">        Season1 winter = Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        <span class="comment">//如果没objName的枚举类对象，则抛异常：IllegalArgumentException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Season1 winter = Season1.valueOf(&quot;WINTER1&quot;);</span></span><br><span class="line">        System.out.println(winter);</span><br></pre></td></tr></table></figure><ol start="5"><li><h3 id="使用enum定义枚举类之后，如何让枚举类对象分别实现接口："><a href="#使用enum定义枚举类之后，如何让枚举类对象分别实现接口：" class="headerlink" title="使用enum定义枚举类之后，如何让枚举类对象分别实现接口："></a>使用enum定义枚举类之后，如何让枚举类对象分别实现接口：</h3></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> <span class="keyword">implements</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在哪里？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁夏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天不回来&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-注解的使用"><a href="#2-注解的使用" class="headerlink" title="2.注解的使用"></a>2.注解的使用</h2><h3 id="1-注解的理解"><a href="#1-注解的理解" class="headerlink" title="1.注解的理解"></a>1.注解的理解</h3><p>  ① jdk 5.0 新增的功能<br>  ② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,</p><ul><li> 程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。</li></ul><p>  ③ 在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android</p><ul><li>中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗</li><li>代码和XML配置等。</li></ul><p>  框架 = 注解 + 反射机制 + 设计模式</p><h3 id="3-注解的使用示例"><a href="#3-注解的使用示例" class="headerlink" title="3.注解的使用示例"></a>3.注解的使用示例</h3><ul><li><p>示例一：生成文档相关的注解</p></li><li><p>示例二：在编译时进行格式检查(JDK内置的个基本注解)<br>  @Override: 限定重写父类方法, 该注解只能用于方法<br>  @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的择<br>  @SuppressWarnings: 抑制编译器警告</p></li><li><p>示例：跟踪代码依赖性，实现替代配置文件功能</p></li></ul><ol start="3"><li>如何自定义注解：参照@SuppressWarnings定义</li></ol><ul><li>① 注解声明为：@interface</li><li>② 内部定义成员，通常使用value表示</li><li>③ 可以指定成员的默认值，使用default定义</li><li>④ 如果自定义注解没成员，表明是一个标识作用。</li></ul><p>  说明：<br>  如果注解有成员，在使用注解时，需要指明成员的值。<br>  自定义注解必须配上注解的信息处理流程(使用反射)才意义。<br>  自定义注解通过都会指明两个元注解：Retention、Target</p><p>  代码举例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Repeatable(MyAnnotations.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-元注解-：对现有的注解进行解释说明的注解。"><a href="#4-元注解-：对现有的注解进行解释说明的注解。" class="headerlink" title="4.元注解 ：对现有的注解进行解释说明的注解。"></a>4.元注解 ：对现有的注解进行解释说明的注解。</h3><h4 id="jdk-提供的4种元注解："><a href="#jdk-提供的4种元注解：" class="headerlink" title="jdk 提供的4种元注解："></a>jdk 提供的4种元注解：</h4><ul><li><p>Retention：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为\RUNTIME</p><pre><code>只声明为RUNTIME生命周期的注解，才能通过反射获取。</code></pre></li><li><p>Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</p></li><li><p><em><strong><strong><strong>出现的频率较低</strong></strong></strong></em></p></li><li><p>Documented:表示所修饰的注解在被javadoc解析时，保留下来。</p></li><li><p>Inherited:被它修饰的 Annotation 将具继承性。</p></li><li><p>–&gt;类比：元数据的概念：String name = “Tom”;</p></li></ul><h3 id="5-如何获取注解信息-通过发射来进行获取、调用。"><a href="#5-如何获取注解信息-通过发射来进行获取、调用。" class="headerlink" title="5.如何获取注解信息:通过发射来进行获取、调用。"></a>5.如何获取注解信息:通过发射来进行获取、调用。</h3><p>  前提：要求此注解的元注解Retention中声明的生命周期状态为：RUNTIME.</p><h3 id="6-JDK8中注解的新特性：可重复注解、类型注解"><a href="#6-JDK8中注解的新特性：可重复注解、类型注解" class="headerlink" title="6.JDK8中注解的新特性：可重复注解、类型注解"></a>6.JDK8中注解的新特性：可重复注解、类型注解</h3><h4 id="6-1-可重复注解："><a href="#6-1-可重复注解：" class="headerlink" title="6.1 可重复注解："></a>6.1 可重复注解：</h4><ol><li>在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</li><li> MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</li></ol><h4 id="6-2-类型注解："><a href="#6-2-类型注解：" class="headerlink" title="6.2 类型注解："></a>6.2 类型注解：</h4><ol><li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明。</li><li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</li></ol><!-- more -->]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;枚举类和注解&quot;&gt;&lt;a href=&quot;#枚举类和注解&quot; class=&quot;headerlink&quot; title=&quot;枚举类和注解&quot;&gt;&lt;/a&gt;枚举类和注解&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-枚举类的使用&quot;&gt;&lt;a href=&quot;#1-枚举类的使用&quot; class=&quot;headerlink&quot; title=&quot;1.枚举类的使用&quot;&gt;&lt;/a&gt;1.枚举类的使用&lt;/h2&gt;&lt;h3 id=&quot;1-枚举类的说明：&quot;&gt;&lt;a href=&quot;#1-枚举类的说明：&quot; class=&quot;headerlink&quot; title=&quot;1.枚举类的说明：&quot;&gt;&lt;/a&gt;1.枚举类的说明：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类&lt;/li&gt;
&lt;li&gt;2.当需要定义一组常量时，强烈建议使用枚举类&lt;/li&gt;
&lt;li&gt;3.如果枚举类中只一个对象，则可以作为单例模式的实现方式。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="java基础-高级" scheme="https://yangmour.github.io/tags/java%E5%9F%BA%E7%A1%80-%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>2-java常用类-shangguigu15day</title>
    <link href="https://yangmour.github.io/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/2-java%E5%B8%B8%E7%94%A8%E7%B1%BB-shangguigu15day/"/>
    <id>https://yangmour.github.io/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/2-java%E5%B8%B8%E7%94%A8%E7%B1%BB-shangguigu15day/</id>
    <published>2021-12-21T10:05:11.000Z</published>
    <updated>2021-12-23T13:16:31.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><p>[TOC]</p><h2 id="1-java-lang-String类的使用"><a href="#1-java-lang-String类的使用" class="headerlink" title="1.java.lang.String类的使用"></a>1.java.lang.String类的使用</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><h4 id="1-String-字符串，使用一对””引起来表示。"><a href="#1-String-字符串，使用一对””引起来表示。" class="headerlink" title="1.String:字符串，使用一对””引起来表示。"></a>1.String:字符串，使用一对””引起来表示。</h4><ol><li>String声明为final的，不可被继承</li><li>String实现了Serializable接口：表示字符串是支持序列化的。<pre><code>    实现了Comparable接口：表示String可以比较大小</code></pre></li><li>String内部定义了final char[] value用于存储字符串数据</li><li>通过字面量的方式（区别于new给一个字符串赋值，此时的字符串值声明在字符串常量池中)。</li><li>字符串常量池中是不会存储相同内容(使用String类的equals()比较，返回true)的字符串的。</li></ol><span id="more"></span><h4 id="2-String的不可变性"><a href="#2-String的不可变性" class="headerlink" title="2.String的不可变性"></a>2.String的不可变性</h4><h5 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1 说明"></a>2.1 说明</h5><ol><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当对现的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li></ol><h5 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2.2 代码举例"></a>2.2 代码举例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;abc&quot;</span>;<span class="comment">//字面量的定义方式</span></span><br><span class="line">String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//比较s1和s2的地址值</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1);<span class="comment">//hello</span></span><br><span class="line">System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s3 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">System.out.println(s3);<span class="comment">//abcdef</span></span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String s5 = s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">System.out.println(s5);<span class="comment">//mbc</span></span><br></pre></td></tr></table></figure><h5 id="2-3-图示"><a href="#2-3-图示" class="headerlink" title="2.3 图示"></a>2.3 图示</h5><p><img src="https://image.3001.net/images/20211221/16400896452720.png" alt="image-20211221202717745"></p><h4 id="3-String实例化的不同方式"><a href="#3-String实例化的不同方式" class="headerlink" title="3.String实例化的不同方式"></a>3.String实例化的不同方式</h4><h5 id="3-1-方式说明"><a href="#3-1-方式说明" class="headerlink" title="3.1 方式说明"></a>3.1 方式说明</h5><p>方式一：通过字面量定义的方式<br>方式二：通过new + 构造器的方式</p><h5 id="3-2-代码举例"><a href="#3-2-代码举例" class="headerlink" title="3.2 代码举例"></a>3.2 代码举例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span></span><br><span class="line">String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line"><span class="comment">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="3-3-面试题"><a href="#3-3-面试题" class="headerlink" title="3.3 面试题"></a>3.3 面试题</h5><p>String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？<br>两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p><h5 id="3-4-图示"><a href="#3-4-图示" class="headerlink" title="3.4 图示"></a>3.4 图示</h5><p><img src="https://image.3001.net/images/20211221/1640089836146.png" alt="image-20211221203032088"></p><ol start="4"><li><h4 id="字符串拼接方式赋值的对比"><a href="#字符串拼接方式赋值的对比" class="headerlink" title="字符串拼接方式赋值的对比"></a>字符串拼接方式赋值的对比</h4></li></ol><h5 id="4-1-说明"><a href="#4-1-说明" class="headerlink" title="4.1 说明"></a>4.1 说明</h5><p>  1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>  2.只要其中一个是变量，结果就在堆中。<br>  3.如果拼接的结果调用intern()方法，返回值就在常量池中</p><h5 id="4-2-代码举例"><a href="#4-2-代码举例" class="headerlink" title="4.2 代码举例"></a>4.2 代码举例</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">String s4 = <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">String s5 = s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">String s6 = <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">String s7 = s1 + s2;</span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String s8 = s6.intern();<span class="comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span></span><br><span class="line">System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">****************************</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">String s3 = s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String s4 = <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4:常量</span></span><br><span class="line">String s5 = s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">System.out.println(s1 == s5);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="5-常用方法："><a href="#5-常用方法：" class="headerlink" title="5.常用方法："></a>5.常用方法：</h4><ul><li>int length()：返回字符串的长度： return value.length</li><li>char charAt(int index)： 返回某索引处的字符return value[index]</li><li>boolean isEmpty()：判断是否是空字符串：return value.length == 0</li><li>String toLowerCase()：使用默认语言环境，将 String 中的所字符转换为小写</li><li>String toUpperCase()：使用默认语言环境，将 String 中的所字符转换为大写</li><li>String trim()：返回字符串的副本，忽略前导空白和尾部空白</li><li>boolean equals(Object obj)：比较字符串的内容是否相同</li><li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</li><li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li><li>int compareTo(String anotherString)：比较两个字符串的大小</li><li>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li><li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</li><li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</li><li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li><li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</li><li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</li><li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</li></ul><p>注：indexOf和lastIndexOf方法如果未找到都是返回-1</p><h6 id="替换："><a href="#替换：" class="headerlink" title="替换："></a>替换：</h6><ul><li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。</li><li>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。</li><li>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所匹配给定的正则表达式的子字符串。</li><li>String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li></ul><h6 id="匹配"><a href="#匹配" class="headerlink" title="匹配:"></a>匹配:</h6><ul><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li></ul><h6 id="切片："><a href="#切片：" class="headerlink" title="切片："></a>切片：</h6><ul><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ul><ol start="6"><li><h4 id="String与其它结构的转换"><a href="#String与其它结构的转换" class="headerlink" title="String与其它结构的转换"></a>String与其它结构的转换</h4><h5 id="6-1-与基本数据类型、包装类之间的转换"><a href="#6-1-与基本数据类型、包装类之间的转换" class="headerlink" title="6.1 与基本数据类型、包装类之间的转换"></a>6.1 与基本数据类型、包装类之间的转换</h5><p> String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)<br> 基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">     String str1 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//        int num = (int)str1;//错误的</span></span><br><span class="line">     <span class="keyword">int</span> num = Integer.parseInt(str1);</span><br><span class="line"></span><br><span class="line">     String str2 = String.valueOf(num);<span class="comment">//&quot;123&quot;</span></span><br><span class="line">     String str3 = num + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">     System.out.println(str1 == str3);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="6-2-与字符数组之间的转换"><a href="#6-2-与字符数组之间的转换" class="headerlink" title="6.2 与字符数组之间的转换"></a>6.2 与字符数组之间的转换</h5><p>String –&gt; char[]:调用String的toCharArray()<br>char[] –&gt; String:调用String的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;abc123&quot;</span>;  <span class="comment">//题目： a21cb3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">        System.out.println(charArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-与字节数组之间的转换"><a href="#6-3-与字节数组之间的转换" class="headerlink" title="6.3 与字节数组之间的转换"></a>6.3 与字节数组之间的转换</h5><p>编码：String –&gt; byte[]:调用String的getBytes()<br>解码：byte[] –&gt; String:调用String的构造器</p><p>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)<br>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂</p><p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;abc123中国&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">    System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">    System.out.println(Arrays.toString(gbks));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    String str2 = <span class="keyword">new</span> String(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">    System.out.println(str2);</span><br><span class="line">    </span><br><span class="line">    String str3 = <span class="keyword">new</span> String(gbks);</span><br><span class="line">    System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String str4 = <span class="keyword">new</span> String(gbks, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    System.out.println(str4);<span class="comment">//没出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-4-与StringBuffer、StringBuilder之间的转换"><a href="#6-4-与StringBuffer、StringBuilder之间的转换" class="headerlink" title="6.4 与StringBuffer、StringBuilder之间的转换"></a>6.4 与StringBuffer、StringBuilder之间的转换</h5><p>String –&gt;StringBuffer、StringBuilder:调用StringBuffer、StringBuilder构造器<br>StringBuffer、StringBuilder –&gt;String:①调用String构造器；②StringBuffer、StringBuilder的toString()</p><ol start="7"><li><h6 id="JVM中字符串常量池存放位置说明："><a href="#JVM中字符串常量池存放位置说明：" class="headerlink" title="JVM中字符串常量池存放位置说明："></a>JVM中字符串常量池存放位置说明：</h6></li></ol><p>  jdk 1.6 (jdk 6.0 ,java 6.0):字符串常量池存储在方法区（永久区）<br>  jdk 1.7:字符串常量池存储在堆空间<br>  jdk 1.8:字符串常量池存储在方法区（元空间）</p><ol start="8"><li><h6 id="常见算法题目的考查："><a href="#常见算法题目的考查：" class="headerlink" title="常见算法题目的考查："></a>常见算法题目的考查：</h6></li><li><p>模拟一个trim方法，去除字符串两端的空格。</p></li><li><p>将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”</p></li><li><p>获取一个字符串在另一个字符串中出现的次数。</p><pre><code>  比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</code></pre></li><li><p>获取两个字符串中最大相同子串。比如：<br>   str1 = “abcwerthelloyuiodef“;str2 = “cvhellobnm”<br>   提示：将短的那个串进行长度依次递减的子串与较长的串比较。</p></li><li><p>对字符串中字符进行自然顺序排序。<br>提示：<br>1.字符串变成字符数组。<br>2.对数组排序，择，冒泡，Arrays.sort();<br>3.将排序后的数组变成字符串。</p></li></ol><h2 id="2-JDK8之前的日期时间APi"><a href="#2-JDK8之前的日期时间APi" class="headerlink" title="2.JDK8之前的日期时间APi"></a>2.JDK8之前的日期时间APi</h2><h3 id="1-获取系统当前时间：System类中的currentTimeMillis"><a href="#1-获取系统当前时间：System类中的currentTimeMillis" class="headerlink" title="1.获取系统当前时间：System类中的currentTimeMillis()"></a>1.获取系统当前时间：System类中的currentTimeMillis()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span></span><br><span class="line"><span class="comment">//称为时间戳</span></span><br><span class="line">System.out.println(time);</span><br></pre></td></tr></table></figure><h3 id="2-java-util-Date类与java-sql-Date类"><a href="#2-java-util-Date类与java-sql-Date类" class="headerlink" title="2.java.util.Date类与java.sql.Date类"></a>2.java.util.Date类与java.sql.Date类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> java.util.Date类</span></span><br><span class="line"><span class="comment">        |---java.sql.Date类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 1.两个构造器的使用</span></span><br><span class="line"><span class="comment">     &gt;构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line"><span class="comment">     &gt;构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line"><span class="comment"> 2.两个方法的使用</span></span><br><span class="line"><span class="comment">     &gt;toString():显示当前的年、月、日、时、分、秒</span></span><br><span class="line"><span class="comment">     &gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3. java.sql.Date对应着数据库中的日期类型的变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &gt;如何实例化</span></span><br><span class="line"><span class="comment">    &gt;如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="comment">    &gt;*/</span></span><br><span class="line">    &gt; <span class="meta">@Test</span></span><br><span class="line">    &gt; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &gt;<span class="comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">    &gt;Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">    &gt;System.out.println(date1.toString());<span class="comment">//Sat Feb 16 16:35:31 GMT+08:00 2019</span></span><br><span class="line"></span><br><span class="line">    System.out.println(date1.getTime());<span class="comment">//1550306204104</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">    Date date2 = <span class="keyword">new</span> Date(<span class="number">155030620410L</span>);</span><br><span class="line">    System.out.println(date2.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">    java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">35235325345L</span>);</span><br><span class="line">    System.out.println(date3);<span class="comment">//1971-02-13</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">    <span class="comment">//情况一：</span></span><br><span class="line">    <span class="comment">//        Date date4 = new java.sql.Date(2343243242323L);</span></span><br><span class="line">    <span class="comment">//        java.sql.Date date5 = (java.sql.Date) date4;</span></span><br><span class="line">    <span class="comment">//情况二：</span></span><br><span class="line">    Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line">    java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-java-text-SimpleDataFormat类"><a href="#3-java-text-SimpleDataFormat类" class="headerlink" title="3.java.text.SimpleDataFormat类"></a>3.java.text.SimpleDataFormat类</h3><h4 id="SimpleDateFormat对日期Date类的格式化和解析"><a href="#SimpleDateFormat对日期Date类的格式化和解析" class="headerlink" title="SimpleDateFormat对日期Date类的格式化和解析"></a>SimpleDateFormat对日期Date类的格式化和解析</h4><p>1.两个操作：<br>1.1 格式化：日期 —&gt;字符串<br>1.2 解析：格式化的逆过程，字符串 —&gt; 日期</p><p>2.SimpleDateFormat的实例化:new + 构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*************照指定的方式格式化和解析：调用带参的构造器*****************</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;);</span></span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String format1 = sdf1.format(date);</span><br><span class="line">        System.out.println(format1);<span class="comment">//2019-02-18 11:48:27</span></span><br><span class="line">        <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">        <span class="comment">//否则，抛异常</span></span><br><span class="line">        Date date2 = sdf1.parse(<span class="string">&quot;2020-02-18 11:48:27&quot;</span>);</span><br><span class="line">        System.out.println(date2);</span><br></pre></td></tr></table></figure><h4 id="小练习："><a href="#小练习：" class="headerlink" title="小练习："></a>小练习：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    练习一：字符串&quot;2020-09-08&quot;转换为java.sql.Date</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    练习二：&quot;天打渔两天晒网&quot;   1990-01-01  xxxx-xx-xx 打渔？晒网？</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    举例：2020-09-08 ？ 总天数</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    总天数 % 5 == 1,2,3 : 打渔</span></span><br><span class="line"><span class="comment">    总天数 % 5 == 4,0 : 晒网</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    总天数的计算？</span></span><br><span class="line"><span class="comment">    方式一：( date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24) + 1</span></span><br><span class="line"><span class="comment">    方式二：1990-01-01  --&gt; 2019-12-31  +  2020-01-01 --&gt;2020-09-08</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExer</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        String birth = <span class="string">&quot;2020-09-08&quot;</span>;</span><br><span class="line">    </span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date = sdf1.parse(birth);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(date);</span></span><br><span class="line"></span><br><span class="line">        java.sql.Date birthDate = <span class="keyword">new</span> java.sql.Date(date.getTime());</span><br><span class="line">        System.out.println(birthDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-Calendar类：日历类、抽象类"><a href="#4-Calendar类：日历类、抽象类" class="headerlink" title="4.Calendar类：日历类、抽象类"></a>4.Calendar类：日历类、抽象类</h3><p>​        //1.实例化<br>​        //方式一：创建其子类（GregorianCalendar的对象<br>​        //方式二：调用其静态方法getInstance()<br>​        Calendar calendar = Calendar.getInstance();<br>//        System.out.println(calendar.getClass());</p><pre><code>    //2.常用方法    //get()    int days = calendar.get(Calendar.DAY_OF_MONTH);    System.out.println(days);    System.out.println(calendar.get(Calendar.DAY_OF_YEAR));    //set()    //calendar可变性     calendar.set(Calendar.DAY_OF_MONTH,22);    days = calendar.get(Calendar.DAY_OF_MONTH);    System.out.println(days);    //add()    calendar.add(Calendar.DAY_OF_MONTH,-3);    days = calendar.get(Calendar.DAY_OF_MONTH);    System.out.println(days);    //getTime():日历类---&gt; Date    Date date = calendar.getTime();    System.out.println(date);    //setTime():Date ---&gt; 日历类    Date date1 = new Date();    calendar.setTime(date1);    days = calendar.get(Calendar.DAY_OF_MONTH);    System.out.println(days);</code></pre><h2 id="3-JDK8中新日期时间API"><a href="#3-JDK8中新日期时间API" class="headerlink" title="3.JDK8中新日期时间API"></a>3.JDK8中新日期时间API</h2><h4 id="1-日期时间API的迭代："><a href="#1-日期时间API的迭代：" class="headerlink" title="1.日期时间API的迭代："></a>1.日期时间API的迭代：</h4><p>第一代：jdk 1.0 Date类<br>第二代：jdk 1.1 Calendar类，一定程度上替换Date类<br>第三代：jdk 1.8 提出了新的一套API</p><h4 id="2-前两代存在的问题举例："><a href="#2-前两代存在的问题举例：" class="headerlink" title="2.前两代存在的问题举例："></a>2.前两代存在的问题举例：</h4><p>可变性：像日期和时间这样的类应该是不可变的。<br>偏移性：Date中的年份是从1900开始的，而月份都从0开始。<br>格式化：格式化只对Date用，Calendar则不行。<br>此外，它们也不是线程安全的；不能处理闰秒等。</p><h4 id="3-java-8-中新的日期时间API涉及到的包"><a href="#3-java-8-中新的日期时间API涉及到的包" class="headerlink" title="3.java 8 中新的日期时间API涉及到的包"></a>3.java 8 中新的日期时间API涉及到的包</h4><p><img src="https://image.3001.net/images/20211221/1640091141866.png" alt="image-20211221205214647"></p><h4 id="4-本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime"><a href="#4-本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime" class="headerlink" title="4.本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime"></a>4.本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime</h4><h5 id="4-1-说明："><a href="#4-1-说明：" class="headerlink" title="4.1 说明："></a>4.1 说明：</h5><p>① 分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。<br>② LocalDateTime相较于LocalDate、LocalTime，使用频率要高<br>③ 类似于Calendar</p><h5 id="4-2-常用方法："><a href="#4-2-常用方法：" class="headerlink" title="4.2 常用方法："></a>4.2 常用方法：</h5><p><img src="https://image.3001.net/images/20211221/16400911524465.png" alt="image-20211221205229584"></p><h4 id="5-时间点：Instant"><a href="#5-时间点：Instant" class="headerlink" title="5.时间点：Instant"></a>5.时间点：Instant</h4><h5 id="5-1-说明："><a href="#5-1-说明：" class="headerlink" title="5.1 说明："></a>5.1 说明：</h5><p>① 时间线上的一个瞬时点。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC开始的秒数。）<br>② 类似于 java.util.Date类</p><h5 id="5-2-常用方法："><a href="#5-2-常用方法：" class="headerlink" title="5.2 常用方法："></a>5.2 常用方法：</h5><p><img src="https://image.3001.net/images/20211221/16400911649876.png" alt="image-20211221205241493"></p><h4 id="6-日期时间格式化类：DateTimeFormatter"><a href="#6-日期时间格式化类：DateTimeFormatter" class="headerlink" title="6.日期时间格式化类：DateTimeFormatter"></a>6.日期时间格式化类：DateTimeFormatter</h4><h5 id="6-1-说明："><a href="#6-1-说明：" class="headerlink" title="6.1 说明："></a>6.1 说明：</h5><p>① 格式化或解析日期、时间<br>② 类似于SimpleDateFormat</p><h5 id="6-2-常用方法："><a href="#6-2-常用方法：" class="headerlink" title="6.2 常用方法："></a>6.2 常用方法：</h5><h6 id="①-实例化方式："><a href="#①-实例化方式：" class="headerlink" title="① 实例化方式："></a>① 实例化方式：</h6><p>预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME<br>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)<br>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p><h6 id="②-常用方法："><a href="#②-常用方法：" class="headerlink" title="② 常用方法："></a>② 常用方法：</h6><p><img src="https://image.3001.net/images/20211221/16400911865592.png" alt="image-20211221205303500"></p><p>特别的：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)<br>//  重点：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line">String str4 = formatter3.format(LocalDateTime.now());</span><br><span class="line">System.out.println(str4);<span class="comment">//2019-02-18 03:52:09</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析</span></span><br><span class="line">TemporalAccessor accessor = formatter3.parse(<span class="string">&quot;2019-02-18 03:52:09&quot;</span>);</span><br><span class="line">System.out.println(accessor);</span><br></pre></td></tr></table></figure><h4 id="7-其它API的使用-（不讲）"><a href="#7-其它API的使用-（不讲）" class="headerlink" title="7.其它API的使用 （不讲）"></a>7.其它API的使用 （不讲）</h4><h5 id="7-1-带时区的日期时间：ZonedDateTime-ZoneId"><a href="#7-1-带时区的日期时间：ZonedDateTime-ZoneId" class="headerlink" title="7.1 带时区的日期时间：ZonedDateTime / ZoneId"></a>7.1 带时区的日期时间：ZonedDateTime / ZoneId</h5><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ZoneId:类中包含了所的时区信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//getAvailableZoneIds():获取所的ZoneId</span></span><br><span class="line">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line"><span class="keyword">for</span>(String s : zoneIds)&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取“Asia/Tokyo”时区对应的时间</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>));</span><br><span class="line">System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ZonedDateTime:带时区的日期时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//now():获取本时区的ZonedDateTime对象</span></span><br><span class="line">ZonedDateTime zonedDateTime = ZonedDateTime.now();</span><br><span class="line">System.out.println(zonedDateTime);</span><br><span class="line"><span class="comment">//now(ZoneId id):获取指定时区的ZonedDateTime对象</span></span><br><span class="line">ZonedDateTime zonedDateTime1 = ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>));</span><br><span class="line">System.out.println(zonedDateTime1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-2-时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准"><a href="#7-2-时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准" class="headerlink" title="7.2 时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准"></a>7.2 时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准</h5><p><img src="https://image.3001.net/images/20211221/16400912304602.png" alt="image-20211221205346496"></p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">LocalTime localTime1 = LocalTime.of(<span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line"><span class="comment">//between():静态方法，返回Duration对象，表示两个时间的间隔</span></span><br><span class="line">Duration duration = Duration.between(localTime1, localTime);</span><br><span class="line">System.out.println(duration);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(duration.getSeconds());</span><br><span class="line">System.out.println(duration.getNano());</span><br><span class="line"></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">Duration duration1 = Duration.between(localDateTime1, localDateTime);</span><br><span class="line">System.out.println(duration1.toDays());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##### </span><br></pre></td></tr></table></figure><h5 id="7-3-日期间隔：Period-–用于计算两个“日期”间隔，以年、月、日衡量"><a href="#7-3-日期间隔：Period-–用于计算两个“日期”间隔，以年、月、日衡量" class="headerlink" title="7.3 日期间隔：Period –用于计算两个“日期”间隔，以年、月、日衡量"></a>7.3 日期间隔：Period –用于计算两个“日期”间隔，以年、月、日衡量</h5><p><img src="https://image.3001.net/images/20211221/16400912474001.png" alt="image-20211221205404198"></p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">LocalDate localDate1 = LocalDate.of(<span class="number">2028</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Period period = Period.between(localDate, localDate1);</span><br><span class="line">System.out.println(period);</span><br><span class="line"></span><br><span class="line">System.out.println(period.getYears());</span><br><span class="line">System.out.println(period.getMonths());</span><br><span class="line">System.out.println(period.getDays());</span><br><span class="line"></span><br><span class="line">Period period1 = period.withYears(<span class="number">2</span>);</span><br><span class="line">System.out.println(period1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##### </span><br></pre></td></tr></table></figure><h5 id="7-4-日期时间校正器：TemporalAdjuster"><a href="#7-4-日期时间校正器：TemporalAdjuster" class="headerlink" title="7.4 日期时间校正器：TemporalAdjuster"></a>7.4 日期时间校正器：TemporalAdjuster</h5><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//获取当前日期的下一个周日是哪天？</span></span><br><span class="line">TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.SUNDAY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now().with(temporalAdjuster);</span><br><span class="line">System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取下一个工作日是哪天？</span></span><br><span class="line">LocalDate localDate = LocalDate.now().with(<span class="keyword">new</span> TemporalAdjuster()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Temporal <span class="title">adjustInto</span><span class="params">(Temporal temporal)</span> </span>&#123;</span><br><span class="line">LocalDate date = (LocalDate)temporal;</span><br><span class="line"><span class="keyword">if</span>(date.getDayOfWeek().equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line"><span class="keyword">return</span> date.plusDays(<span class="number">3</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(date.getDayOfWeek().equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line"><span class="keyword">return</span> date.plusDays(<span class="number">2</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> date.plusDays(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;下一个工作日是：&quot;</span> + localDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Java比较器"><a href="#3-Java比较器" class="headerlink" title="3.Java比较器"></a>3.Java比较器</h2><h3 id="1-Java比较器的使用背景："><a href="#1-Java比较器的使用背景：" class="headerlink" title="1.Java比较器的使用背景："></a>1.Java比较器的使用背景：</h3><p>Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的<br>但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。<br>如何实现？使用两个接口中的任何一个：Comparable 或 Comparator</p><h3 id="2-自然排序：使用Comparable接口"><a href="#2-自然排序：使用Comparable接口" class="headerlink" title="2.自然排序：使用Comparable接口"></a>2.自然排序：使用Comparable接口</h3><h4 id="2-1-说明-1"><a href="#2-1-说明-1" class="headerlink" title="2.1 说明"></a>2.1 说明</h4><ol><li>像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。</li><li>像String、包装类重写compareTo()方法以后，进行了从小到大的排列</li><li>重写compareTo(obj)的规则：<br>如果当前对象this大于形参对象obj，则返回正整数，<br>如果当前对象this小于形参对象obj，则返回负整数，<br>如果当前对象this等于形参对象obj，则返回零。</li><li>对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序</li></ol><h4 id="2-2-自定义类代码举例："><a href="#2-2-自定义类代码举例：" class="headerlink" title="2.2 自定义类代码举例："></a>2.2 自定义类代码举例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span>  <span class="title">Comparable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指明商品比较大小的方式:照价格从低到高排序,再照产品名称从高到低排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;**************&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">            Goods goods = (Goods)o;</span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.price &gt; goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.price &lt; goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line">               <span class="keyword">return</span> -<span class="keyword">this</span>.name.compareTo(goods.name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//           return Double.compare(this.price,goods.price);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// getter、setter、toString()、构造器：省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-定制排序：使用Comparator接口"><a href="#3-定制排序：使用Comparator接口" class="headerlink" title="3.定制排序：使用Comparator接口"></a>3.定制排序：使用Comparator接口</h3><h4 id="3-1-说明"><a href="#3-1-说明" class="headerlink" title="3.1 说明"></a>3.1 说明</h4><ol><li>背景：<br>当元素的类型没实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序</li><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：<br>如果方法返回正整数，则表示o1大于o2；<br>如果返回0，表示相等；<br>返回负整数，表示o1小于o2。</li></ol><h4 id="3-2-代码举例："><a href="#3-2-代码举例：" class="headerlink" title="3.2 代码举例："></a>3.2 代码举例：</h4><p>Comparator com = new Comparator() {<br>    //指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Goods &amp;&amp; o2 <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">            Goods g1 = (Goods)o1;</span><br><span class="line">            Goods g2 = (Goods)o2;</span><br><span class="line">            <span class="keyword">if</span>(g1.getName().equals(g2.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> -Double.compare(g1.getPrice(),g2.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(goods,com);</span><br><span class="line">Collections.sort(coll,com);</span><br><span class="line"><span class="keyword">new</span> TreeSet(com);</span><br></pre></td></tr></table></figure><h3 id="4-两种排序方式对比"><a href="#4-两种排序方式对比" class="headerlink" title="4.两种排序方式对比"></a>4.两种排序方式对比</h3><ul><li>   Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</li><li>   Comparator接口属于临时性的比较。</li></ul><h2 id="4-其他类"><a href="#4-其他类" class="headerlink" title="4.其他类"></a>4.其他类</h2><h3 id="1-System类"><a href="#1-System类" class="headerlink" title="1.System类"></a>1.System类</h3><ul><li>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</li><li>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</li><li>方法：<ul><li>native long currentTimeMillis()</li><li>void exit(int status)</li><li>void gc()</li><li>String getProperty(String key)</li></ul></li></ul><h3 id="2-Math类"><a href="#2-Math类" class="headerlink" title="2.Math类"></a>2.Math类</h3><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p><h3 id="3-BigInteger类、BigDecimal类"><a href="#3-BigInteger类、BigDecimal类" class="headerlink" title="3.BigInteger类、BigDecimal类"></a>3.BigInteger类、BigDecimal类</h3><ol><li>说明：<br>① java.math包的BigInteger可以表示不可变的任意精度的整数。<br>② 要求数字精度比较高，用到java.math.BigDecimal类</li><li>代码举例：</li></ol><p><img src="https://image.3001.net/images/20211221/16400916593611.png" alt="image-20211221210055084"></p><!-- more -->]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;常用类&quot;&gt;&lt;a href=&quot;#常用类&quot; class=&quot;headerlink&quot; title=&quot;常用类&quot;&gt;&lt;/a&gt;常用类&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-java-lang-String类的使用&quot;&gt;&lt;a href=&quot;#1-java-lang-String类的使用&quot; class=&quot;headerlink&quot; title=&quot;1.java.lang.String类的使用&quot;&gt;&lt;/a&gt;1.java.lang.String类的使用&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;h4 id=&quot;1-String-字符串，使用一对””引起来表示。&quot;&gt;&lt;a href=&quot;#1-String-字符串，使用一对””引起来表示。&quot; class=&quot;headerlink&quot; title=&quot;1.String:字符串，使用一对””引起来表示。&quot;&gt;&lt;/a&gt;1.String:字符串，使用一对””引起来表示。&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;String声明为final的，不可被继承&lt;/li&gt;
&lt;li&gt;String实现了Serializable接口：表示字符串是支持序列化的。&lt;pre&gt;&lt;code&gt;    实现了Comparable接口：表示String可以比较大小
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;String内部定义了final char[] value用于存储字符串数据&lt;/li&gt;
&lt;li&gt;通过字面量的方式（区别于new给一个字符串赋值，此时的字符串值声明在字符串常量池中)。&lt;/li&gt;
&lt;li&gt;字符串常量池中是不会存储相同内容(使用String类的equals()比较，返回true)的字符串的。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="java基础-高级" scheme="https://yangmour.github.io/tags/java%E5%9F%BA%E7%A1%80-%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>1.多线性(shangguigu14day)</title>
    <link href="https://yangmour.github.io/2021/12/07/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/1-%E5%A4%9A%E7%BA%BF%E6%80%A7-shangguigu14day/"/>
    <id>https://yangmour.github.io/2021/12/07/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/1-%E5%A4%9A%E7%BA%BF%E6%80%A7-shangguigu14day/</id>
    <published>2021-12-07T07:26:17.000Z</published>
    <updated>2021-12-23T13:16:18.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>[TOC]</p><h2 id="一-程序、进程、线程的理解"><a href="#一-程序、进程、线程的理解" class="headerlink" title="一.程序、进程、线程的理解"></a>一.程序、进程、线程的理解</h2><h4 id="1-程序-programm"><a href="#1-程序-programm" class="headerlink" title="1.程序(programm)"></a>1.程序(programm)</h4><ul><li>概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</li></ul><h4 id="2-进程-process"><a href="#2-进程-process" class="headerlink" title="2.进程(process)"></a>2.进程(process)</h4><ul><li>概念：程序的一次执行过程，或是正在运行的一个程序。<br>说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li></ul><h4 id="3-线程-thread"><a href="#3-线程-thread" class="headerlink" title="3.线程(thread)"></a>3.线程(thread)</h4><ul><li>概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。<br>说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。<span id="more"></span></li></ul><p><img src="https://image.3001.net/images/20211210/16391489566127.png" alt="image-20211210230852264"></p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><h5 id="内存结构："><a href="#内存结构：" class="headerlink" title="内存结构："></a>内存结构：</h5><p><img src="https://image.3001.net/images/20211210/16391489687557.png" alt="image-20211210230904714"></p><p>进程可以细化为多个线程。</p><p>每个线程，拥有自己独立的：栈、程序计数器<br>多个线程，共享同一个进程中的结构：方法区、堆。</p><h2 id="二-并行与并发"><a href="#二-并行与并发" class="headerlink" title="二.并行与并发"></a>二.并行与并发</h2><h4 id="1-单核CPU与多核CPU的理解"><a href="#1-单核CPU与多核CPU的理解" class="headerlink" title="1.单核CPU与多核CPU的理解"></a>1.单核CPU与多核CPU的理解</h4><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费。）但是因为CPU时间单元特别短，因此感觉不出来。<br>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</li><li>一个Java应用程序java.exe，其实至少三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li></ul><h4 id="2-并行与并发的理解"><a href="#2-并行与并发的理解" class="headerlink" title="2.并行与并发的理解"></a>2.并行与并发的理解</h4><ul><li>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li><li>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事</li></ul><h3 id="三-创建多线程旧版本的两种方式"><a href="#三-创建多线程旧版本的两种方式" class="headerlink" title="三.创建多线程旧版本的两种方式"></a>三.创建多线程旧版本的两种方式</h3><h4 id="方式一：继承Thread类的方式："><a href="#方式一：继承Thread类的方式：" class="headerlink" title="方式一：继承Thread类的方式："></a>方式一：继承Thread类的方式：</h4><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li><li>创建Thread类的子类的对象</li><li>通过此对象调用start()：①启动当前线程 ② 调用当前线程的run()</li></ol><h5 id="说明两个问题："><a href="#说明两个问题：" class="headerlink" title="说明两个问题："></a>说明两个问题：</h5><ol><li>问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。</li><li>问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().</li></ol><h4 id="方式二：实现Runnable接口的方式："><a href="#方式二：实现Runnable接口的方式：" class="headerlink" title="方式二：实现Runnable接口的方式："></a>方式二：实现Runnable接口的方式：</h4><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><h4 id="两种方式的对比："><a href="#两种方式的对比：" class="headerlink" title="两种方式的对比："></a>两种方式的对比：</h4><ul><li>开发中：优先选择：实现Runnable接口的方式</li><li>原因：1. 实现的方式没类的单继承性的局限性</li><li><ol start="2"><li>实现的方式更适合来处理多个线程共享数据的情况。</li></ol></li><li>联系：public class Thread implements Runnable</li><li>相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。<pre><code>    目前两种方式，要想启动线程，都是调用的Thread类中的start()。</code></pre></li></ul><h2 id="四-Thread类中的常用的方法"><a href="#四-Thread类中的常用的方法" class="headerlink" title="四.Thread类中的常用的方法"></a>四.Thread类中的常用的方法</h2><h4 id="Thread类中的常用的方法"><a href="#Thread类中的常用的方法" class="headerlink" title="Thread类中的常用的方法:"></a>Thread类中的常用的方法:</h4><ol><li>start():启动当前线程；调用当前线程的run()</li><li>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li>currentThread():静态方法，返回执行当前代码的线程</li><li>getName():获取当前线程的名字</li><li>setName():设置当前线程的名字</li><li>yield():释放当前cpu的执行权</li><li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li><li>stop():已过时。当执行此方法时，强制结束当前线程。</li><li>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li><li>isAlive():判断当前线程是否存活</li><li>线程的优先级：<ol><li>常量<ul><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5  –&gt;默认优先级</li></ul></li><li>如何获取和设置当前线程的优先级：<ul><li>getPriority():获取线程的优先级</li><li>setPriority(int p):设置线程的优先级</li></ul></li><li>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。</li></ol></li><li>线程通信：wait() /<br>notify() / notifyAll() :此三个方法定义在Object类中的。</li></ol><p>补充：线程的分类<br>一种是守护线程，一种是用户线程。</p><h2 id="五-Thread的生命周期"><a href="#五-Thread的生命周期" class="headerlink" title="五.Thread的生命周期"></a>五.Thread的生命周期</h2><h4 id="图示："><a href="#图示：" class="headerlink" title="图示："></a>图示：</h4><p><img src="https://image.3001.net/images/20211210/16391500884063.png" alt="image-20211210232808470"></p><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ol><li><p>生命周期关注两个概念：状态、相应的方法</p></li><li><p>关注：状态a–&gt;状态b:哪些方法执行了（回调方法）</p><pre><code>    某个方法主动调用：状态a--&gt;状态b</code></pre></li><li><p>阻塞：临时状态，不可以作为最终状态</p><p> 死亡：最终状态。</p></li></ol><h2 id="六-线程的同步机制"><a href="#六-线程的同步机制" class="headerlink" title="六.线程的同步机制"></a>六.线程的同步机制</h2><h3 id="1-线程安全的单例模式（懒汉式）"><a href="#1-线程安全的单例模式（懒汉式）" class="headerlink" title="1.线程安全的单例模式（懒汉式）"></a>1.线程安全的单例模式（懒汉式）</h3><p>使用同步机制将单例模式中的懒汉式改写为线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一：效率稍差</span></span><br><span class="line"><span class="comment">//        synchronized (Bank.class) &#123;</span></span><br><span class="line"><span class="comment">//            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                instance = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return instance;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：效率更高</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：写一个线程安全的单例模式。<br>饿汉式。<br>懒汉式：上面提供的。</p><h3 id="2-死锁的理解"><a href="#2-死锁的理解" class="headerlink" title="2.死锁的理解"></a>2.死锁的理解</h3><h4 id="1-死锁的理解："><a href="#1-死锁的理解：" class="headerlink" title="1.死锁的理解："></a>1.死锁的理解：</h4><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p><h4 id="2-说明："><a href="#2-说明：" class="headerlink" title="2.说明："></a>2.说明：</h4><p>出现死锁后，不会出现异常，不会出现提示，只是所的线程都处于阻塞状态，无法继续</p><p>我们使用同步时，要避免出现死锁。</p><h4 id="3-举例：代码如下"><a href="#3-举例：代码如下" class="headerlink" title="3.举例：代码如下"></a>3.举例：代码如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line"></span><br><span class="line">                s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    System.out.println(s1);</span><br><span class="line">                    System.out.println(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line"></span><br><span class="line">                s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    System.out.println(s1);</span><br><span class="line">                    System.out.println(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七-线程通信"><a href="#七-线程通信" class="headerlink" title="七.线程通信"></a>七.线程通信</h2><h3 id="1-线程通信涉及到的三个方法："><a href="#1-线程通信涉及到的三个方法：" class="headerlink" title="1.线程通信涉及到的三个方法："></a>1.线程通信涉及到的三个方法：</h3><ul><li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li><li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li><li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</li></ul><h3 id="2-说明：-1"><a href="#2-说明：-1" class="headerlink" title="2.说明："></a>2.说明：</h3><ol><li><p>wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</p></li><li><p>wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</p><p>否则，会出现IllegalMonitorStateException异常</p></li><li><p>wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</p></li></ol><h3 id="3-面试题："><a href="#3-面试题：" class="headerlink" title="3.面试题："></a>3.面试题：</h3><p>面试题：sleep() 和 wait()的异同？</p><ol><li><p>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p></li><li><p>不同点：</p><p>1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</p><p>2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</p><p>3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</p></li></ol><h3 id="4-小结释放锁的操作："><a href="#4-小结释放锁的操作：" class="headerlink" title="4.小结释放锁的操作："></a>4.小结释放锁的操作：</h3><p><img src="https://image.3001.net/images/20211210/16391512552636.png" alt="image-20211210234732182"></p><p>小结不会释放锁的操作：</p><p><img src="https://image.3001.net/images/20211210/16391512675274.png" alt="image-20211210234743439"></p><h2 id="八-JDK5-0新增线程创建的方式"><a href="#八-JDK5-0新增线程创建的方式" class="headerlink" title="八.JDK5.0新增线程创建的方式"></a>八.JDK5.0新增线程创建的方式</h2><h3 id="1-新增方式一：实现Callable接口。-—-JDK-5-0新增"><a href="#1-新增方式一：实现Callable接口。-—-JDK-5-0新增" class="headerlink" title="1.新增方式一：实现Callable接口。 — JDK 5.0新增"></a>1.新增方式一：实现Callable接口。 — JDK 5.0新增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;总和为：&quot;</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</li><li><ol><li>call()可以返回值的。</li></ol></li><li><ol start="2"><li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li></ol></li><li><ol start="3"><li>Callable是支持泛型的</li></ol></li></ul><h3 id="2-新增方式二：使用线程池"><a href="#2-新增方式二：使用线程池" class="headerlink" title="2.新增方式二：使用线程池"></a>2.新增方式二：使用线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread1());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>好处：</li><li>1.提高响应速度（减少了创建新线程的时间）</li><li>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>3.便于线程管理</li><li><pre><code> corePoolSize：核心池的大小</code></pre></li><li><pre><code> maximumPoolSize：最大线程数</code></pre></li><li><pre><code> keepAliveTime：线程没任务时最多保持多长时间后会终止</code></pre></li></ul><p>面试题：Java中多线程的创建有几种方式？四种。</p><!-- more -->]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一-程序、进程、线程的理解&quot;&gt;&lt;a href=&quot;#一-程序、进程、线程的理解&quot; class=&quot;headerlink&quot; title=&quot;一.程序、进程、线程的理解&quot;&gt;&lt;/a&gt;一.程序、进程、线程的理解&lt;/h2&gt;&lt;h4 id=&quot;1-程序-programm&quot;&gt;&lt;a href=&quot;#1-程序-programm&quot; class=&quot;headerlink&quot; title=&quot;1.程序(programm)&quot;&gt;&lt;/a&gt;1.程序(programm)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-进程-process&quot;&gt;&lt;a href=&quot;#2-进程-process&quot; class=&quot;headerlink&quot; title=&quot;2.进程(process)&quot;&gt;&lt;/a&gt;2.进程(process)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;概念：程序的一次执行过程，或是正在运行的一个程序。&lt;br&gt;说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-线程-thread&quot;&gt;&lt;a href=&quot;#3-线程-thread&quot; class=&quot;headerlink&quot; title=&quot;3.线程(thread)&quot;&gt;&lt;/a&gt;3.线程(thread)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。&lt;br&gt;说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。</summary>
    
    
    
    
    <category term="java基础-高级" scheme="https://yangmour.github.io/tags/java%E5%9F%BA%E7%A1%80-%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>1.后面需要看的(shangguigu14day)</title>
    <link href="https://yangmour.github.io/2021/12/07/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/%E5%90%8E%E9%9D%A2%E9%9C%80%E8%A6%81%E7%9C%8B%E7%9A%84/"/>
    <id>https://yangmour.github.io/2021/12/07/%E5%A4%A7%E6%95%B0%E6%8D%AE/java%E9%AB%98%E7%BA%A7/%E5%90%8E%E9%9D%A2%E9%9C%80%E8%A6%81%E7%9C%8B%E7%9A%84/</id>
    <published>2021-12-07T07:26:17.000Z</published>
    <updated>2021-12-23T13:16:51.280Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="后面需要看的"><a href="#后面需要看的" class="headerlink" title="后面需要看的"></a>后面需要看的</h1><h2 id="1-10种排序"><a href="#1-10种排序" class="headerlink" title="1.10种排序"></a>1.10种排序</h2><h3 id="2-23种设计模式"><a href="#2-23种设计模式" class="headerlink" title="2.23种设计模式"></a>2.23种设计模式</h3><span id="more"></span><ol><li><h4 id="第一种-单例模式"><a href="#第一种-单例模式" class="headerlink" title="第一种 单例模式"></a>第一种 单例模式</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式线程安全，加载类时间长，直接创建对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EagerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部创建对象，对象必须是静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EagerSingleton eagerSingleton = <span class="keyword">new</span> EagerSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EagerSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//提供公共的静态方法，返回类对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EagerSingleton <span class="title">getEagerSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> EagerSingleton.eagerSingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//讲完多线程后面补充安全的</span></span><br><span class="line"><span class="comment">//懒惰式线程不安全，用的时候才创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建类的引用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton lazySingleton = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LazySingleton <span class="title">getLazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没创建就创建对象</span></span><br><span class="line">        <span class="keyword">if</span> (lazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lazySingleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//属于单例模式，简陋</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton SINGLETON = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> <!-- more -->]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;后面需要看的&quot;&gt;&lt;a href=&quot;#后面需要看的&quot; class=&quot;headerlink&quot; title=&quot;后面需要看的&quot;&gt;&lt;/a&gt;后面需要看的&lt;/h1&gt;&lt;h2 id=&quot;1-10种排序&quot;&gt;&lt;a href=&quot;#1-10种排序&quot; class=&quot;headerlink&quot; title=&quot;1.10种排序&quot;&gt;&lt;/a&gt;1.10种排序&lt;/h2&gt;&lt;h3 id=&quot;2-23种设计模式&quot;&gt;&lt;a href=&quot;#2-23种设计模式&quot; class=&quot;headerlink&quot; title=&quot;2.23种设计模式&quot;&gt;&lt;/a&gt;2.23种设计模式&lt;/h3&gt;</summary>
    
    
    
    
    <category term="上班需要的看的" scheme="https://yangmour.github.io/tags/%E4%B8%8A%E7%8F%AD%E9%9C%80%E8%A6%81%E7%9A%84%E7%9C%8B%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yangmour.github.io/2021/11/24/hello-world/"/>
    <id>https://yangmour.github.io/2021/11/24/hello-world/</id>
    <published>2021-11-24T15:12:28.352Z</published>
    <updated>2021-12-23T13:15:51.627Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Centos7搭建hadoop分布式集群</title>
    <link href="https://yangmour.github.io/2021/11/23/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/Centos7%E6%90%AD%E5%BB%BAhadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/"/>
    <id>https://yangmour.github.io/2021/11/23/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/Centos7%E6%90%AD%E5%BB%BAhadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/</id>
    <published>2021-11-23T13:37:37.000Z</published>
    <updated>2021-12-23T13:16:06.239Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## Hadoop搭建</p><p>（其他组件安装最近更新）</p><h2 id="一-系统一些基本配置"><a href="#一-系统一些基本配置" class="headerlink" title="一.系统一些基本配置"></a>一.系统一些基本配置</h2><p>1.更改网卡配置（克隆之后把另外两台ip改了）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-ens33</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网卡里面的配置</span></span><br><span class="line"><span class="built_in">TYPE</span>=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span><span class="comment">#使用static配置</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable<span class="literal">-privacy</span></span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=<span class="number">316</span>c77f2<span class="literal">-75e6</span><span class="literal">-47cd</span><span class="literal">-ba71</span><span class="literal">-227d4ac9457f</span></span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes<span class="comment">#开机启动配置</span></span><br><span class="line"><span class="comment">#查看自己的ip和网关</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">232.111</span><span class="comment">#静态ip</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">232.2</span><span class="comment">#默认网关</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span><span class="comment">#子网掩码</span></span><br><span class="line">DNS1=<span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">DNS2=<span class="number">0.0</span>.<span class="number">0.0</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.重启网卡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201005184511853.png#pic_center" alt="重启之后这样才对"><br>3.测试网路是否连通</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201005184859975.PNG#pic_center" alt="连通的图片"><br>4.关闭防火墙：查看防火墙状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall<span class="literal">-cmd</span> -<span class="literal">-state</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201005185016527.png#pic_center" alt="防火墙状态"><br>5.临时关闭防火墙，开机还会启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201005185125196.png#pic_center" alt="临时关闭的状态"><br>6.设置开机不启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201005185246861.png#pic_center" alt="在这里插入图片描述"><br>7.常用软件安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install vim</span><br><span class="line">yum <span class="literal">-y</span> install <span class="built_in">wget</span></span><br><span class="line">yum <span class="literal">-y</span> install lrzsz</span><br><span class="line">yum <span class="literal">-y</span> install net<span class="literal">-tools</span></span><br><span class="line">yum <span class="literal">-y</span> install psmisc</span><br></pre></td></tr></table></figure><p>8.配置阿里yum源<br>   备份当前yun源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>下载阿里云的yum源配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo http://mirrors.aliyun.com/repo/Centos<span class="literal">-7</span>.repo</span><br></pre></td></tr></table></figure><p>清楚原来的缓存，构建新缓存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>9.添加节点信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">232.111</span> master</span><br><span class="line"><span class="number">192.168</span>.<span class="number">232.112</span> slave1</span><br><span class="line"><span class="number">192.168</span>.<span class="number">232.113</span> slave2</span><br></pre></td></tr></table></figure><p>10.修改hostname(修改完成后重启生效)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostname(修改完成后重启生效)</span><br><span class="line">hostnamectl <span class="built_in">set-hostname</span> master <span class="comment">#修改hostname为master</span></span><br></pre></td></tr></table></figure><p>10.配置节点之间免密访问(在一台机器上执行，再将该节点克隆两份即可，克隆之后在做两次)<br>在家目录下，执行以下代码生成密钥对，一路回车即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-P</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201006112421337.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将公钥文件写入授权文件中，并赋予权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>11.克隆虚拟机（看图    注意:虚拟机需要关闭）</p><p><img src="https://img-blog.csdnimg.cn/20201006114456639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201006114456629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201006114456622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201006115915299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201006114610698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>##注意要修改克隆的ip地址以及名称（上面步骤1和10）</p><p>12.节点间免密访问测试（任意两台节点都需要测试，第一次需要输入“yes”）<br>    <img src="https://img-blog.csdnimg.cn/20201006120052937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="二-开始安装jdk（可以去官网下载jdk）"><a href="#二-开始安装jdk（可以去官网下载jdk）" class="headerlink" title="二.开始安装jdk（可以去官网下载jdk）"></a>二.开始安装jdk（可以去官网下载jdk）</h2><ol><li><h2 id="自行选择下载jdk（点击百度网盘可以下载-jdk百度网盘链接-提取码：d4cf"><a href="#自行选择下载jdk（点击百度网盘可以下载-jdk百度网盘链接-提取码：d4cf" class="headerlink" title="自行选择下载jdk（点击百度网盘可以下载) jdk百度网盘链接 提取码：d4cf"></a>自行选择下载jdk（点击百度网盘可以下载) <a href="https://pan.baidu.com/s/1rDrzMUO04_6UHNLAiDq-OA">jdk百度网盘链接</a> 提取码：d4cf</h2></li><li>用xftp上传jdk-8u162-linux-x64.tar.gz文件到/usr/local/java(上传完解压文件,然后改名)</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br><span class="line"><span class="built_in">cd</span> /usr/local/java</span><br><span class="line">tar <span class="literal">-zxvf</span> jdk<span class="literal">-8u162</span><span class="literal">-linux</span><span class="literal">-x64</span>.tar.gz</span><br><span class="line"><span class="built_in">mv</span> jdk1.<span class="number">8.0</span>_162 jdk</span><br></pre></td></tr></table></figure><ol start="3"><li>设置环境变量</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加入下面内容</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk</span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><ol start="4"><li>执行命令使设置生效</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="5"><li>验证java是否安装成功</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-version</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201008002344331.png#pic_center" alt="在这里插入图片描述"></p><p> 6.执行以下命令，在其他两台节点安装(如果ssh没有使文件生效就去子节点再去执行一下)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给子节点创建java文件夹</span></span><br><span class="line">ssh slave1 mkdir /usr/local/java</span><br><span class="line">ssh slave2 mkdir /usr/local/java</span><br><span class="line"></span><br><span class="line"><span class="comment">#将master节点上的安装包分发到其他节点</span></span><br><span class="line">scp <span class="literal">-r</span> /usr/local/java slave1:/usr/local</span><br><span class="line">scp <span class="literal">-r</span> /usr/local/java slave2:/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment">#将master节点的配置好的环境变量覆盖到其他节点</span></span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave1:/etc/profile</span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave2:/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#使修改生效</span></span><br><span class="line">ssh slave1 source /etc/profile</span><br><span class="line">ssh slave2 source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否安装成功</span></span><br><span class="line">ssh slave1 java <span class="literal">-version</span></span><br><span class="line">ssh slave2 java <span class="literal">-version</span></span><br></pre></td></tr></table></figure><h2 id="三-Hadoop安装"><a href="#三-Hadoop安装" class="headerlink" title="三.Hadoop安装"></a>三.Hadoop安装</h2><ol><li>自行选择下载jdk（点击百度网盘可以下载) <a href="https://pan.baidu.com/s/1FqJ0AgykeHqj2o2oOh5xuA">hadoop百度网盘链接</a> 提取码：3bq4</li><li>用xftp上传hadoop文件到/opt/hadoop(上传完解压文件,然后改名)</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/hadoop</span><br><span class="line"><span class="built_in">cd</span> /opt/hadoop </span><br><span class="line">tar <span class="literal">-zxvf</span> hadoop<span class="literal">-2</span>.<span class="number">7.5</span>.tar.gz</span><br><span class="line"><span class="built_in">mv</span> hadoop<span class="literal">-2</span>.<span class="number">7.5</span> hadoop</span><br></pre></td></tr></table></figure><ol start="3"><li>配置环境变量</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#在末尾增加以下内容，然后保存</span></span><br><span class="line"><span class="comment">#HADOOP</span></span><br><span class="line">export HADOOP_HOME=/opt/hadoop/hadoop</span><br><span class="line">export PATH=<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使文件生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="4"><li>配置env文件（打开hadoop-env.sh，找到“export JAVA_HOME”这行配制jdk路径。）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/hadoop/hadoop/etc/hadoop/hadoop<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#写入下列路径(编辑完保存退出即可。)</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk</span><br></pre></td></tr></table></figure><ol start="5"><li>配置核心组件文件（/opt/hadoop/hadoop/etc/hadoop/core-site.xml）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/core<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑的文件（将下列的配置代码放在文件的&lt;configuration&gt;和&lt;/configuration&gt;,保存退出即可）</span></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hdfs://master:<span class="number">9000</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/opt/hadoop/hadoopdata&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建hadoop数据目录</span></span><br><span class="line">mkdir /opt/hadoop/hadoopdata</span><br></pre></td></tr></table></figure><p> 6.配置文件系统（/opt/hadoop/hadoop/etc/hadoop/hdfs-site.xml）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/hdfs<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑的文件（将下列的配置代码放在文件的&lt;configuration&gt;和&lt;/configuration&gt;,保存退出即可）</span></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;<span class="number">1</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>配置yarn站点文件（/opt/hadoop/hadoop/etc/hadoop/yarn-site.xml）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/yarn<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑的文件（将下列的配置代码放在文件的&lt;configuration&gt;和&lt;/configuration&gt;,保存退出即可）</span></span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.aux<span class="literal">-services</span>&lt;/name&gt;</span><br><span class="line">&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:<span class="number">18040</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:<span class="number">18030</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.resource<span class="literal">-tracker</span>.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:<span class="number">18025</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:<span class="number">18141</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:<span class="number">8088</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li>配置MapReduce计算框架文件（）</li></ol><p> 在“/opt/hadoop/hadoop/etc/hadoop”子目录下，系统已经有一个 mapred-site.xml.template文件，我们需要将其复制并改名，位置不变，命令是“</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /opt/hadoop/hadoop/etc/hadoop/mapred<span class="literal">-site</span>.xml.template /opt/hadoop/hadoop/etc/hadoop/mapred<span class="literal">-site</span>.xml</span><br><span class="line">vim /opt/hadoop/hadoop/etc/hadoop/mapred<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><p>  ”，然后，用 vi编辑 mapred-site.xml 文件，需要将下面的代码填充到文件<configuration> </configuration>中间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>编辑完毕，保存退出即可。</p><ol start="9"><li>配置Master的slaves文件</li></ol><ul><li><p>slaves 文件给出了 Hadoop 集群的 Slave 节点列表。该文件十分重要，因为启动Hadoop 的时候，系统总是根据当前 slaves 文件中 Slave 节点名称列表启动集群，不在列表中的Slave 节点便不会被视为计算节点。</p><ol><li>用 vi编辑 slaves 文件，我们应当根据自己所搭建集群的实际情况进行编辑。例如，我们这里由于已经安装了 Slave0 和 Slave1，并且计划将它们全部投入 Hadoop 集群运行，所以应当输入如下代码。</li></ol></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/hadoop/hadoop/etc/hadoop/slaves</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入下列（需要删除原来文件里面localhost那一行）</span></span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><ol start="10"><li>复制 Master 上的 Hadoop 到 Slave 节点（通过复制 Master 节点上的hadoop，能够大大提高系统部署效率。由于我们这里有Slave1 和 Slave2，所以要复制两次。）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="literal">-r</span> /opt/hadoop root@slave1:/opt</span><br><span class="line">scp <span class="literal">-r</span> /opt/hadoop root@slave2:/opt</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li>复制Master上的配置文件到Slave节点</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将master节点的配置好的环境变量覆盖到其他节点</span></span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave1:/etc/profile</span><br><span class="line">scp <span class="literal">-r</span> /etc/profile slave2:/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#使修改生效</span></span><br><span class="line">ssh slave1 source /etc/profile</span><br><span class="line">ssh slave2 source /etc/profile</span><br></pre></td></tr></table></figure><ol start="12"><li>格式化文件系统（该操作只需要在 Master 节点上进行，命令是“ hadoop namenode -format”）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode <span class="literal">-format</span></span><br></pre></td></tr></table></figure><ol start="13"><li>启动和关闭 Hadoop</li></ol><ul><li>可以使用 start-all.sh 命令启动 Hadoop 集群。<br>首先进入 Hadoop 安装主目录，然后执行 shin/start-all.sh 命令，执行命令后，系统提示“ Are you sure want to continue connecting（yes/no）”，请输入yes，之后系统即可启动。 </li><li>要关闭 Hadoop 集群，可以使用 stop-all.sh 命令,<br>下次启动 Hadoop 时候，无须 NameNode 的初始化，只需要使用start-dfs.sh 命令即可，然后接着使用 start-yarn.sh 启动 Yarn 。</li><li>实际上，Hadoop 系统建议放弃（deprecated）使用 start-all. sh 和 stop-all.sh 一类的命令，而改用 start-dfs.sh 和 start-yarn .sh 命令。</li></ul><ol start="14"><li>验证 Hadoop 是否启动成功</li></ol><ul><li>用户可以在终端执行 jps 命令查看 Hadoop 是否启动成功。在 Master 节点，执行 jps后如果显示的结果是四个进程的名称： SecondaryNameNode、 ResourceManager、 Jps 和NameNode，如下图所示，则表明主节点（ Master ）启动成功 。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201008020406927.png#pic_center" alt="在这里插入图片描述"></p><ul><li>在 Slave0 节点执行 jps 命令，打印的结果中会显示三个进程，分别是 NodeManager、<br>Jps 和 DataNode ，如下图所示，表明从节点（Slave0）启动成功。其他节点可以类似验证。<br><img src="https://img-blog.csdnimg.cn/20201008020448168.png#pic_center" alt="在这里插入图片描述"></li></ul><h2 id="四-Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all-sh）"><a href="#四-Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all-sh）" class="headerlink" title="四.Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all.sh）"></a>四.Hive数据仓库安装（启动hive之前要启动Hadoop命令为：start-all.sh）</h2><p>1.自行选择下载hive（点击百度网盘链接可以下载) <a href="https://pan.baidu.com/s/1ICqytI-qI6Xa1A4jg2mBqg">百度网盘链接</a> 提取码：vauh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line">mkdir /opt/Hive</span><br></pre></td></tr></table></figure><p>2.用xftp上传压缩文件.gz文件到/opt/Hive(上传完解压文件,然后改名)<br><img src="https://img-blog.csdnimg.cn/20201122143223428.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压文件夹</span></span><br><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-hive</span><span class="literal">-2</span>.<span class="number">3.4</span><span class="literal">-bin</span>.tar.gz</span><br><span class="line"><span class="comment">#给解压的文件改名为hive</span></span><br><span class="line"><span class="built_in">mv</span> apache<span class="literal">-hive</span><span class="literal">-2</span>.<span class="number">3.4</span><span class="literal">-bin</span> hive</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122143817901.png#pic_center" alt="在这里插入图片描述"><br>3.配置hive环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#打开文件后在对下面添加hive路径</span></span><br><span class="line">export HIVE_HOME=/opt/Hive/hive</span><br><span class="line"><span class="comment">#参考这个我的路径前面配置了jkd，Hadoop路经。“export PATH=$HIVE_HOME/bin:$PATH”</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使文件生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="comment">#查看hive版本号(出现版本说明安装正确）</span></span><br><span class="line">hive -<span class="literal">-version</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122145507959.png#pic_center" alt="在这里插入图片描述"><br>4.修改hive配置文件</p><p>进入conf文件夹查看文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hive/hive/conf/</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122150017204.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> hive<span class="literal">-env</span>.sh.template hive<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#添加hadoop环境变量</span></span><br><span class="line">export HADOOP_HOME=/opt/hadoop/hadoop</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122163607772.png#pic_center" alt="在这里插入图片描述"></p><p>查看hive-site.xml（如果没有就复制一份模板）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制模板（有hive-site.xml文件跳过这一步）</span></span><br><span class="line"><span class="built_in">cp</span> hive<span class="literal">-default</span>.xml.template hive<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><p>配置hive-site.xml</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hive<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><p>在文件中添加（汉字是解释，把这一段放在文件最下面，在</configuration>上面）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;用户名（这是新添加的，记住删除配置文件原有的哦！）</span><br><span class="line">       &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;密码</span><br><span class="line">       &lt;value&gt;<span class="number">123456</span>&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;mysql</span><br><span class="line">       &lt;value&gt;jdbc:mysql://<span class="number">192.168</span>.<span class="number">232.111</span>:<span class="number">3306</span>/hive&lt;/value&gt;mysql的ip端口号</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;mysql驱动程序</span><br><span class="line">       &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;system:java.io.tmpdir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;/opt/Hive/hive/logs/tmp&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122181238668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>5.用xftp复制mysql的驱动程序到hive/lib下面，<a href="https://pan.baidu.com/s/1iM8zAuuemijjAfNiODui6A">百度网盘中的mysql的jar包链接</a>，验证码：h4m1。我用的jar包为：mysql-connector-java-5.1.21-bin.jar</p><p>​<br>6.在mysql中hive的schema（在此之前需要创建mysql下的hive数据库）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hive/hive/bin</span><br><span class="line">schematool <span class="literal">-dbType</span> mysql <span class="literal">-initSchema</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122184640619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>7.执行hive命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122184743486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>1.出现报错</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201122185045339.png#pic_center" alt="在这里插入图片描述"><br>进入hive文件夹下的conf文件下,找到hive-site.xml</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">修改前：</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="variable">$</span>&#123;system:java.io.tmpdir&#125;/<span class="variable">$</span>&#123;system:user.name&#125;&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Local scratch space <span class="keyword">for</span> Hive jobs&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改后：</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="variable">$</span>&#123;system:java.io.tmpdir&#125;/<span class="variable">$</span>&#123;user.name&#125;&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Local scratch space <span class="keyword">for</span> Hive jobs&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>在查看测试成功<br><img src="https://img-blog.csdnimg.cn/20201122190339706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="五-Sqoop安装"><a href="#五-Sqoop安装" class="headerlink" title="五.Sqoop安装"></a>五.Sqoop安装</h2><p>1.自行选择下载sqoop（点击百度网盘链接可以下载) <a href="https://pan.baidu.com/s/1Df7hy1i_Sfvf29yZKp5dsw">百度网盘链接</a> 提取码：bhpf  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line">mkdir /opt/Sqoop</span><br></pre></td></tr></table></figure><p>2.用xftp上传压缩文件.gz文件到/opt/Sqoop(上传完解压文件,然后改名)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压文件</span></span><br><span class="line">tar <span class="literal">-zxvf</span> sqoop<span class="literal">-1</span>.<span class="number">4.7</span>.bin__hadoop<span class="literal">-2</span>.<span class="number">6.0</span>.tar.gz</span><br><span class="line">解压完改名</span><br><span class="line"><span class="built_in">mv</span> sqoop<span class="literal">-1</span>.<span class="number">4.7</span>.bin__hadoop<span class="literal">-2</span>.<span class="number">6.0</span> sqoop</span><br></pre></td></tr></table></figure><p>3.配置环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#打开文件后在对下面添加hive路径</span></span><br><span class="line">export SQOOP_HOME=/opt/Sqoop/sqoop</span><br><span class="line"><span class="comment">#参考这个我的路径前面配置了jkd，Hadoop,hive路经。“export PATH=$PATH:$SQOOP_HOME/bin&quot;</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$PATH:</span><span class="variable">$SQOOP_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使文件生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>4.修改配置文件<br>Sqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/Sqoop/sqoop/conf</span><br><span class="line"><span class="comment">#复制文件并改名</span></span><br><span class="line"><span class="built_in">cp</span> sqoop<span class="literal">-env</span><span class="literal">-template</span>.sh sqoop<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#进入文件</span></span><br><span class="line">vim sqoop<span class="literal">-env</span>.sh</span><br><span class="line"><span class="comment">#文件里需要添加的参数</span></span><br><span class="line">export HADOOP_COMMON_HOME=/opt/hadoop/hadoop</span><br><span class="line">export HADOOP_MAPRED_HOME=/opt/hadoop/hadoop</span><br><span class="line">export HIVE_HOME=/opt/Hive/hive</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201123171846372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5.拷贝mysql驱动</p><p>拷贝上面hive用的mysql驱动到sqoop的lib目录下</p><p>6.验证 Sqoop<br>我们可以通过某一个 command 来验证 sqoop 配置是否正确：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop help</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201123173050203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop list<span class="literal">-databases</span> -<span class="literal">-connect</span> jdbc:mysql://master:<span class="number">3306</span>/ -<span class="literal">-username</span> root -<span class="literal">-password</span> xiwen123</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201123173512134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk2MTM4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p>第一个篇博客搭建集群</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;﻿## Hadoop搭建&lt;/p&gt;
&lt;p&gt;（其他组件安装最近更新）&lt;/p&gt;
&lt;h2 id=&quot;一-系统一些基本配置&quot;&gt;&lt;a href=&quot;#一-系统一些基本配置&quot; class=&quot;headerlink&quot; title=&quot;一.系统一些基本配置&quot;&gt;&lt;/a&gt;一.系统一些基本配置&lt;/h2&gt;&lt;p&gt;1.更改网卡配置（克隆之后把另外两台ip改了）&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/sysconfig/network&lt;span class=&quot;literal&quot;&gt;-scripts&lt;/span&gt;/ifcfg&lt;span class=&quot;literal&quot;&gt;-ens33&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#网卡里面的配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;TYPE&lt;/span&gt;=Ethernet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROXY_METHOD=none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BROWSER_ONLY=no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOTPROTO=&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#使用static配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEFROUTE=yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPV4_FAILURE_FATAL=no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPV6INIT=yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPV6_AUTOCONF=yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPV6_DEFROUTE=yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPV6_FAILURE_FATAL=no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPV6_ADDR_GEN_MODE=stable&lt;span class=&quot;literal&quot;&gt;-privacy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME=ens33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UUID=&lt;span class=&quot;number&quot;&gt;316&lt;/span&gt;c77f2&lt;span class=&quot;literal&quot;&gt;-75e6&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-47cd&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-ba71&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-227d4ac9457f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEVICE=ens33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ONBOOT=yes	&lt;span class=&quot;comment&quot;&gt;#开机启动配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看自己的ip和网关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPADDR=&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;232.111&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#静态ip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GATEWAY=&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;232.2&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#默认网关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETMASK=&lt;span class=&quot;number&quot;&gt;255.255&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;255.0&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#子网掩码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNS1=&lt;span class=&quot;number&quot;&gt;8.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNS2=&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
